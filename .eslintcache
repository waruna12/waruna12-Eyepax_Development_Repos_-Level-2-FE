[{"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\index.js":"1","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\App.js":"2","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\auth-context.js":"3","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\AuthPage.js":"4","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\ClientPage.js":"5","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\HomePage.js":"6","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\CalenderPage.js":"7","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\ReservationPage.js":"8","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\Layout.js":"9","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Profile\\UserProfile.js":"10","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Profile\\ProfileForm.js":"11","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\MainNavigation.js":"12","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Auth\\AuthForm.js":"13","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientPageContent.js":"14","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\StartingPageContent.js":"15","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationPageContent.js":"16","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\data.js":"17","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\PieChart.js":"18","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientTable.js":"19","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\AddClientModel.js":"20","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\BarChartContent.js":"21","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\InviteNewUser.js":"22","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\AddReservation.js":"23","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationTable.js":"24","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\AuthService.js":"25","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\UpdateClient.js":"26","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\DeleteClient.js":"27","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\ClientService.js":"28","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\ReservationService.js":"29","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\DeleteReservation.js":"30","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\UpdateReservation.js":"31","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\config\\constants.js":"32","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\UserService.js":"33","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\index.js":"34","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\App.js":"35","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\store\\auth-context.js":"36","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\ReservationPage.js":"37","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\AuthPage.js":"38","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\ClientPage.js":"39","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\HomePage.js":"40","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\CalenderPage.js":"41","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Layout\\Layout.js":"42","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Profile\\UserProfile.js":"43","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Layout\\MainNavigation.js":"44","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Profile\\ProfileForm.js":"45","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\ReservationPageContent.js":"46","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\ClientPageContent.js":"47","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Auth\\AuthForm.js":"48","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\StartingPageContent.js":"49","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\ReservationTable.js":"50","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\AddReservation.js":"51","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\ClientTable.js":"52","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\data.js":"53","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\AddClientModel.js":"54","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\InviteNewUser.js":"55","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\PieChart.js":"56","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\Slide.js":"57","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\BarChartContent.js":"58","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\AuthService.js":"59","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\ReservationService.js":"60","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\UpdateReservation.js":"61","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\DeleteReservation.js":"62","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\ClientService.js":"63","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\UserService.js":"64","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\UpdateClient.js":"65","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\DeleteClient.js":"66","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\config\\constants.js":"67","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\store\\client-context.js":"68","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\store\\reservation-context.js":"69","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Auth\\SignUp.js":"70","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\reservation-context.js":"71","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\client-context.js":"72","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Auth\\SignUp.js":"73","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Calender\\CalenderDragDrop.js":"74","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\index.js":"75","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\App.js":"76","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\store\\reservation-context.js":"77","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\store\\client-context.js":"78","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\store\\auth-context.js":"79","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\ReservationPage.js":"80","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\AuthPage.js":"81","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\CalenderPage.js":"82","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\ClientPage.js":"83","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\HomePage.js":"84","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Auth\\SignUp.js":"85","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Layout\\Layout.js":"86","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Profile\\UserProfile.js":"87","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Auth\\AuthForm.js":"88","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\ClientPageContent.js":"89","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\ReservationPageContent.js":"90","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Layout\\MainNavigation.js":"91","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Calender\\CalenderDragDrop.js":"92","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\StartingPageContent.js":"93","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Profile\\ProfileForm.js":"94","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\AuthService.js":"95","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\ClientTable.js":"96","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\AddClientModel.js":"97","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\ReservationTable.js":"98","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\AddReservation.js":"99","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\ReservationService.js":"100","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\PieChart.js":"101","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\BarChartContent.js":"102","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\UserService.js":"103","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\InviteNewUser.js":"104","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\config\\constants.js":"105","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\DeleteClient.js":"106","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\ClientService.js":"107","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\UpdateClient.js":"108","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\UpdateReservation.js":"109","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\DeleteReservation.js":"110","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\data.js":"111","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Layout\\Sidebar.js":"112","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\Sidebar.js":"113","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\AdminPage.js":"114","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Admin\\AdminTable.js":"115","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Admin\\AdminPageContent.js":"116","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Admin\\InviteUser.js":"117","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\user-context.js":"118","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\MyProfile\\MyProfile.js":"119"},{"size":728,"mtime":1664968392363,"results":"120","hashOfConfig":"121"},{"size":2851,"mtime":1664969855027,"results":"122","hashOfConfig":"121"},{"size":1254,"mtime":1663640920777,"results":"123","hashOfConfig":"121"},{"size":130,"mtime":1648643396000,"results":"124","hashOfConfig":"121"},{"size":174,"mtime":1658806940240,"results":"125","hashOfConfig":"121"},{"size":171,"mtime":1664280668243,"results":"126","hashOfConfig":"121"},{"size":173,"mtime":1663641845254,"results":"127","hashOfConfig":"121"},{"size":200,"mtime":1658834079878,"results":"128","hashOfConfig":"121"},{"size":245,"mtime":1664435954088,"results":"129","hashOfConfig":"121"},{"size":308,"mtime":1664436029047,"results":"130","hashOfConfig":"121"},{"size":3567,"mtime":1665464012841,"results":"131","hashOfConfig":"121"},{"size":1494,"mtime":1664510104545,"results":"132","hashOfConfig":"121"},{"size":2342,"mtime":1665656705086,"results":"133","hashOfConfig":"121"},{"size":733,"mtime":1665125577203,"results":"134","hashOfConfig":"121"},{"size":992,"mtime":1664351789090,"results":"135","hashOfConfig":"121"},{"size":750,"mtime":1663668622856,"results":"136","hashOfConfig":"121"},{"size":2145,"mtime":1665375239181,"results":"137","hashOfConfig":"121"},{"size":2543,"mtime":1665316455964,"results":"138","hashOfConfig":"121"},{"size":3201,"mtime":1665895281117,"results":"139","hashOfConfig":"121"},{"size":8490,"mtime":1665895489165,"results":"140","hashOfConfig":"121"},{"size":1902,"mtime":1665371387520,"results":"141","hashOfConfig":"121"},{"size":2892,"mtime":1665721279774,"results":"142","hashOfConfig":"121"},{"size":11021,"mtime":1665894657069,"results":"143","hashOfConfig":"121"},{"size":2791,"mtime":1665309686723,"results":"144","hashOfConfig":"121"},{"size":1779,"mtime":1665713763388,"results":"145","hashOfConfig":"121"},{"size":6259,"mtime":1665295795696,"results":"146","hashOfConfig":"121"},{"size":2351,"mtime":1665295015268,"results":"147","hashOfConfig":"121"},{"size":5802,"mtime":1665896292225,"results":"148","hashOfConfig":"121"},{"size":7499,"mtime":1665665475040,"results":"149","hashOfConfig":"121"},{"size":2375,"mtime":1665400265147,"results":"150","hashOfConfig":"121"},{"size":11658,"mtime":1665724607554,"results":"151","hashOfConfig":"121"},{"size":367,"mtime":1665398097632,"results":"152","hashOfConfig":"121"},{"size":4731,"mtime":1665721342433,"results":"153","hashOfConfig":"121"},{"size":622,"mtime":1662831857304,"results":"154","hashOfConfig":"155"},{"size":1673,"mtime":1662958788957,"results":"156","hashOfConfig":"155"},{"size":958,"mtime":1662547056953,"results":"157","hashOfConfig":"155"},{"size":200,"mtime":1658834079878,"results":"158","hashOfConfig":"155"},{"size":130,"mtime":1648643396000,"results":"159","hashOfConfig":"155"},{"size":174,"mtime":1658806940240,"results":"160","hashOfConfig":"155"},{"size":171,"mtime":1648643396000,"results":"161","hashOfConfig":"155"},{"size":170,"mtime":1658851812231,"results":"162","hashOfConfig":"155"},{"size":246,"mtime":1648643396000,"results":"163","hashOfConfig":"155"},{"size":278,"mtime":1648643396000,"results":"164","hashOfConfig":"155"},{"size":1103,"mtime":1662977209080,"results":"165","hashOfConfig":"155"},{"size":755,"mtime":1659093126260,"results":"166","hashOfConfig":"155"},{"size":812,"mtime":1662830578637,"results":"167","hashOfConfig":"155"},{"size":733,"mtime":1662828802467,"results":"168","hashOfConfig":"155"},{"size":2640,"mtime":1662978292545,"results":"169","hashOfConfig":"155"},{"size":1137,"mtime":1662831668431,"results":"170","hashOfConfig":"155"},{"size":4040,"mtime":1662831417827,"results":"171","hashOfConfig":"155"},{"size":9425,"mtime":1662874275661,"results":"172","hashOfConfig":"155"},{"size":2608,"mtime":1662828874716,"results":"173","hashOfConfig":"155"},{"size":2189,"mtime":1662703726857,"results":"174","hashOfConfig":"155"},{"size":5869,"mtime":1662828732830,"results":"175","hashOfConfig":"155"},{"size":2610,"mtime":1662977344817,"results":"176","hashOfConfig":"155"},{"size":2387,"mtime":1662831582423,"results":"177","hashOfConfig":"155"},{"size":2867,"mtime":1662831897917,"results":"178","hashOfConfig":"155"},{"size":1807,"mtime":1662831545891,"results":"179","hashOfConfig":"155"},{"size":1744,"mtime":1662968612705,"results":"180","hashOfConfig":"155"},{"size":5181,"mtime":1662721272625,"results":"181","hashOfConfig":"155"},{"size":10623,"mtime":1662874524707,"results":"182","hashOfConfig":"155"},{"size":2615,"mtime":1662820729590,"results":"183","hashOfConfig":"155"},{"size":3501,"mtime":1662614156925,"results":"184","hashOfConfig":"155"},{"size":1151,"mtime":1662967745839,"results":"185","hashOfConfig":"155"},{"size":6352,"mtime":1662877186232,"results":"186","hashOfConfig":"155"},{"size":2577,"mtime":1662821038950,"results":"187","hashOfConfig":"155"},{"size":56,"mtime":1658906277807,"results":"188","hashOfConfig":"155"},{"size":375,"mtime":1662831708487,"results":"189","hashOfConfig":"155"},{"size":425,"mtime":1662831720456,"results":"190","hashOfConfig":"155"},{"size":2628,"mtime":1662965849648,"results":"191","hashOfConfig":"155"},{"size":425,"mtime":1662831720456,"results":"192","hashOfConfig":"121"},{"size":375,"mtime":1662831708487,"results":"193","hashOfConfig":"121"},{"size":5849,"mtime":1665656614273,"results":"194","hashOfConfig":"121"},{"size":3973,"mtime":1665553020327,"results":"195","hashOfConfig":"121"},{"size":622,"mtime":1663669529362,"results":"196","hashOfConfig":"197"},{"size":2436,"mtime":1664329626291,"results":"198","hashOfConfig":"197"},{"size":425,"mtime":1662831720456,"results":"199","hashOfConfig":"197"},{"size":375,"mtime":1662831708487,"results":"200","hashOfConfig":"197"},{"size":1254,"mtime":1663640920777,"results":"201","hashOfConfig":"197"},{"size":200,"mtime":1658834079878,"results":"202","hashOfConfig":"197"},{"size":130,"mtime":1648643396000,"results":"203","hashOfConfig":"197"},{"size":173,"mtime":1663641845254,"results":"204","hashOfConfig":"197"},{"size":174,"mtime":1658806940240,"results":"205","hashOfConfig":"197"},{"size":171,"mtime":1664280668243,"results":"206","hashOfConfig":"197"},{"size":2658,"mtime":1664433555591,"results":"207","hashOfConfig":"197"},{"size":446,"mtime":1664280384200,"results":"208","hashOfConfig":"197"},{"size":356,"mtime":1664343690610,"results":"209","hashOfConfig":"197"},{"size":2491,"mtime":1664356540875,"results":"210","hashOfConfig":"197"},{"size":733,"mtime":1664284325533,"results":"211","hashOfConfig":"197"},{"size":750,"mtime":1663668622856,"results":"212","hashOfConfig":"197"},{"size":1494,"mtime":1664433902373,"results":"213","hashOfConfig":"197"},{"size":4056,"mtime":1664346643696,"results":"214","hashOfConfig":"197"},{"size":992,"mtime":1664351789090,"results":"215","hashOfConfig":"197"},{"size":3913,"mtime":1664343788294,"results":"216","hashOfConfig":"197"},{"size":1492,"mtime":1664182679393,"results":"217","hashOfConfig":"197"},{"size":2530,"mtime":1664433648486,"results":"218","hashOfConfig":"197"},{"size":6280,"mtime":1664352169500,"results":"219","hashOfConfig":"197"},{"size":2762,"mtime":1664433984910,"results":"220","hashOfConfig":"197"},{"size":9592,"mtime":1664364993430,"results":"221","hashOfConfig":"197"},{"size":6148,"mtime":1664183780076,"results":"222","hashOfConfig":"197"},{"size":2467,"mtime":1664342360305,"results":"223","hashOfConfig":"197"},{"size":1796,"mtime":1664342489883,"results":"224","hashOfConfig":"197"},{"size":1563,"mtime":1664183804592,"results":"225","hashOfConfig":"197"},{"size":3189,"mtime":1664351720398,"results":"226","hashOfConfig":"197"},{"size":56,"mtime":1658906277807,"results":"227","hashOfConfig":"197"},{"size":2773,"mtime":1664352372906,"results":"228","hashOfConfig":"197"},{"size":3518,"mtime":1664183587306,"results":"229","hashOfConfig":"197"},{"size":6774,"mtime":1664352540709,"results":"230","hashOfConfig":"197"},{"size":11804,"mtime":1664434063781,"results":"231","hashOfConfig":"197"},{"size":2782,"mtime":1664356357327,"results":"232","hashOfConfig":"197"},{"size":2145,"mtime":1663048415028,"results":"233","hashOfConfig":"197"},{"size":1279,"mtime":1664364256867,"results":"234","hashOfConfig":"197"},{"size":1484,"mtime":1664963766329,"results":"235","hashOfConfig":"121"},{"size":164,"mtime":1664951795373,"results":"236","hashOfConfig":"121"},{"size":1356,"mtime":1665405598035,"results":"237","hashOfConfig":"121"},{"size":620,"mtime":1664954824479,"results":"238","hashOfConfig":"121"},{"size":1873,"mtime":1665402589646,"results":"239","hashOfConfig":"121"},{"size":359,"mtime":1664968383267,"results":"240","hashOfConfig":"121"},{"size":4516,"mtime":1665465151122,"results":"241","hashOfConfig":"121"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},"1k1wi1l",{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"244"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"244"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"244"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},"wgt8vx",{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"314"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"314"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"314"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"314"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"314"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"314"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"314"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"244"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"244"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},"1b6wk03",{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"408"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"408"},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"437","messages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"439","messages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"441","messages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"408"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"408"},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"408"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"408"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"408"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486"},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"244"},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"244"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"507","messages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509","usedDeprecatedRules":"244"},"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\index.js",[],["510","511"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\App.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\auth-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\AuthPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\ClientPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\HomePage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\CalenderPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\ReservationPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\Layout.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Profile\\UserProfile.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Profile\\ProfileForm.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\MainNavigation.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Auth\\AuthForm.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\StartingPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\data.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\PieChart.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientTable.js",["512","513","514","515"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\AddClientModel.js",["516","517"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\BarChartContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\InviteNewUser.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\AddReservation.js",["518","519","520"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationTable.js",["521"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport DeleteReservation from \"./DeleteReservation\";\r\nimport UpdateReservation from \"./UpdateReservation\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\n\r\nconst ReservationTable = () => {\r\n  const [reservation, setReservationContext] = useContext(ReservationContext);\r\n  const [reservationId, setReservationId] = useState(\"\");\r\n  const [reservationUpdate, setReservationUpdate] = useState(false);\r\n\r\n  const updateReservationRow = reservation.map((reservation) => {\r\n    return {\r\n      ...reservation,\r\n      id: reservation._id,\r\n    };\r\n  });\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n      setReservationContext(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    ReservationDetails();\r\n    setReservationUpdate(false);\r\n  }, [reservationUpdate]);\r\n\r\n  const onClick = () => {\r\n    ReservationDetails();\r\n  };\r\n\r\n  const columns = [\r\n    { field: \"client_email\", headerName: \"Client\", flex: 2 },\r\n    { field: \"service_type\", headerName: \"Service Type\", flex: 2 },\r\n    { field: \"stylist_email\", headerName: \"Stylist\", flex: 2 },\r\n    { field: \"reservation_date\", headerName: \"Date\", flex: 2 },\r\n    { field: \"reservation_time\", headerName: \"Time\", flex: 2 },\r\n    { field: \"reservation_status\", headerName: \"Status\", flex: 2 },\r\n    {\r\n      field: \"Action\",\r\n      headerName: \"Action\",\r\n      flex: 1,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setReservationId(params.row.id);\r\n            }}\r\n            style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n          >\r\n            <UpdateReservation\r\n              reservationId={reservationId}\r\n              onUpdateReservationData={setReservationUpdate}\r\n            />\r\n            <DeleteReservation\r\n              reservationId={reservationId}\r\n              onClick={onClick}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <Row\r\n        style={{\r\n          width: \"100%\",\r\n          marginTop: \"2vh\",\r\n        }}\r\n      >\r\n        <DataGrid\r\n          rows={updateReservationRow}\r\n          columns={columns}\r\n          autoHeight\r\n          pageSize={5}\r\n          rowsPerPageOptions={[5]}\r\n        />\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ReservationTable;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\AuthService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\UpdateClient.js",["522","523"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./UpdateClient.module.css\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { Formik } from \"formik\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { ClientContext } from \"./../../store/client-context\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst UpdateClient = (props) => {\r\n  const [clients, setClients] = useContext(ClientContext);\r\n  props.onUpdateClientData(false);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    ClientDetailSearchID();\r\n  };\r\n\r\n  const [clientInfo, setClientInfo] = useState({\r\n    email: \"\",\r\n    fname: \"\",\r\n    lname: \"\",\r\n    phone_number: \"\",\r\n  });\r\n\r\n  const onSubmitForm = async (values) => {\r\n    try {\r\n      const result = await ClientService.clientUpdate(\r\n        props.clientId,\r\n        values.fname,\r\n        values.lname,\r\n        values.phone_number,\r\n        values.email\r\n      );\r\n      ClientDetails();\r\n      props.onUpdateClientData(true);\r\n      handleClose();\r\n      return result;\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ClientDetailSearchID = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetailsID(props.clientId);\r\n\r\n      const info = {};\r\n\r\n      const cliInfo = result;\r\n\r\n      info.email = cliInfo.email;\r\n      info.fname = cliInfo.fname;\r\n      info.lname = cliInfo.lname;\r\n      info.phone_number = cliInfo.phone_number;\r\n\r\n      setClientInfo(info);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.clientId === \"\") {\r\n    } else {\r\n      ClientDetailSearchID();\r\n    }\r\n  }, [props.clientId]);\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n      setClients(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <FontAwesomeIcon\r\n        icon={faPen}\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={handleOpen}\r\n      />\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Update Client\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                  email: clientInfo.email,\r\n                  fname: clientInfo.fname,\r\n                  lname: clientInfo.lname,\r\n                  phone_number: clientInfo.phone_number,\r\n                }}\r\n                onSubmit={onSubmitForm}\r\n              >\r\n                {({\r\n                  values,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Email</label>\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.email}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"fname\">First Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"fname\"\r\n                        name=\"fname\"\r\n                        required\r\n                        value={values.fname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Last Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"text\"\r\n                        name=\"lname\"\r\n                        required\r\n                        value={values.lname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"phonenumber\">Phone Number</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"phone_number\"\r\n                        name=\"phone_number\"\r\n                        required\r\n                        value={values.phone_number}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginTop: \"5vh\",\r\n                      }}\r\n                    >\r\n                      <Button\r\n                        disabled={isSubmitting}\r\n                        type=\"submit\"\r\n                        variant=\"light\"\r\n                      >\r\n                        Update Client\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateClient;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\DeleteClient.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\ClientService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\ReservationService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\DeleteReservation.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\UpdateReservation.js",["524","525"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./UpdateReservation.module.css\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { service_type, timeArray, status } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { Formik } from \"formik\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport moment from \"moment\";\r\nimport {\r\n  DATE_FORMAT,\r\n  TIME_FORMAT,\r\n  CURRENT_DATE,\r\n} from \"./../../config/constants\";\r\n\r\nconst UpdateReservation = (props) => {\r\n  CURRENT_DATE.setDate(CURRENT_DATE.getDate() - 0);\r\n  const currentTime = moment(CURRENT_DATE).format(TIME_FORMAT);\r\n\r\n  const [onChangeDate, setChangeDate] = useState(\"\");\r\n  const [onChangeTime, setChangeTime] = useState(\"\");\r\n  const [availablestylist, setAvailableStylist] = useState([]);\r\n\r\n  const [setReservationContext] = useContext(ReservationContext);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    ReservationDetailSearchID();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    ReservationDetailSearchID();\r\n    ReservationDetails();\r\n  };\r\n\r\n  const [clients, setClients] = useState([]);\r\n\r\n  const [reservationInfo, setReservationInfo] = useState({\r\n    client_email: \"\",\r\n    service_type: \"\",\r\n    stylist_email: \"\",\r\n    reservation_date: \"\",\r\n    reservation_time: \"\",\r\n    reservation_status: \"\",\r\n  });\r\n\r\n  const ReservationDetailSearchID = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetailsID(\r\n        props.reservationId\r\n      );\r\n\r\n      const info = {};\r\n      const reservationInfo = result;\r\n\r\n      info.client_email = reservationInfo.client_email;\r\n      info.service_type = reservationInfo.service_type;\r\n      info.stylist_email = reservationInfo.stylist_email;\r\n      info.reservation_date = reservationInfo.reservation_date;\r\n      info.reservation_time = reservationInfo.reservation_time;\r\n      info.reservation_status = reservationInfo.reservation_status;\r\n\r\n      setChangeDate(reservationInfo.reservation_date);\r\n      setChangeTime(reservationInfo.reservation_time);\r\n      setReservationInfo(info);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n\r\n      setClients(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const onSubmitForm = (values) => {\r\n    try {\r\n      ReservationService.reservationUpdate(\r\n        props.reservationId,\r\n        values.client_email,\r\n        values.service_type,\r\n        values.stylist_email,\r\n        onChangeDate,\r\n        onChangeTime,\r\n        values.reservation_status\r\n      );\r\n\r\n      ReservationDetails();\r\n      props.onUpdateReservationData();\r\n      handleClose();\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n      setReservationContext(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const AvailableStylsitDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationStylistSearch(\r\n        onChangeDate,\r\n        onChangeTime\r\n      );\r\n      setAvailableStylist(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.reservationId) {\r\n      ReservationDetailSearchID();\r\n    }\r\n  }, [props.reservationId]);\r\n\r\n  useEffect(() => {\r\n    if (onChangeDate && onChangeTime) {\r\n      AvailableStylsitDetails();\r\n    }\r\n  }, [onChangeDate, onChangeTime]);\r\n\r\n  return (\r\n    <Container>\r\n      <FontAwesomeIcon\r\n        icon={faPen}\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={handleOpen}\r\n      />\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Update Reservation\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                  client_email: reservationInfo.client_email,\r\n                  service_type: reservationInfo.service_type,\r\n                  stylist_email: reservationInfo.stylist_email,\r\n                  reservation_date: reservationInfo.reservation_date,\r\n                  reservation_time: reservationInfo.reservation_time,\r\n                  reservation_status: reservationInfo.reservation_status,\r\n                }}\r\n                onSubmit={onSubmitForm}\r\n              >\r\n                {({ values, handleChange, handleBlur, handleSubmit }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Client</label>\r\n                      <select\r\n                        name=\"client_email\"\r\n                        className=\"form-control\"\r\n                        id=\"selectClient\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.client_email}\r\n                      >\r\n                        <option value={\"\"}>Select Client</option>\r\n                        {clients.map((cli, index) => {\r\n                          return (\r\n                            <option key={cli._id} value={cli.email}>\r\n                              {cli.email}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Service Type</label>\r\n                      <select\r\n                        name=\"service_type\"\r\n                        className=\"form-control\"\r\n                        id=\"selectservice\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.service_type}\r\n                      >\r\n                        {service_type.map((service, index) => {\r\n                          return (\r\n                            <option key={service.id} value={service.title}>\r\n                              {service.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Date</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        id=\"date_id\"\r\n                        name=\"reservation_date\"\r\n                        min={moment(CURRENT_DATE).format(DATE_FORMAT)}\r\n                        required\r\n                        value={onChangeDate}\r\n                        onBlur={handleBlur}\r\n                        onChange={(e) => {\r\n                          setChangeDate(e.target.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Time</label>\r\n                      <select\r\n                        name=\"reservation_time\"\r\n                        className=\"form-control\"\r\n                        id=\"reservation_time_id\"\r\n                        required\r\n                        onBlur={handleBlur}\r\n                        value={onChangeTime}\r\n                        onChange={(e) => {\r\n                          setChangeTime(e.target.value);\r\n                        }}\r\n                      >\r\n                        {timeArray.map((time, index) => {\r\n                          return (\r\n                            <option\r\n                              key={time.id}\r\n                              value={time.time}\r\n                              disabled={\r\n                                parseInt(time.time) < parseInt(currentTime) &&\r\n                                moment(CURRENT_DATE).format(DATE_FORMAT) ===\r\n                                  onChangeDate\r\n                              }\r\n                            >\r\n                              {time.time}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Stylist</label>\r\n                      <select\r\n                        name=\"stylist_email\"\r\n                        className=\"form-control\"\r\n                        id=\"stylist_id\"\r\n                        required\r\n                        value={values.stylist_email}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                      >\r\n                        <option value={values.stylist_email}>\r\n                          {values.stylist_email}\r\n                        </option>\r\n                        {availablestylist.map((stylist) => {\r\n                          return (\r\n                            <option key={stylist} value={stylist}>\r\n                              {stylist}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Status</label>\r\n                      <select\r\n                        name=\"reservation_status\"\r\n                        className=\"form-control\"\r\n                        id=\"reservation_status_id\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.reservation_status}\r\n                      >\r\n                        {status.map((stat, index) => {\r\n                          return (\r\n                            <option key={stat.id} value={stat.title}>\r\n                              {stat.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                      <Button variant=\"light\" type=\"submit\">\r\n                        Update Reservation\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateReservation;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\config\\constants.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\UserService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\index.js",[],["526","527"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\App.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\store\\auth-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\ReservationPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\AuthPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\ClientPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\HomePage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\CalenderPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Layout\\Layout.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Profile\\UserProfile.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Layout\\MainNavigation.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Profile\\ProfileForm.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\ReservationPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\ClientPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Auth\\AuthForm.js",["528"],"import { useState, useRef, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport AuthContext from \"../../store/auth-context\";\nimport classes from \"./AuthForm.module.css\";\nimport { UserService } from \"./../../services/AuthService\";\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\n\nconst AuthForm = () => {\n  const history = useHistory();\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const authCtx = useContext(AuthContext);\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  // const switchAuthModeHandler = () => {\n  //   setIsLogin((prevState) => !prevState);\n  // };\n\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    if (isLogin) {\n      const enteredEmail = emailInputRef.current.value;\n      const enteredPassword = passwordInputRef.current.value;\n\n      try {\n        const response = await UserService.userLogin(\n          enteredEmail,\n          enteredPassword\n        );\n\n        authCtx.login(response.token);\n        setIsLoading(false);\n        history.replace(\"/\");\n        // document.getElementById(\"create_client\").reset();\n      } catch (err) {\n        setIsLoading(false);\n        NotificationManager.error(\n          \"User Login Faield\",\n          \"error\",\n          \"Close after 25000ms\",\n          45000\n        );\n      }\n    } else {\n    }\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Your Email</label>\n          <input type=\"email\" id=\"email\" required ref={emailInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Your Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            required\n            ref={passwordInputRef}\n          />\n        </div>\n\n        <div className={classes.actions}>\n          {!isLoading && (\n            <button>{isLogin ? \"Login\" : \"Create Account\"}</button>\n          )}\n          {isLoading && <p>Loading...</p>}\n          {/* <button\n            type=\"button\"\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\n          </button> */}\n        </div>\n      </form>\n      <NotificationContainer />\n    </section>\n  );\n};\n\nexport default AuthForm;\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\StartingPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\ReservationTable.js",["529"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport DeleteReservation from \"./DeleteReservation\";\r\nimport UpdateReservation from \"./UpdateReservation\";\r\n// import { status } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\n\r\nconst ReservationTable = () => {\r\n  const [reservation, setReservationContext] = useContext(ReservationContext);\r\n  const [reservationId, setReservationId] = useState(\"\");\r\n  // const [reservation_state, setReservation] = useState(\"\");\r\n  const [reservationUpdate, setReservationUpdate] = useState(false);\r\n\r\n  const newArray = reservation.map((u) => {\r\n    return {\r\n      ...u,\r\n\r\n      id: u._id,\r\n    };\r\n  });\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n      setReservationContext(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    ReservationDetails();\r\n    setReservationUpdate(false);\r\n  }, [reservationUpdate]);\r\n\r\n  const onClick = () => {\r\n    ReservationDetails();\r\n  };\r\n\r\n  const columns = [\r\n    { field: \"client_email\", headerName: \"Client\", width: 180 },\r\n    { field: \"service_type\", headerName: \"Service Type\", width: 150 },\r\n    { field: \"stylist_email\", headerName: \"Stylist\", width: 170 },\r\n    { field: \"reservation_date\", headerName: \"Date\", width: 120 },\r\n    { field: \"reservation_time\", headerName: \"Time\", width: 100 },\r\n    { field: \"reservation_status\", headerName: \"Status\", width: 100 },\r\n    // {\r\n    //   field: \"reservation_status\",\r\n    //   headerName: \"Status\",\r\n    //   width: 130,\r\n    //   sortable: false,\r\n    //   renderCell: (params) => {\r\n    //     return (\r\n    //       <div\r\n    //         onClick={() => {\r\n    //           setReservationId(params.row.id);\r\n    //         }}\r\n    //       >\r\n    //         <select\r\n    //           name=\"\"\r\n    //           required\r\n    //           value={params.row.reservation_status}\r\n    //           onChange={(e) => {\r\n    //             setReservation(e.target.value);\r\n    //           }}\r\n    //         >\r\n    //           <option value={\"\"}>select</option>\r\n\r\n    //           {status.map((sta, index) => {\r\n    //             return (\r\n    //               <option key={sta.id} value={sta.title}>\r\n    //                 {sta.title}\r\n    //               </option>\r\n    //             );\r\n    //           })}\r\n    //         </select>\r\n    //       </div>\r\n    //     );\r\n    //   },\r\n    // },\r\n    {\r\n      field: \"Edit\",\r\n      headerName: \"Edit\",\r\n      width: 100,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setReservationId(params.row.id);\r\n            }}\r\n          >\r\n            <UpdateReservation\r\n              reservationId={reservationId}\r\n              onUpdateReservationData={setReservationUpdate}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"Delete\",\r\n      headerName: \"Delete\",\r\n      width: 100,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setReservationId(params.row.id);\r\n            }}\r\n          >\r\n            <DeleteReservation\r\n              reservationId={reservationId}\r\n              onClick={onClick}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <Row\r\n        style={{\r\n          height: \"50vh\",\r\n          width: \"100%\",\r\n          marginTop: \"2vh\",\r\n        }}\r\n      >\r\n        <DataGrid rows={newArray} columns={columns} />\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ReservationTable;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\AddReservation.js",["530","531","532","533","534"],"import React, { useRef, useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./AddReservation.module.css\";\r\nimport { service_type, timeArray } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport { UserService } from \"./../../services/UserService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport moment from \"moment\";\r\n\r\nconst AddReservationModel = () => {\r\n  var dt = new Date();\r\n  dt.setDate(dt.getDate() - 0);\r\n\r\n  const format1 = \"YYYY-MM-DD\";\r\n\r\n  const [reservation, setReservationContext] = useContext(ReservationContext);\r\n\r\n  const [clients, setClients] = useState([]);\r\n\r\n  const [onChangeDate, setChangeDate] = useState(\"\");\r\n  const [onChangeTime, setChangeTime] = useState(\"\");\r\n\r\n  const [users, setUser] = useState([]);\r\n  const [availablestylist, setAvailableStylist] = useState([]);\r\n\r\n  const [reservationsearchvalue, setReservationSearchValue] = useState(\"\");\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const clientInputRef = useRef();\r\n  const serviceTypeInputRef = useRef();\r\n  const stylistInputRef = useRef();\r\n  const reservationDateInputRef = useRef();\r\n  const reservationTimeInputRef = useRef();\r\n\r\n  const onSubmitForm = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredClient = clientInputRef.current.value;\r\n    const enteredService = serviceTypeInputRef.current.value;\r\n    const enteredStylist = stylistInputRef.current.value;\r\n    const enteredDate = reservationDateInputRef.current.value;\r\n    const enteredTime = reservationTimeInputRef.current.value;\r\n\r\n    try {\r\n      const response = await ReservationService.reservationCreate(\r\n        enteredClient,\r\n        enteredService,\r\n        enteredStylist,\r\n        enteredDate,\r\n        enteredTime\r\n      );\r\n\r\n      ReservationDetails();\r\n      NotificationManager.success(\r\n        \"Reservation Success Added\",\r\n        \"Success\",\r\n        \"Close after 15000ms\",\r\n        15000\r\n      );\r\n      handleClose();\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"Reservation Added Failed\",\r\n        \"error\",\r\n        \"Close after 15000ms\",\r\n        15000\r\n      );\r\n    }\r\n  };\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const UserDetails = async () => {\r\n    try {\r\n      const result = await UserService.userDetails();\r\n\r\n      setUser(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const AvailableStylsitDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationStylistSearch(\r\n        onChangeDate,\r\n        onChangeTime\r\n      );\r\n\r\n      setAvailableStylist(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (onChangeDate && onChangeTime) {\r\n      AvailableStylsitDetails();\r\n    }\r\n  }, [onChangeDate, onChangeTime]);\r\n\r\n  const ReservationDetailSearch = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationSearch(\r\n        reservationsearchvalue\r\n      );\r\n\r\n      setReservationContext(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n\r\n      setReservationContext(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (reservationsearchvalue.length > 0) {\r\n      ReservationDetailSearch();\r\n    } else {\r\n    }\r\n  }, [reservationsearchvalue]);\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n    UserDetails();\r\n  }, []);\r\n\r\n  return (\r\n    <Container className=\"mt-3\">\r\n      <Row>\r\n        <Col sm={4}>\r\n          <InputGroup className=\"mb-3\">\r\n            <Form.Control\r\n              placeholder=\"Search here\"\r\n              aria-label=\"Search here\"\r\n              aria-describedby=\"basic-addon2\"\r\n              onChange={(e) => {\r\n                setReservationSearchValue(e.target.value);\r\n\r\n                if (e.target.value === \"\") {\r\n                  ReservationDetails();\r\n                }\r\n              }}\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col sm={8} style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n          <button onClick={handleOpen} className={classes.button}>\r\n            Add New\r\n          </button>\r\n          <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n          >\r\n            <Box className={classes.auth}>\r\n              <Typography\r\n                id=\"modal-modal-title\"\r\n                variant=\"h6\"\r\n                component=\"h2\"\r\n                textAlign=\"center\"\r\n              >\r\n                Add New Reservation\r\n              </Typography>\r\n              <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                <section>\r\n                  <form onSubmit={onSubmitForm}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Client</label>\r\n                      <select name=\"client\" required ref={clientInputRef}>\r\n                        <option value=\"\">Select Client </option>\r\n                        {clients.map((cli, index) => {\r\n                          return (\r\n                            <option key={cli.id} value={cli.email}>\r\n                              {cli.email}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Service Type</label>\r\n                      <select\r\n                        name=\"serviceType\"\r\n                        required\r\n                        ref={serviceTypeInputRef}\r\n                      >\r\n                        <option value=\"\">Select Service Type</option>\r\n                        {service_type.map((service, index) => {\r\n                          return (\r\n                            <option key={service.id} value={service.title}>\r\n                              {service.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"date\">Select Date</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        min={moment(dt).format(format1)}\r\n                        max=\"2024-09-09\"\r\n                        id=\"password\"\r\n                        required\r\n                        ref={reservationDateInputRef}\r\n                        onChange={(e) => {\r\n                          setChangeDate(e.target.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Select Time</label>\r\n                      <select\r\n                        name=\"time\"\r\n                        required\r\n                        ref={reservationTimeInputRef}\r\n                        onChange={(e) => {\r\n                          setChangeTime(e.target.value);\r\n                        }}\r\n                      >\r\n                        <option value=\"\">Select Time</option>\r\n                        {timeArray.map((time, index) => {\r\n                          return (\r\n                            <option key={time.id} value={time.time}>\r\n                              {time.time}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Stylist</label>\r\n                      <select name=\"stylist\" required ref={stylistInputRef}>\r\n                        <option value=\"\">Select Stylist</option>\r\n                        {availablestylist.map((x) => {\r\n                          return (\r\n                            <option key={x} value={x}>\r\n                              {x}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.actions}>\r\n                      <button>Reservation</button>\r\n                    </div>\r\n                  </form>\r\n                </section>\r\n              </Typography>\r\n            </Box>\r\n          </Modal>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddReservationModel;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\ClientTable.js",["535"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport DeleteClient from \"./DeleteClient\";\r\nimport UpdateClient from \"./UpdateClient\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { ClientContext } from \"./../../store/client-context\";\r\n\r\nconst ClientTable = () => {\r\n  const [clients, setClients] = useContext(ClientContext);\r\n  const [clientUpdate, setClientUpdate] = useState(false);\r\n  const [clientId, setClientId] = useState(\"\");\r\n  const [clientEmail, setClientEmail] = useState(\"\");\r\n\r\n  const newArray = clients.map((u) => {\r\n    return {\r\n      ...u,\r\n\r\n      id: u._id,\r\n    };\r\n  });\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const onClick = () => {\r\n    ClientDetails();\r\n  };\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n  }, [clientUpdate]);\r\n\r\n  const columns = [\r\n    { field: \"fname\", headerName: \"First Name\", width: 150 },\r\n    { field: \"lname\", headerName: \"Last Name\", width: 150 },\r\n    { field: \"phone_number\", headerName: \"Phone Number\", width: 150 },\r\n    { field: \"email\", headerName: \"Email\", width: 200 },\r\n    {\r\n      field: \"Edit\",\r\n      headerName: \"Edit\",\r\n      width: 150,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setClientId(params.row.id);\r\n            }}\r\n          >\r\n            <UpdateClient\r\n              clientId={clientId}\r\n              onUpdateClientData={setClientUpdate}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"Delete\",\r\n      headerName: \"Delete\",\r\n      width: 150,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setClientId(params.row.id);\r\n              setClientEmail(params.row.email);\r\n            }}\r\n          >\r\n            <DeleteClient\r\n              clientId={clientId}\r\n              clientEmail={clientEmail}\r\n              onClick={onClick}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <Row style={{ height: \"50vh\", width: \"100%\", marginTop: \"2vh\" }}>\r\n        <DataGrid rows={newArray} columns={columns} />\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ClientTable;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\data.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\AddClientModel.js",["536","537","538"],"import React, { useRef, useState, useEffect, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./AddClient.module.css\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { ClientContext } from \"./../../store/client-context\";\r\n\r\nconst AddClientModel = () => {\r\n  const [clients, setClients] = useContext(ClientContext);\r\n\r\n  const [searchvalue, setSearchValue] = useState(\"\");\r\n\r\n  const emailInputRef = useRef();\r\n  const fnameInputRef = useRef();\r\n  const lnameInputRef = useRef();\r\n  const phoneNumberInputRef = useRef();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const submitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredEmail = emailInputRef.current.value;\r\n    const enteredFname = fnameInputRef.current.value;\r\n    const enteredLname = lnameInputRef.current.value;\r\n    const enteredPhonenumber = phoneNumberInputRef.current.value;\r\n\r\n    try {\r\n      const response = await ClientService.clientCreate(\r\n        enteredEmail,\r\n        enteredFname,\r\n        enteredLname,\r\n        enteredPhonenumber\r\n      );\r\n\r\n      ClientDetails();\r\n      NotificationManager.success(\r\n        \"Client Success Added\",\r\n        \"Success\",\r\n        \"Close after 25000ms\",\r\n        25000\r\n      );\r\n      document.getElementById(\"create_client\").reset();\r\n      handleClose();\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"Email alredy registered\",\r\n        \"error\",\r\n        \"Close after 25000ms\",\r\n        25000\r\n      );\r\n    }\r\n  };\r\n\r\n  const ClientDetailSearch = async () => {\r\n    try {\r\n      const result = await ClientService.clientSearch(searchvalue);\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (searchvalue.length > 0) {\r\n      ClientDetailSearch();\r\n    } else {\r\n    }\r\n  }, [searchvalue]);\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"mt-3\">\r\n        <Col sm={4}>\r\n          <InputGroup className=\"mb-3\">\r\n            <Form.Control\r\n              placeholder=\"Search here\"\r\n              aria-label=\"Search here\"\r\n              aria-describedby=\"basic-addon2\"\r\n              onChange={(e) => {\r\n                setSearchValue(e.target.value);\r\n                if (e.target.value === \"\") {\r\n                  ClientDetails();\r\n                }\r\n              }}\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col sm={8} style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n          {\" \"}\r\n          <button onClick={handleOpen} className={classes.button}>\r\n            Add New\r\n          </button>\r\n          <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n          >\r\n            <Box className={classes.auth}>\r\n              <Typography\r\n                id=\"modal-modal-title\"\r\n                variant=\"h6\"\r\n                component=\"h2\"\r\n                textAlign=\"center\"\r\n              >\r\n                Add New Client\r\n              </Typography>\r\n              <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                <section>\r\n                  <form onSubmit={submitHandler} id=\"create_client\">\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Email</label>\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        required\r\n                        ref={emailInputRef}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">First Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"fname\"\r\n                        name=\"name\"\r\n                        required\r\n                        ref={fnameInputRef}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Last Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"text\"\r\n                        name=\"lname\"\r\n                        required\r\n                        ref={lnameInputRef}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"phone\">Phone Number</label>\r\n                      <input\r\n                        type=\"phone\"\r\n                        id=\"phone\"\r\n                        name=\"phone\"\r\n                        required\r\n                        ref={phoneNumberInputRef}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className={classes.actions}>\r\n                      <button>Add New</button>\r\n                    </div>\r\n                  </form>\r\n                </section>\r\n              </Typography>\r\n            </Box>\r\n          </Modal>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddClientModel;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\InviteNewUser.js",["539"],"import React, { useRef } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./InviteNewUser.module.css\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { UserService } from \"./../../services/UserService\";\r\n\r\nconst InviteNewUser = () => {\r\n  const emailInputRef = useRef();\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const submitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredEmail = emailInputRef.current.value;\r\n\r\n    try {\r\n      const response = await UserService.inviteUser(enteredEmail);\r\n\r\n      NotificationManager.success(\r\n        \"Send Email Success\",\r\n        \"Success\",\r\n        \"Close after 35000ms\",\r\n        35000\r\n      );\r\n      document.getElementById(\"invite_user\").reset();\r\n      handleClose();\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"Alredy Invite User\",\r\n        \"error\",\r\n        \"Close after 25000ms\",\r\n        25000\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <button onClick={handleOpen} className={classes.button}>\r\n        Invite New User\r\n      </button>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Invite User\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <form onSubmit={submitHandler} id=\"invite_user\">\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <input\r\n                    type=\"email\"\r\n                    id=\"email\"\r\n                    required\r\n                    name=\"email\"\r\n                    ref={emailInputRef}\r\n                  />\r\n                </div>\r\n                <div className={classes.actions}>\r\n                  <button>Invite</button>\r\n                </div>\r\n              </form>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default InviteNewUser;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\PieChart.js",["540","541","542"],"import React, { useEffect, useState } from \"react\";\r\nimport { PieChart, Pie, Tooltip } from \"recharts\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nconst PieChartContent = (props) => {\r\n  const [row, setRow] = useState([]);\r\n\r\n  const newArray = row.map((u) => {\r\n    return {\r\n      ...u,\r\n      name: u.service_type,\r\n      value: 1000,\r\n    };\r\n  });\r\n\r\n  const completeReservation = async () => {\r\n    try {\r\n      const result = await ReservationService.completeReservation();\r\n\r\n      setRow(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    completeReservation();\r\n  }, []);\r\n\r\n  var hairCount = 0;\r\n  var makeUpCount = 0;\r\n  var facialCount = 0;\r\n\r\n  for (var i = 0; i < newArray.length; ++i) {\r\n    if (newArray[i].service_type == \"HairCut\") {\r\n      hairCount++;\r\n    } else if (newArray[i].service_type == \"MakeUp\") {\r\n      makeUpCount++;\r\n    } else if (newArray[i].service_type == \"Facial\") {\r\n      facialCount++;\r\n    }\r\n  }\r\n\r\n  // My object\r\n  const hair = {\r\n    label: \"HairCut\",\r\n    value: hairCount,\r\n  };\r\n\r\n  const makeup = {\r\n    label: \"MakeUp\",\r\n    value: makeUpCount,\r\n  };\r\n\r\n  const facial = {\r\n    label: \"Facial\",\r\n    value: facialCount,\r\n  };\r\n\r\n  var nietos = [];\r\n  var hairObj = {};\r\n  var makeObj = {};\r\n  var facialObj = {};\r\n\r\n  hairObj[\"name\"] = hair.label;\r\n  hairObj[\"value\"] = hair.value;\r\n\r\n  makeObj[\"name\"] = makeup.label;\r\n  makeObj[\"value\"] = makeup.value;\r\n\r\n  facialObj[\"name\"] = facial.label;\r\n  facialObj[\"value\"] = facial.value;\r\n\r\n  nietos.push(hairObj);\r\n  nietos.push(makeObj);\r\n  nietos.push(facialObj);\r\n\r\n  return (\r\n    <Container>\r\n      <Row style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <PieChart width={400} height={400}>\r\n          <Pie\r\n            dataKey=\"value\"\r\n            isAnimationActive={true}\r\n            data={nietos}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            outerRadius={80}\r\n            fill=\"#8884d8\"\r\n            label\r\n          />\r\n          <Tooltip />\r\n        </PieChart>\r\n      </Row>\r\n      <Row>\r\n        <h6 style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          All reservation made verses completed reservations\r\n        </h6>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PieChartContent;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\Slide.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\BarChartContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\AuthService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\ReservationService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\UpdateReservation.js",["543","544"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./UpdateReservation.module.css\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { service_type, timeArray, status } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { Formik } from \"formik\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { UserService } from \"./../../services/UserService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\n\r\nconst UpdateReservation = (props) => {\r\n  const [reservation, setReservationContext] = useContext(ReservationContext);\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const [clients, setClients] = useState([]);\r\n\r\n  const [users, setUser] = useState([]);\r\n\r\n  const [reservationInfo, setReservationInfo] = useState({\r\n    client_email: \"\",\r\n    service_type: \"\",\r\n    stylist_email: \"\",\r\n    reservation_date: \"\",\r\n    reservation_time: \"\",\r\n    reservation_status: \"\",\r\n  });\r\n\r\n  const ReservationDetailSearchID = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationIDDetailsID(\r\n        props.reservationId\r\n      );\r\n\r\n      const info = {};\r\n\r\n      const reservationInfo = result;\r\n\r\n      info.client_email = reservationInfo.client_email;\r\n      info.service_type = reservationInfo.service_type;\r\n      info.stylist_email = reservationInfo.stylist_email;\r\n      info.reservation_date = reservationInfo.reservation_date;\r\n      info.reservation_time = reservationInfo.reservation_time;\r\n      info.reservation_status = reservationInfo.reservation_status;\r\n\r\n      setReservationInfo(info);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const UserDetails = async () => {\r\n    try {\r\n      const result = await UserService.userDetails();\r\n\r\n      setUser(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const onSubmitForm = (values) => {\r\n    try {\r\n      ReservationService.reservationUpdate(\r\n        props.reservationId,\r\n        values.client_email,\r\n        values.service_type,\r\n        values.stylist_email,\r\n        values.reservation_date,\r\n        values.reservation_time,\r\n        values.reservation_status\r\n      );\r\n\r\n      ReservationDetails();\r\n      props.onUpdateReservationData();\r\n      NotificationManager.success(\r\n        \"Reservation Success Update\",\r\n        \"Success\",\r\n        \"Close after 15000ms\",\r\n        25000\r\n      );\r\n      handleClose();\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"Reservation Update Failed\",\r\n        \"error\",\r\n        \"Close after 15000ms\",\r\n        25000\r\n      );\r\n    }\r\n  };\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n\r\n      setReservationContext(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n    UserDetails();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.reservationId === \"\") {\r\n    } else {\r\n      ReservationDetailSearchID();\r\n    }\r\n  }, [props.reservationId]);\r\n\r\n  return (\r\n    <Container>\r\n      <FontAwesomeIcon\r\n        icon={faPen}\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={handleOpen}\r\n      />\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Update Reservation\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                  client_email: reservationInfo.client_email,\r\n                  service_type: reservationInfo.service_type,\r\n                  stylist_email: reservationInfo.stylist_email,\r\n                  reservation_date: reservationInfo.reservation_date,\r\n                  reservation_time: reservationInfo.reservation_time,\r\n                  reservation_status: reservationInfo.reservation_status,\r\n                }}\r\n                onSubmit={onSubmitForm}\r\n                // innerRef={formRef}\r\n              >\r\n                {({\r\n                  values,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  /* and other goodies */\r\n                }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Client</label>\r\n                      <select\r\n                        name=\"client_email\"\r\n                        className=\"form-control\"\r\n                        id=\"selectClient\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.client_email}\r\n                      >\r\n                        <option value={\"\"}>Select Client</option>\r\n                        {clients.map((cli, index) => {\r\n                          return (\r\n                            <option key={cli._id} value={cli.email}>\r\n                              {cli.email}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Service Type</label>\r\n                      <select\r\n                        name=\"service_type\"\r\n                        className=\"form-control\"\r\n                        id=\"selectservice\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.service_type}\r\n                      >\r\n                        {service_type.map((service, index) => {\r\n                          return (\r\n                            <option key={service.id} value={service.title}>\r\n                              {service.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Date</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        id=\"date_id\"\r\n                        name=\"reservation_date\"\r\n                        required\r\n                        value={values.reservation_date}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        disabled\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Time</label>\r\n                      <select\r\n                        name=\"reservation_time\"\r\n                        className=\"form-control\"\r\n                        id=\"reservation_time_id\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.reservation_time}\r\n                        disabled\r\n                      >\r\n                        {timeArray.map((time, index) => {\r\n                          return (\r\n                            <option key={time.id} value={time.time}>\r\n                              {time.time}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Stylist</label>\r\n                      <select\r\n                        name=\"stylist_email\"\r\n                        className=\"form-control\"\r\n                        id=\"stylist_id\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.stylist_email}\r\n                        disabled\r\n                      >\r\n                        {users.map((user, index) => {\r\n                          return (\r\n                            <option key={user._id} value={user.email}>\r\n                              {user.email}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Status</label>\r\n                      <select\r\n                        name=\"reservation_status\"\r\n                        className=\"form-control\"\r\n                        id=\"reservation_status_id\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.reservation_status}\r\n                      >\r\n                        {status.map((stat, index) => {\r\n                          return (\r\n                            <option key={stat.id} value={stat.title}>\r\n                              {stat.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.actions}>\r\n                      <button>Update</button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateReservation;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\DeleteReservation.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\ClientService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\UserService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\UpdateClient.js",["545","546"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./UpdateClient.module.css\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport { Formik } from \"formik\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { ClientContext } from \"./../../store/client-context\";\r\n\r\nconst UpdateClient = (props) => {\r\n  const [clients, setClients] = useContext(ClientContext);\r\n  props.onUpdateClientData(false);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const [clientInfo, setClientInfo] = useState({\r\n    email: \"\",\r\n    fname: \"\",\r\n    lname: \"\",\r\n    phone_number: \"\",\r\n  });\r\n\r\n  const onSubmitForm = (values) => {\r\n    try {\r\n      ClientService.clientUpdate(\r\n        props.clientId,\r\n        values.fname,\r\n        values.lname,\r\n        values.phone_number,\r\n        values.email\r\n      );\r\n\r\n      ClientDetails();\r\n      props.onUpdateClientData(true);\r\n      NotificationManager.success(\r\n        \"Client Success Update\",\r\n        \"Success\",\r\n        \"Close after 25000ms\",\r\n        25000\r\n      );\r\n      handleClose();\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"Client Update Failed\",\r\n        \"error\",\r\n        \"Close after 15000ms\",\r\n        25000\r\n      );\r\n    }\r\n  };\r\n\r\n  const ClientDetailSearchID = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetailsID(props.clientId);\r\n\r\n      const info = {};\r\n\r\n      const cliInfo = result;\r\n\r\n      info.email = cliInfo.email;\r\n      info.fname = cliInfo.fname;\r\n      info.lname = cliInfo.lname;\r\n      info.phone_number = cliInfo.phone_number;\r\n\r\n      setClientInfo(info);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.clientId === \"\") {\r\n    } else {\r\n      ClientDetailSearchID();\r\n    }\r\n  }, [props.clientId]);\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <FontAwesomeIcon\r\n        icon={faPen}\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={handleOpen}\r\n      />\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Update Client\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                  email: clientInfo.email,\r\n                  fname: clientInfo.fname,\r\n                  lname: clientInfo.lname,\r\n                  phone_number: clientInfo.phone_number,\r\n                }}\r\n                onSubmit={onSubmitForm}\r\n                // innerRef={formRef}\r\n              >\r\n                {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Email</label>\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.email}\r\n                        disabled\r\n                      />\r\n                    </div>\r\n                    {/* {errors.email && touched.email && errors.email} */}\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"fname\">First Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"fname\"\r\n                        name=\"fname\"\r\n                        required\r\n                        value={values.fname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Last Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"text\"\r\n                        name=\"lname\"\r\n                        required\r\n                        value={values.lname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"phonenumber\">Phone Number</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"phone_number\"\r\n                        name=\"phone_number\"\r\n                        required\r\n                        value={values.phone_number}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className={classes.actions}>\r\n                      <button disabled={isSubmitting} type=\"submit\">\r\n                        Update\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateClient;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\DeleteClient.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\config\\constants.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\store\\client-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\store\\reservation-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Auth\\SignUp.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\reservation-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\client-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Auth\\SignUp.js",["547"],"import { useRef, useContext, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport AuthContext from \"../../store/auth-context\";\nimport classes from \"./AuthForm.module.css\";\nimport { MainUserService } from \"./../../services/AuthService\";\nimport { UserService } from \"./../../services/UserService\";\nimport { NotificationContainer } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Button from \"react-bootstrap/Button\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Container from \"react-bootstrap/Container\";\n\nconst SignUp = () => {\n  const history = useHistory();\n  const params = useParams();\n\n  const formRef = useRef();\n\n  const authCtx = useContext(AuthContext);\n\n  const onSubmitForm = async (values) => {\n    try {\n      const result = await MainUserService.signUpUser(\n        params.token,\n        values.email,\n        values.fname,\n        values.password\n      );\n\n      authCtx.login(result.token, result.usetId);\n      history.replace(\"/\");\n    } catch (err) {\n      return err;\n    }\n  };\n\n  const [formContentShow, setFormContentShow] = useState(false);\n  const [contentShow, setContentShow] = useState(false);\n\n  const findUser = async () => {\n    try {\n      const response = await UserService.findUser(params.email);\n\n      if (response) {\n        setFormContentShow(true);\n      } else {\n        setContentShow(true);\n      }\n    } catch (err) {\n      return err;\n    }\n  };\n\n  useEffect(() => {\n    findUser();\n  }, [params.email]);\n\n  return (\n    <Container>\n      <h1\n        className={classes.auth_error}\n        style={{ textAlign: \"center\" }}\n        hidden={contentShow}\n      >\n        Alredy SignUp\n      </h1>\n      <section className={classes.auth} hidden={formContentShow}>\n        <h1>Sign Up</h1>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            email: params.email,\n            fname: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n          }}\n          validationSchema={Yup.object().shape({\n            fname: Yup.string().required(\"Required\"),\n            password: Yup.string()\n              .required(\"Required\")\n              .min(6, \"password must have at least 6 characters\")\n              .max(25, \"password must have less than 25 characters\"),\n            confirmPassword: Yup.string().when(\"password\", {\n              is: (val) => (val && val.length > 0 ? true : false),\n              then: Yup.string().oneOf(\n                [Yup.ref(\"password\")],\n                \"Both password need to be the same\"\n              ),\n            }),\n          })}\n          onSubmit={onSubmitForm}\n          innerRef={formRef}\n        >\n          {({\n            errors,\n            handleBlur,\n            handleChange,\n            touched,\n            values,\n            handleSubmit,\n          }) => (\n            <form onSubmit={handleSubmit}>\n              <div className={classes.control}>\n                <label htmlFor=\"email\">Your Email</label>\n                <input\n                  name=\"email\"\n                  type=\"email\"\n                  className=\"form-control\"\n                  id=\"emai_id\"\n                  required\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                  disabled\n                />\n              </div>\n              <div className={classes.control}>\n                <label htmlFor=\"text\">Your First Name</label>\n                <input\n                  name=\"fname\"\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"id\"\n                  placeholder=\"First Name\"\n                  required\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.fname}\n                />\n              </div>\n              <div style={{ color: \"red\", fontSize: \"12px\" }}>\n                {touched.fname && errors.fname}\n              </div>\n              <div className={classes.control}>\n                <label htmlFor=\"password\">Your Password</label>\n                <input\n                  name=\"password\"\n                  type=\"password\"\n                  className=\"form-control\"\n                  id=\"id\"\n                  placeholder=\"Password\"\n                  required\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                />\n              </div>\n              <div style={{ color: \"red\", fontSize: \"12px\" }}>\n                {touched.password && errors.password}\n              </div>\n              <div className={classes.control}>\n                <label htmlFor=\"new-password\">Confirm Password</label>\n                <input\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  className=\"form-control\"\n                  id=\"id\"\n                  placeholder=\"Confirm Password\"\n                  required\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.confirmPassword}\n                />\n              </div>\n              <div style={{ color: \"red\", fontSize: \"12px\" }}>\n                {touched.confirmPassword && errors.confirmPassword}\n              </div>\n\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  marginTop: \"5vh\",\n                }}\n              >\n                <Button variant=\"light\" type=\"submit\">\n                  User SignUp\n                </Button>\n              </div>\n            </form>\n          )}\n        </Formik>\n        <NotificationContainer />\n      </section>\n    </Container>\n  );\n};\n\nexport default SignUp;\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Calender\\CalenderDragDrop.js",["548"],"import withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\r\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\r\nimport React, { useEffect, useState, useContext } from \"react\";\r\nimport classes from \"./CalenderContent.module.css\";\r\nimport { Calendar, dateFnsLocalizer } from \"react-big-calendar\";\r\nimport format from \"date-fns/format\";\r\nimport parse from \"date-fns/parse\";\r\nimport startOfWeek from \"date-fns/startOfWeek\";\r\nimport min from \"date-fns/min\";\r\nimport getDay from \"date-fns/getDay\";\r\nimport enUS from \"date-fns/locale/en-US\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport {\r\n  NotificationManager,\r\n  NotificationContainer,\r\n} from \"react-notifications\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport moment from \"moment\";\r\nimport { DATE_FORMAT, CURRENT_DATE } from \"./../../config/constants\";\r\n\r\nconst DnDCalendar = withDragAndDrop(Calendar);\r\n\r\nconst locales = {\r\n  \"en-US\": enUS,\r\n};\r\n\r\nconst localizer = dateFnsLocalizer({\r\n  format,\r\n  parse,\r\n  startOfWeek,\r\n  getDay,\r\n  locales,\r\n  min,\r\n});\r\n\r\nconst CalenderDragDrop = () => {\r\n  const [setReservationContext] = useContext(ReservationContext);\r\n  const [reservationDetails, setReservationDetails] = useState([]);\r\n\r\n  const [reservation, setReservationBoolean] = useState(false);\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n\r\n      setReservationDetails(result);\r\n      setReservationContext(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    ReservationDetails();\r\n    setReservationBoolean(false);\r\n  }, [reservation]);\r\n\r\n  const DnDCalendarFormatData = reservationDetails.map((reservation) => {\r\n    return {\r\n      ...reservation,\r\n      id: reservation._id,\r\n      title:\r\n        reservation.service_type +\r\n        \" : \" +\r\n        reservation.reservation_time +\r\n        \" : \" +\r\n        reservation.stylist_email,\r\n      start: new Date(reservation.reservation_date),\r\n      end: new Date(reservation.reservation_date),\r\n    };\r\n  });\r\n\r\n  const moveEvent = ({\r\n    event,\r\n    start,\r\n    // end,\r\n    isAllDay: droppedOnAllDaySlot = false,\r\n  }) => {\r\n    if (start >= CURRENT_DATE) {\r\n      onSubmitForm(\r\n        event.id,\r\n        moment(start).format(DATE_FORMAT),\r\n        event.reservation_time,\r\n        event.stylist_email,\r\n        event.client_email,\r\n        event.service_type,\r\n        event.reservation_status\r\n      );\r\n    } else {\r\n      NotificationManager.error(\r\n        \"Cannot update to a previous date.\",\r\n        \"error\",\r\n        \"Close after 3000ms\",\r\n        3000\r\n      );\r\n    }\r\n  };\r\n\r\n  const onSubmitForm = async (\r\n    id,\r\n    start,\r\n    reservation_time,\r\n    stylist_email,\r\n    client_email,\r\n    service_type,\r\n    reservation_status\r\n  ) => {\r\n    try {\r\n      await ReservationService.dragReservationUpdate(\r\n        id,\r\n        start,\r\n        reservation_time,\r\n        stylist_email,\r\n        client_email,\r\n        service_type,\r\n        reservation_status\r\n      );\r\n      setReservationBoolean(true);\r\n      ReservationDetails();\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className={classes.starting}>\r\n      <Row>\r\n        <div className={classes.maincontent}>\r\n          <DnDCalendar\r\n            localizer={localizer}\r\n            events={DnDCalendarFormatData}\r\n            draggableAccessor={(event) => true}\r\n            startAccessor=\"start\"\r\n            endAccessor=\"end\"\r\n            style={{ height: \"75vh\" }}\r\n            resizable={false}\r\n            onEventDrop={moveEvent}\r\n          />\r\n        </div>\r\n      </Row>\r\n      <NotificationContainer />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CalenderDragDrop;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\index.js",[],["549","550"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\App.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\store\\reservation-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\store\\client-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\store\\auth-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\ReservationPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\AuthPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\CalenderPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\ClientPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\HomePage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Auth\\SignUp.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Layout\\Layout.js",["551","552","553","554","555","556"],"import { Fragment } from \"react\";\nimport MainNavigation from \"./MainNavigation\";\nimport { ProSidebar, Menu, MenuItem, SubMenu } from \"react-pro-sidebar\";\nimport \"react-pro-sidebar/dist/css/styles.css\";\nimport Sidebar from \"./Sidebar\";\nimport HomePage from \"./../../pages/HomePage\";\n\nconst Layout = (props) => {\n  return (\n    <Fragment>\n      <MainNavigation />\n      <main>{props.children}</main>\n    </Fragment>\n  );\n};\n\nexport default Layout;\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Profile\\UserProfile.js",["557"],"import ProfileForm from \"./ProfileForm\";\nimport classes from \"./UserProfile.module.css\";\n\nconst UserProfile = () => {\n  return (\n    <section>\n      <h4\n        style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"5vh\" }}\n      >\n        Change Your Password\n      </h4>\n      <ProfileForm />\n    </section>\n  );\n};\n\nexport default UserProfile;\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Auth\\AuthForm.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\ClientPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\ReservationPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Layout\\MainNavigation.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Calender\\CalenderDragDrop.js",["558"],"import withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\r\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\r\nimport React, { useEffect, useState, useContext } from \"react\";\r\nimport classes from \"./CalenderContent.module.css\";\r\nimport { Calendar, dateFnsLocalizer } from \"react-big-calendar\";\r\nimport format from \"date-fns/format\";\r\nimport parse from \"date-fns/parse\";\r\nimport startOfWeek from \"date-fns/startOfWeek\";\r\nimport getDay from \"date-fns/getDay\";\r\nimport enUS from \"date-fns/locale/en-US\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport {\r\n  NotificationManager,\r\n  NotificationContainer,\r\n} from \"react-notifications\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport moment from \"moment\";\r\n\r\nconst DnDCalendar = withDragAndDrop(Calendar);\r\n\r\nconst locales = {\r\n  \"en-US\": enUS,\r\n};\r\n\r\nconst localizer = dateFnsLocalizer({\r\n  format,\r\n  parse,\r\n  startOfWeek,\r\n  getDay,\r\n  locales,\r\n});\r\n\r\nconst CalenderDragDrop = () => {\r\n  const customFormat = \"YYYY-MM-DD\";\r\n\r\n  const today = new Date();\r\n\r\n  const [setReservationContext] = useContext(ReservationContext);\r\n  const [reservation_details, setReservation] = useState([]);\r\n\r\n  const [reser, setReservationDetails] = useState(false);\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n\r\n      setReservation(result);\r\n      setReservationContext(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    ReservationDetails();\r\n    setReservationDetails(false);\r\n  }, [reser]);\r\n\r\n  const newArray = reservation_details.map((u) => {\r\n    return {\r\n      ...u,\r\n      id: u._id,\r\n      title:\r\n        u.service_type + \" : \" + u.reservation_time + \" : \" + u.stylist_email,\r\n      start: new Date(u.reservation_date),\r\n      end: new Date(u.reservation_date),\r\n    };\r\n  });\r\n\r\n  const moveEvent = ({\r\n    event,\r\n    start,\r\n    // end,\r\n    isAllDay: droppedOnAllDaySlot = false,\r\n  }) => {\r\n    if (start >= today) {\r\n      onSubmitForm(\r\n        event.id,\r\n        moment(start).format(customFormat),\r\n        event.reservation_time,\r\n        event.stylist_email,\r\n        event.client_email,\r\n        event.service_type,\r\n        event.reservation_status\r\n      );\r\n    } else {\r\n      NotificationManager.error(\r\n        \"The date is too old\",\r\n        \"error\",\r\n        \"Close after 45000ms\",\r\n        10000000000\r\n      );\r\n    }\r\n  };\r\n\r\n  const onSubmitForm = async (\r\n    id,\r\n    start,\r\n    reservation_time,\r\n    stylist_email,\r\n    client_email,\r\n    service_type,\r\n    reservation_status\r\n  ) => {\r\n    try {\r\n      await ReservationService.dragReservationUpdate(\r\n        id,\r\n        start,\r\n        reservation_time,\r\n        stylist_email,\r\n        client_email,\r\n        service_type,\r\n        reservation_status\r\n      );\r\n\r\n      setReservationDetails(true);\r\n      ReservationDetails();\r\n      NotificationManager.success(\r\n        \"Reservation Success Update\",\r\n        \"Success\",\r\n        \"Close after 15000ms\",\r\n        10000000000\r\n      );\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"There is no available date.\",\r\n        \"error\",\r\n        \"Close after 45000ms\",\r\n        10000000000\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className={classes.starting}>\r\n      {console.log(newArray)}\r\n      <Row>\r\n        <div className={classes.maincontent}>\r\n          <DnDCalendar\r\n            localizer={localizer}\r\n            events={newArray}\r\n            draggableAccessor={(event) => true}\r\n            startAccessor=\"start\"\r\n            endAccessor=\"end\"\r\n            style={{ height: \"75vh\" }}\r\n            resizable={false}\r\n            onEventDrop={moveEvent}\r\n          />\r\n        </div>\r\n      </Row>\r\n      <NotificationContainer />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CalenderDragDrop;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\StartingPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Profile\\ProfileForm.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\AuthService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\ClientTable.js",["559"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport DeleteClient from \"./DeleteClient\";\r\nimport UpdateClient from \"./UpdateClient\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { ClientContext } from \"./../../store/client-context\";\r\n\r\nconst ClientTable = () => {\r\n  const [clients, setClients] = useContext(ClientContext);\r\n  const [clientUpdate, setClientUpdate] = useState(false);\r\n  const [clientId, setClientId] = useState(\"\");\r\n  const [clientEmail, setClientEmail] = useState(\"\");\r\n\r\n  const newArrayRow = clients.map((u) => {\r\n    return {\r\n      ...u,\r\n      id: u._id,\r\n    };\r\n  });\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const onClick = () => {\r\n    ClientDetails();\r\n  };\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n  }, [clientUpdate]);\r\n\r\n  const columns = [\r\n    {\r\n      field: \"fname\",\r\n      headerName: \"First Name\",\r\n      flex: 2,\r\n    },\r\n    { field: \"lname\", headerName: \"Last Name\", flex: 2 },\r\n    { field: \"phone_number\", headerName: \"Phone Number\", flex: 2 },\r\n    { field: \"email\", headerName: \"Email\", flex: 2 },\r\n    {\r\n      field: \"Action\",\r\n      headerName: \"Action\",\r\n      flex: 1,\r\n      sortable: false,\r\n      hideable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setClientId(params.row.id);\r\n              setClientEmail(params.row.email);\r\n            }}\r\n            style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n          >\r\n            <UpdateClient\r\n              clientId={clientId}\r\n              onUpdateClientData={setClientUpdate}\r\n              clientEmail={clientEmail}\r\n            />\r\n            <DeleteClient\r\n              clientId={clientId}\r\n              clientEmail={clientEmail}\r\n              onClick={onClick}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <Row style={{ width: \"100%\", marginTop: \"2vh\" }}>\r\n        <DataGrid\r\n          rows={newArrayRow}\r\n          columns={columns}\r\n          autoHeight\r\n          hideFooter\r\n          disableColumnMenu\r\n        />\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ClientTable;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\AddClientModel.js",["560","561"],"import React, { useRef, useState, useEffect, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./AddClient.module.css\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { ClientContext } from \"./../../store/client-context\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst AddClientModel = () => {\r\n  const [clients, setClients] = useContext(ClientContext);\r\n\r\n  const [searchvalue, setSearchValue] = useState(\"\");\r\n\r\n  let replaceSearchValue = searchvalue.replace(/\\s+/g, \"\");\r\n\r\n  const emailInputRef = useRef();\r\n  const fnameInputRef = useRef();\r\n  const lnameInputRef = useRef();\r\n  const phoneNumberInputRef = useRef();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const submitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredEmail = emailInputRef.current.value;\r\n    const enteredFname = fnameInputRef.current.value;\r\n    const enteredLname = lnameInputRef.current.value;\r\n    const enteredPhonenumber = phoneNumberInputRef.current.value;\r\n\r\n    try {\r\n      const response = await ClientService.clientCreate(\r\n        enteredEmail,\r\n        enteredFname,\r\n        enteredLname,\r\n        enteredPhonenumber\r\n      );\r\n\r\n      ClientDetails();\r\n      NotificationManager.success(\r\n        \"Client Success Added\",\r\n        \"Success\",\r\n        \"Close after 100000ms\",\r\n        10000000000\r\n      );\r\n      document.getElementById(\"create_client\").reset();\r\n      handleClose();\r\n      return response;\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"Email alredy registered\",\r\n        \"error\",\r\n        \"Close after 25000ms\",\r\n        10000000000\r\n      );\r\n    }\r\n  };\r\n\r\n  const ClientDetailSearch = async () => {\r\n    try {\r\n      const result = await ClientService.clientSearch(replaceSearchValue);\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (replaceSearchValue.length > 0) {\r\n      ClientDetailSearch();\r\n    }\r\n  }, [replaceSearchValue]);\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"mt-3\">\r\n        <Col sm={4}>\r\n          <InputGroup className=\"mb-3\">\r\n            <Form.Control\r\n              placeholder=\"Search here\"\r\n              aria-label=\"Search here\"\r\n              aria-describedby=\"basic-addon2\"\r\n              onChange={(e) => {\r\n                setSearchValue(e.target.value);\r\n                if (e.target.value === \"\") {\r\n                  ClientDetails();\r\n                }\r\n              }}\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col sm={8} style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n          <button onClick={handleOpen} className={classes.button}>\r\n            Add New\r\n          </button>\r\n\r\n          <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n          >\r\n            <Box className={classes.auth}>\r\n              <Typography\r\n                id=\"modal-modal-title\"\r\n                variant=\"h6\"\r\n                component=\"h2\"\r\n                textAlign=\"center\"\r\n              >\r\n                Add New Client\r\n              </Typography>\r\n              <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                <section>\r\n                  <form onSubmit={submitHandler} id=\"create_client\">\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Email</label>\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        required\r\n                        ref={emailInputRef}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">First Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"fname\"\r\n                        name=\"name\"\r\n                        required\r\n                        ref={fnameInputRef}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Last Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"text\"\r\n                        name=\"lname\"\r\n                        required\r\n                        ref={lnameInputRef}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"phone\">Phone Number</label>\r\n                      <input\r\n                        type=\"phone\"\r\n                        id=\"phone\"\r\n                        name=\"phone\"\r\n                        required\r\n                        ref={phoneNumberInputRef}\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginTop: \"5vh\",\r\n                      }}\r\n                    >\r\n                      <Button type=\"submit\" variant=\"light\">\r\n                        Add New Client\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                </section>\r\n              </Typography>\r\n            </Box>\r\n          </Modal>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddClientModel;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\ReservationTable.js",["562"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport DeleteReservation from \"./DeleteReservation\";\r\nimport UpdateReservation from \"./UpdateReservation\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\n\r\nconst ReservationTable = () => {\r\n  const [reservation, setReservationContext] = useContext(ReservationContext);\r\n  const [reservationId, setReservationId] = useState(\"\");\r\n  const [reservationUpdate, setReservationUpdate] = useState(false);\r\n\r\n  const newArrayRow = reservation.map((u) => {\r\n    return {\r\n      ...u,\r\n      id: u._id,\r\n    };\r\n  });\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n      setReservationContext(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    ReservationDetails();\r\n    setReservationUpdate(false);\r\n  }, [reservationUpdate]);\r\n\r\n  const onClick = () => {\r\n    ReservationDetails();\r\n  };\r\n\r\n  const columns = [\r\n    { field: \"client_email\", headerName: \"Client\", flex: 2 },\r\n    { field: \"service_type\", headerName: \"Service Type\", flex: 2 },\r\n    { field: \"stylist_email\", headerName: \"Stylist\", flex: 2 },\r\n    { field: \"reservation_date\", headerName: \"Date\", flex: 2 },\r\n    { field: \"reservation_time\", headerName: \"Time\", flex: 2 },\r\n    { field: \"reservation_status\", headerName: \"Status\", flex: 2 },\r\n    {\r\n      field: \"Action\",\r\n      headerName: \"Action\",\r\n      flex: 1,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setReservationId(params.row.id);\r\n            }}\r\n            style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n          >\r\n            <UpdateReservation\r\n              reservationId={reservationId}\r\n              onUpdateReservationData={setReservationUpdate}\r\n            />\r\n            <DeleteReservation\r\n              reservationId={reservationId}\r\n              onClick={onClick}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <Row\r\n        style={{\r\n          width: \"100%\",\r\n          marginTop: \"2vh\",\r\n        }}\r\n      >\r\n        <DataGrid\r\n          rows={newArrayRow}\r\n          columns={columns}\r\n          autoHeight\r\n          hideFooter\r\n          disableColumnMenu\r\n        />\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ReservationTable;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\AddReservation.js",["563","564","565"],"import React, { useRef, useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./AddReservation.module.css\";\r\nimport { service_type, timeArray } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport moment from \"moment\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst AddReservationModel = () => {\r\n  const currentDate = new Date();\r\n  currentDate.setDate(currentDate.getDate() - 0);\r\n\r\n  const formatOne = \"YYYY-MM-DD\";\r\n\r\n  const [reservation, setReservationContext] = useContext(ReservationContext);\r\n\r\n  const [clients, setClients] = useState([]);\r\n\r\n  const [onChangeDate, setChangeDate] = useState(\"\");\r\n  const [onChangeTime, setChangeTime] = useState(\"\");\r\n\r\n  const [availablestylist, setAvailableStylist] = useState([]);\r\n\r\n  const [reservationsearchvalue, setReservationSearchValue] = useState(\"\");\r\n  let replaceSearchValue = reservationsearchvalue.replace(/\\s+/g, \"\");\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const clientInputRef = useRef();\r\n  const serviceTypeInputRef = useRef();\r\n  const stylistInputRef = useRef();\r\n  const reservationDateInputRef = useRef();\r\n  const reservationTimeInputRef = useRef();\r\n\r\n  const onSubmitForm = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredClient = clientInputRef.current.value;\r\n    const enteredService = serviceTypeInputRef.current.value;\r\n    const enteredStylist = stylistInputRef.current.value;\r\n    const enteredDate = reservationDateInputRef.current.value;\r\n    const enteredTime = reservationTimeInputRef.current.value;\r\n\r\n    try {\r\n      const response = await ReservationService.reservationCreate(\r\n        enteredClient,\r\n        enteredService,\r\n        enteredStylist,\r\n        enteredDate,\r\n        enteredTime\r\n      );\r\n\r\n      ReservationDetails();\r\n      NotificationManager.success(\r\n        \"Reservation success added\",\r\n        \"Success\",\r\n        \"Close after 15000ms\",\r\n        10000000000\r\n      );\r\n      handleClose();\r\n      return response;\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"Reservation cannot be duplicate\",\r\n        \"error\",\r\n        \"Close after 15000ms\",\r\n        10000000000\r\n      );\r\n    }\r\n  };\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const AvailableStylsitDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationStylistSearch(\r\n        onChangeDate,\r\n        onChangeTime\r\n      );\r\n\r\n      setAvailableStylist(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (onChangeDate && onChangeTime) {\r\n      AvailableStylsitDetails();\r\n    }\r\n  }, [onChangeDate, onChangeTime]);\r\n\r\n  const ReservationDetailSearch = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationSearch(\r\n        replaceSearchValue\r\n      );\r\n\r\n      setReservationContext(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n\r\n      setReservationContext(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (replaceSearchValue.length > 0) {\r\n      ReservationDetailSearch();\r\n    }\r\n  }, [replaceSearchValue]);\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n  }, []);\r\n\r\n  return (\r\n    <Container className=\"mt-3\">\r\n      <Row>\r\n        <Col sm={4}>\r\n          <InputGroup className=\"mb-3\">\r\n            <Form.Control\r\n              placeholder=\"Search here\"\r\n              aria-label=\"Search here\"\r\n              aria-describedby=\"basic-addon2\"\r\n              onChange={(e) => {\r\n                setReservationSearchValue(e.target.value);\r\n\r\n                if (e.target.value === \"\") {\r\n                  ReservationDetails();\r\n                }\r\n              }}\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col sm={8} style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n          <button onClick={handleOpen} className={classes.button}>\r\n            Add New\r\n          </button>\r\n          <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n          >\r\n            <Box className={classes.auth}>\r\n              <Typography\r\n                id=\"modal-modal-title\"\r\n                variant=\"h6\"\r\n                component=\"h2\"\r\n                textAlign=\"center\"\r\n              >\r\n                Add New Reservation\r\n              </Typography>\r\n              <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                <section>\r\n                  <form onSubmit={onSubmitForm}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Client</label>\r\n                      <select name=\"client\" required ref={clientInputRef}>\r\n                        <option value=\"\">Select Client </option>\r\n                        {clients.map((cli, index) => {\r\n                          return (\r\n                            <option key={cli.id} value={cli.email}>\r\n                              {cli.email}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Service Type</label>\r\n                      <select\r\n                        name=\"serviceType\"\r\n                        required\r\n                        ref={serviceTypeInputRef}\r\n                      >\r\n                        <option value=\"\">Select Service Type</option>\r\n                        {service_type.map((service, index) => {\r\n                          return (\r\n                            <option key={service.id} value={service.title}>\r\n                              {service.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"date\">Select Date</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        min={moment(currentDate).format(formatOne)}\r\n                        max=\"2024-09-09\"\r\n                        id=\"password\"\r\n                        required\r\n                        ref={reservationDateInputRef}\r\n                        onChange={(e) => {\r\n                          setChangeDate(e.target.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Select Time</label>\r\n                      <select\r\n                        name=\"time\"\r\n                        required\r\n                        ref={reservationTimeInputRef}\r\n                        onChange={(e) => {\r\n                          setChangeTime(e.target.value);\r\n                        }}\r\n                      >\r\n                        <option value=\"\">Select Time</option>\r\n                        {timeArray.map((time, index) => {\r\n                          return (\r\n                            <option key={time.id} value={time.time}>\r\n                              {time.time}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Stylist</label>\r\n                      <select name=\"stylist\" required ref={stylistInputRef}>\r\n                        <option value=\"\">Select Stylist</option>\r\n                        {availablestylist.map((x) => {\r\n                          return (\r\n                            <option key={x} value={x}>\r\n                              {x}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginTop: \"5vh\",\r\n                      }}\r\n                    >\r\n                      <Button type=\"submit\" variant=\"light\">\r\n                        Add Reservation\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                </section>\r\n              </Typography>\r\n            </Box>\r\n          </Modal>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddReservationModel;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\ReservationService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\PieChart.js",["566"],"import React, { useEffect, useState } from \"react\";\r\nimport { PieChart, Pie, Tooltip } from \"recharts\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nconst PieChartContent = () => {\r\n  const [row, setRow] = useState([]);\r\n\r\n  const newArray = row.map((u) => {\r\n    return {\r\n      ...u,\r\n      name: u.service_type,\r\n      value: 1000,\r\n    };\r\n  });\r\n\r\n  const completeReservation = async () => {\r\n    try {\r\n      const result = await ReservationService.completeReservation();\r\n\r\n      setRow(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    completeReservation();\r\n  }, []);\r\n\r\n  let hairCount = 0;\r\n  let makeUpCount = 0;\r\n  let facialCount = 0;\r\n\r\n  for (let i = 0; i < newArray.length; ++i) {\r\n    if (newArray[i].service_type === \"HairCut\") {\r\n      hairCount++;\r\n    } else if (newArray[i].service_type === \"MakeUp\") {\r\n      makeUpCount++;\r\n    } else if (newArray[i].service_type === \"Facial\") {\r\n      facialCount++;\r\n    }\r\n  }\r\n\r\n  const hair = {\r\n    label: \"HairCut\",\r\n    value: hairCount,\r\n  };\r\n\r\n  const makeup = {\r\n    label: \"MakeUp\",\r\n    value: makeUpCount,\r\n  };\r\n\r\n  const facial = {\r\n    label: \"Facial\",\r\n    value: facialCount,\r\n  };\r\n\r\n  let pieChatDataSet = [];\r\n  let hairObj = {};\r\n  let makeObj = {};\r\n  let facialObj = {};\r\n\r\n  hairObj[\"name\"] = hair.label;\r\n  hairObj[\"value\"] = hair.value;\r\n\r\n  makeObj[\"name\"] = makeup.label;\r\n  makeObj[\"value\"] = makeup.value;\r\n\r\n  facialObj[\"name\"] = facial.label;\r\n  facialObj[\"value\"] = facial.value;\r\n\r\n  pieChatDataSet.push(hairObj);\r\n  pieChatDataSet.push(makeObj);\r\n  pieChatDataSet.push(facialObj);\r\n\r\n  const COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\"];\r\n\r\n  return (\r\n    <Container>\r\n      <Row style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <PieChart width={400} height={400}>\r\n          <Pie\r\n            dataKey=\"value\"\r\n            isAnimationActive={true}\r\n            data={pieChatDataSet}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            outerRadius={140}\r\n            fill=\"#FFBB28\"\r\n            label\r\n          />\r\n\r\n          <Tooltip />\r\n        </PieChart>\r\n      </Row>\r\n      <Row>\r\n        <h6 style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          All reservation made verses completed reservations\r\n        </h6>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PieChartContent;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\BarChartContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\UserService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\InviteNewUser.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\config\\constants.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\DeleteClient.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\ClientService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\UpdateClient.js",["567","568"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./UpdateClient.module.css\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport { Formik } from \"formik\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { ClientContext } from \"./../../store/client-context\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst UpdateClient = (props) => {\r\n  const [clients, setClients] = useContext(ClientContext);\r\n  props.onUpdateClientData(false);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    ClientDetailSearchID();\r\n  };\r\n\r\n  const [clientInfo, setClientInfo] = useState({\r\n    email: \"\",\r\n    fname: \"\",\r\n    lname: \"\",\r\n    phone_number: \"\",\r\n  });\r\n\r\n  const onSubmitForm = async (values) => {\r\n    try {\r\n      const result = await ClientService.clientUpdate(\r\n        props.clientId,\r\n        props.clientEmail,\r\n        values.fname,\r\n        values.lname,\r\n        values.phone_number,\r\n        values.email\r\n      );\r\n\r\n      ClientDetails();\r\n      props.onUpdateClientData(true);\r\n      NotificationManager.success(\r\n        \"Client Success Update\",\r\n        \"Success\",\r\n        \"Close after 25000ms\",\r\n        10000000000\r\n      );\r\n      handleClose();\r\n      return result;\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"Cannot update , Already have an appointment\",\r\n        \"error\",\r\n        \"Close after 15000ms\",\r\n        10000000000\r\n      );\r\n    }\r\n  };\r\n\r\n  const ClientDetailSearchID = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetailsID(props.clientId);\r\n\r\n      const info = {};\r\n\r\n      const cliInfo = result;\r\n\r\n      info.email = cliInfo.email;\r\n      info.fname = cliInfo.fname;\r\n      info.lname = cliInfo.lname;\r\n      info.phone_number = cliInfo.phone_number;\r\n\r\n      setClientInfo(info);\r\n    } catch (err) {\r\n      throw Error(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.clientId === \"\") {\r\n    } else {\r\n      ClientDetailSearchID();\r\n    }\r\n  }, [props.clientId]);\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n      setClients(result);\r\n    } catch (err) {\r\n      throw Error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <FontAwesomeIcon\r\n        icon={faPen}\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={handleOpen}\r\n      />\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Update Client\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                  email: clientInfo.email,\r\n                  fname: clientInfo.fname,\r\n                  lname: clientInfo.lname,\r\n                  phone_number: clientInfo.phone_number,\r\n                }}\r\n                onSubmit={onSubmitForm}\r\n              >\r\n                {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Email</label>\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.email}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"fname\">First Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"fname\"\r\n                        name=\"fname\"\r\n                        required\r\n                        value={values.fname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Last Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"text\"\r\n                        name=\"lname\"\r\n                        required\r\n                        value={values.lname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"phonenumber\">Phone Number</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"phone_number\"\r\n                        name=\"phone_number\"\r\n                        required\r\n                        value={values.phone_number}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginTop: \"5vh\",\r\n                      }}\r\n                    >\r\n                      <Button\r\n                        disabled={isSubmitting}\r\n                        type=\"submit\"\r\n                        variant=\"light\"\r\n                      >\r\n                        Update Client\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateClient;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\UpdateReservation.js",["569","570","571"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./UpdateReservation.module.css\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { service_type, timeArray, status } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { Formik } from \"formik\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { UserService } from \"./../../services/UserService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport moment from \"moment\";\r\n\r\nconst UpdateReservation = (props) => {\r\n  const currentDate = new Date();\r\n  currentDate.setDate(currentDate.getDate() - 0);\r\n  const formatOne = \"YYYY-MM-DD\";\r\n\r\n  const [onChangeDate, setChangeDate] = useState(\"\");\r\n  const [onChangeTime, setChangeTime] = useState(\"\");\r\n  const [availablestylist, setAvailableStylist] = useState([]);\r\n\r\n  const [setReservationContext] = useContext(ReservationContext);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    ReservationDetailSearchID();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    ReservationDetailSearchID();\r\n    ReservationDetails();\r\n  };\r\n\r\n  const [clients, setClients] = useState([]);\r\n\r\n  const [users, setUser] = useState([]);\r\n\r\n  const [reservationInfo, setReservationInfo] = useState({\r\n    client_email: \"\",\r\n    service_type: \"\",\r\n    stylist_email: \"\",\r\n    reservation_date: \"\",\r\n    reservation_time: \"\",\r\n    reservation_status: \"\",\r\n  });\r\n\r\n  const ReservationDetailSearchID = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationIDDetailsID(\r\n        props.reservationId\r\n      );\r\n\r\n      const info = {};\r\n\r\n      const reservationInfo = result;\r\n\r\n      info.client_email = reservationInfo.client_email;\r\n      info.service_type = reservationInfo.service_type;\r\n      info.stylist_email = reservationInfo.stylist_email;\r\n      info.reservation_date = reservationInfo.reservation_date;\r\n      info.reservation_time = reservationInfo.reservation_time;\r\n      info.reservation_status = reservationInfo.reservation_status;\r\n\r\n      setChangeDate(reservationInfo.reservation_date);\r\n      setChangeTime(reservationInfo.reservation_time);\r\n\r\n      setReservationInfo(info);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const UserDetails = async () => {\r\n    try {\r\n      const result = await UserService.userDetails();\r\n\r\n      setUser(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const onSubmitForm = (values) => {\r\n    try {\r\n      ReservationService.reservationUpdate(\r\n        props.reservationId,\r\n        values.client_email,\r\n        values.service_type,\r\n        values.stylist_email,\r\n        onChangeDate,\r\n        onChangeTime,\r\n        values.reservation_status\r\n      );\r\n\r\n      ReservationDetails();\r\n      props.onUpdateReservationData();\r\n      NotificationManager.success(\r\n        \"Reservation Success Update\",\r\n        \"Success\",\r\n        \"Close after 15000ms\",\r\n        10000000000\r\n      );\r\n      handleClose();\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"Reservation Update Failed\",\r\n        \"error\",\r\n        \"Close after 15000ms\",\r\n        10000000000\r\n      );\r\n    }\r\n  };\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n\r\n      setReservationContext(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n    UserDetails();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.reservationId) {\r\n      ReservationDetailSearchID();\r\n    }\r\n  }, [props.reservationId]);\r\n\r\n  const AvailableStylsitDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationStylistSearch(\r\n        onChangeDate,\r\n        onChangeTime\r\n      );\r\n\r\n      setAvailableStylist(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (onChangeDate && onChangeTime) {\r\n      AvailableStylsitDetails();\r\n    }\r\n  }, [onChangeDate, onChangeTime]);\r\n\r\n  return (\r\n    <Container>\r\n      <FontAwesomeIcon\r\n        icon={faPen}\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={handleOpen}\r\n      />\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Update Reservation\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                  client_email: reservationInfo.client_email,\r\n                  service_type: reservationInfo.service_type,\r\n                  stylist_email: reservationInfo.stylist_email,\r\n                  reservation_date: reservationInfo.reservation_date,\r\n                  reservation_time: reservationInfo.reservation_time,\r\n                  reservation_status: reservationInfo.reservation_status,\r\n                }}\r\n                onSubmit={onSubmitForm}\r\n                // innerRef={formRef}\r\n              >\r\n                {({ values, handleChange, handleBlur, handleSubmit }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Client</label>\r\n                      <select\r\n                        name=\"client_email\"\r\n                        className=\"form-control\"\r\n                        id=\"selectClient\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.client_email}\r\n                      >\r\n                        <option value={\"\"}>Select Client</option>\r\n                        {clients.map((cli, index) => {\r\n                          return (\r\n                            <option key={cli._id} value={cli.email}>\r\n                              {cli.email}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Service Type</label>\r\n                      <select\r\n                        name=\"service_type\"\r\n                        className=\"form-control\"\r\n                        id=\"selectservice\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.service_type}\r\n                      >\r\n                        {service_type.map((service, index) => {\r\n                          return (\r\n                            <option key={service.id} value={service.title}>\r\n                              {service.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Date</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        id=\"date_id\"\r\n                        name=\"reservation_date\"\r\n                        min={moment(currentDate).format(formatOne)}\r\n                        required\r\n                        value={onChangeDate}\r\n                        onBlur={handleBlur}\r\n                        onChange={(e) => {\r\n                          setChangeDate(e.target.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Time</label>\r\n                      <select\r\n                        name=\"reservation_time\"\r\n                        className=\"form-control\"\r\n                        id=\"reservation_time_id\"\r\n                        required\r\n                        onBlur={handleBlur}\r\n                        value={onChangeTime}\r\n                        onChange={(e) => {\r\n                          setChangeTime(e.target.value);\r\n                        }}\r\n                      >\r\n                        {timeArray.map((time, index) => {\r\n                          return (\r\n                            <option key={time.id} value={time.time}>\r\n                              {time.time}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Stylist</label>\r\n                      <select\r\n                        name=\"stylist_email\"\r\n                        className=\"form-control\"\r\n                        id=\"stylist_id\"\r\n                        required\r\n                        value={values.stylist_email}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                      >\r\n                        <option value={values.stylist_email}>\r\n                          {values.stylist_email}\r\n                        </option>\r\n                        {availablestylist.map((x) => {\r\n                          return (\r\n                            <option key={x} value={x}>\r\n                              {x}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Status</label>\r\n                      <select\r\n                        name=\"reservation_status\"\r\n                        className=\"form-control\"\r\n                        id=\"reservation_status_id\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.reservation_status}\r\n                      >\r\n                        {status.map((stat, index) => {\r\n                          return (\r\n                            <option key={stat.id} value={stat.title}>\r\n                              {stat.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                      <Button variant=\"light\" type=\"submit\">\r\n                        Update Reservation\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateReservation;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\DeleteReservation.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\data.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Layout\\Sidebar.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\Sidebar.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\AdminPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Admin\\AdminTable.js",["572"],"import React, { useEffect, useContext } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { UserService } from \"./../../services/UserService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { UserContext } from \"./../../store/user-context\";\r\n\r\nconst AdminTable = () => {\r\n  const [useres, setUsers] = useContext(UserContext);\r\n\r\n  const newArrayRow = useres.map((u) => {\r\n    return {\r\n      ...u,\r\n      id: u._id,\r\n    };\r\n  });\r\n\r\n  const userDetails = async () => {\r\n    try {\r\n      const result = await UserService.userDetails();\r\n      setUsers(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    userDetails();\r\n  }, []);\r\n\r\n  const columns = [\r\n    {\r\n      field: \"fname\",\r\n      headerName: \"First Name\",\r\n      flex: 2,\r\n    },\r\n    { field: \"lname\", headerName: \"Last Name\", flex: 2 },\r\n    { field: \"email\", headerName: \"Email\", flex: 2 },\r\n  ];\r\n\r\n  return (\r\n    <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <Row style={{ width: \"100%\", marginTop: \"2vh\" }}>\r\n        <DataGrid\r\n          rows={newArrayRow}\r\n          columns={columns}\r\n          autoHeight\r\n          pageSize={5}\r\n          rowsPerPageOptions={[5]}\r\n        />\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AdminTable;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Admin\\AdminPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Admin\\InviteUser.js",["573","574"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { UserService } from \"./../../services/UserService\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { UserContext } from \"./../../store/user-context\";\r\n\r\nconst InviteUser = () => {\r\n  const [users, setUsers] = useContext(UserContext);\r\n\r\n  const [searchvalue, setSearchValue] = useState(\"\");\r\n\r\n  let replaceSearchValue = searchvalue.replace(/\\s+/g, \"\");\r\n\r\n  const UserDetailSearch = async () => {\r\n    try {\r\n      const result = await UserService.userSearch(replaceSearchValue);\r\n      setUsers(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (replaceSearchValue.length > 0) {\r\n      UserDetailSearch();\r\n    }\r\n  }, [replaceSearchValue]);\r\n\r\n  const UserDetails = async () => {\r\n    try {\r\n      const result = await UserService.userDetails();\r\n      setUsers(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"mt-3\">\r\n        <Col sm={4}>\r\n          <InputGroup className=\"mb-3\">\r\n            <Form.Control\r\n              placeholder=\"Search here\"\r\n              aria-label=\"Search here\"\r\n              aria-describedby=\"basic-addon2\"\r\n              onChange={(e) => {\r\n                setSearchValue(e.target.value);\r\n                if (e.target.value === \"\") {\r\n                  UserDetails();\r\n                }\r\n              }}\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col sm={8} style={{ display: \"flex\", justifyContent: \"end\" }}></Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default InviteUser;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\user-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\MyProfile\\MyProfile.js",["575"],"import { useRef, useContext, useState, useEffect } from \"react\";\r\nimport classes from \"./../Profile/ProfileForm.module.css\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport { UserService } from \"./../../services/UserService\";\r\nimport AuthContext from \"./../../store/auth-context\";\r\nimport * as Yup from \"yup\";\r\nimport { NotificationContainer } from \"react-notifications\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { Formik } from \"formik\";\r\n\r\nconst MyProfileForm = () => {\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  const formRef = useRef();\r\n\r\n  const onSubmitForm = async (values) => {\r\n    try {\r\n      const result = await UserService.userUpdate(\r\n        authCtx.userId,\r\n        values.email,\r\n        values.fname,\r\n        values.lname\r\n      );\r\n      UserDetailSearchID();\r\n      return result;\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const [userInfo, setUserInfo] = useState({\r\n    email: \"\",\r\n    fname: \"\",\r\n    lname: \"\",\r\n  });\r\n\r\n  const UserDetailSearchID = async () => {\r\n    try {\r\n      const result = await UserService.userDetailsID(authCtx.userId);\r\n\r\n      const info = {};\r\n\r\n      const cliInfo = result;\r\n\r\n      info.email = cliInfo.email;\r\n      info.fname = cliInfo.fname;\r\n      info.lname = cliInfo.lname;\r\n\r\n      setUserInfo(info);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    UserDetailSearchID();\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Formik\r\n        enableReinitialize={true}\r\n        initialValues={{\r\n          email: userInfo.email,\r\n          fname: userInfo.fname,\r\n          lname: userInfo.lname,\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n          fname: Yup.string().required(\"Required\"),\r\n          lname: Yup.string().required(\"Required\"),\r\n        })}\r\n        onSubmit={onSubmitForm}\r\n        innerRef={formRef}\r\n      >\r\n        {({\r\n          errors,\r\n          handleBlur,\r\n          handleChange,\r\n          touched,\r\n          values,\r\n          handleSubmit,\r\n        }) => (\r\n          <form\r\n            className={classes.form}\r\n            onSubmit={handleSubmit}\r\n            id=\"updatePassword\"\r\n          >\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"new-password\">Email</label>\r\n              <input\r\n                name=\"email\"\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                id=\"id\"\r\n                placeholder=\"Email\"\r\n                required\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.email}\r\n              />\r\n            </div>\r\n            <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n              {touched.email && errors.email}\r\n            </div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"new-password\">First Name</label>\r\n              <input\r\n                name=\"fname\"\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"id\"\r\n                placeholder=\"Fname\"\r\n                required\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.fname}\r\n              />\r\n            </div>\r\n            <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n              {touched.fname && errors.fname}\r\n            </div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"new-password\">Last Name</label>\r\n              <input\r\n                name=\"lname\"\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"id\"\r\n                placeholder=\"Lname\"\r\n                required\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.lname}\r\n              />\r\n            </div>\r\n            <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n              {touched.lname && errors.lname}\r\n            </div>\r\n            <div\r\n              className={classes.action}\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"5vh\",\r\n              }}\r\n            >\r\n              <button>Update Profile</button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n      <NotificationContainer />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MyProfileForm;\r\n",{"ruleId":"576","replacedBy":"577"},{"ruleId":"578","replacedBy":"579"},{"ruleId":"580","severity":1,"message":"581","line":11,"column":10,"nodeType":"582","messageId":"583","endLine":11,"endColumn":14},{"ruleId":"580","severity":1,"message":"584","line":11,"column":16,"nodeType":"582","messageId":"583","endLine":11,"endColumn":23},{"ruleId":"580","severity":1,"message":"585","line":13,"column":10,"nodeType":"582","messageId":"583","endLine":13,"endColumn":19},{"ruleId":"586","severity":1,"message":"587","line":47,"column":6,"nodeType":"588","endLine":47,"endColumn":20,"suggestions":"589"},{"ruleId":"580","severity":1,"message":"590","line":25,"column":10,"nodeType":"582","messageId":"583","endLine":25,"endColumn":17},{"ruleId":"586","severity":1,"message":"591","line":70,"column":6,"nodeType":"588","endLine":70,"endColumn":26,"suggestions":"592"},{"ruleId":"580","severity":1,"message":"593","line":25,"column":10,"nodeType":"582","messageId":"583","endLine":25,"endColumn":21},{"ruleId":"586","severity":1,"message":"594","line":114,"column":6,"nodeType":"588","endLine":114,"endColumn":34,"suggestions":"595"},{"ruleId":"586","severity":1,"message":"596","line":120,"column":6,"nodeType":"588","endLine":120,"endColumn":26,"suggestions":"597"},{"ruleId":"586","severity":1,"message":"598","line":34,"column":6,"nodeType":"588","endLine":34,"endColumn":25,"suggestions":"599"},{"ruleId":"580","severity":1,"message":"590","line":15,"column":10,"nodeType":"582","messageId":"583","endLine":15,"endColumn":17},{"ruleId":"586","severity":1,"message":"600","line":75,"column":6,"nodeType":"588","endLine":75,"endColumn":22,"suggestions":"601"},{"ruleId":"586","severity":1,"message":"602","line":138,"column":6,"nodeType":"588","endLine":138,"endColumn":27,"suggestions":"603"},{"ruleId":"586","severity":1,"message":"594","line":144,"column":6,"nodeType":"588","endLine":144,"endColumn":34,"suggestions":"604"},{"ruleId":"576","replacedBy":"605"},{"ruleId":"578","replacedBy":"606"},{"ruleId":"580","severity":1,"message":"607","line":14,"column":19,"nodeType":"582","messageId":"583","endLine":14,"endColumn":29},{"ruleId":"586","severity":1,"message":"598","line":36,"column":6,"nodeType":"588","endLine":36,"endColumn":25,"suggestions":"608"},{"ruleId":"580","severity":1,"message":"593","line":26,"column":10,"nodeType":"582","messageId":"583","endLine":26,"endColumn":21},{"ruleId":"580","severity":1,"message":"609","line":33,"column":10,"nodeType":"582","messageId":"583","endLine":33,"endColumn":15},{"ruleId":"580","severity":1,"message":"610","line":58,"column":13,"nodeType":"582","messageId":"583","endLine":58,"endColumn":21},{"ruleId":"586","severity":1,"message":"594","line":115,"column":6,"nodeType":"588","endLine":115,"endColumn":34,"suggestions":"611"},{"ruleId":"586","severity":1,"message":"596","line":140,"column":6,"nodeType":"588","endLine":140,"endColumn":30,"suggestions":"612"},{"ruleId":"586","severity":1,"message":"587","line":37,"column":6,"nodeType":"588","endLine":37,"endColumn":20,"suggestions":"613"},{"ruleId":"580","severity":1,"message":"590","line":17,"column":10,"nodeType":"582","messageId":"583","endLine":17,"endColumn":17},{"ruleId":"580","severity":1,"message":"610","line":39,"column":13,"nodeType":"582","messageId":"583","endLine":39,"endColumn":21},{"ruleId":"586","severity":1,"message":"591","line":77,"column":6,"nodeType":"588","endLine":77,"endColumn":19,"suggestions":"614"},{"ruleId":"580","severity":1,"message":"610","line":23,"column":13,"nodeType":"582","messageId":"583","endLine":23,"endColumn":21},{"ruleId":"615","severity":1,"message":"616","line":35,"column":34,"nodeType":"617","messageId":"618","endLine":35,"endColumn":36},{"ruleId":"615","severity":1,"message":"616","line":37,"column":41,"nodeType":"617","messageId":"618","endLine":37,"endColumn":43},{"ruleId":"615","severity":1,"message":"616","line":39,"column":41,"nodeType":"617","messageId":"618","endLine":39,"endColumn":43},{"ruleId":"580","severity":1,"message":"593","line":19,"column":10,"nodeType":"582","messageId":"583","endLine":19,"endColumn":21},{"ruleId":"586","severity":1,"message":"602","line":123,"column":6,"nodeType":"588","endLine":123,"endColumn":27,"suggestions":"619"},{"ruleId":"580","severity":1,"message":"590","line":16,"column":10,"nodeType":"582","messageId":"583","endLine":16,"endColumn":17},{"ruleId":"586","severity":1,"message":"600","line":81,"column":6,"nodeType":"588","endLine":81,"endColumn":22,"suggestions":"620"},{"ruleId":"586","severity":1,"message":"621","line":57,"column":6,"nodeType":"588","endLine":57,"endColumn":20,"suggestions":"622"},{"ruleId":"586","severity":1,"message":"598","line":59,"column":6,"nodeType":"588","endLine":59,"endColumn":19,"suggestions":"623"},{"ruleId":"576","replacedBy":"624"},{"ruleId":"578","replacedBy":"625"},{"ruleId":"580","severity":1,"message":"626","line":3,"column":10,"nodeType":"582","messageId":"583","endLine":3,"endColumn":20},{"ruleId":"580","severity":1,"message":"627","line":3,"column":22,"nodeType":"582","messageId":"583","endLine":3,"endColumn":26},{"ruleId":"580","severity":1,"message":"628","line":3,"column":28,"nodeType":"582","messageId":"583","endLine":3,"endColumn":36},{"ruleId":"580","severity":1,"message":"629","line":3,"column":38,"nodeType":"582","messageId":"583","endLine":3,"endColumn":45},{"ruleId":"580","severity":1,"message":"630","line":5,"column":8,"nodeType":"582","messageId":"583","endLine":5,"endColumn":15},{"ruleId":"580","severity":1,"message":"631","line":6,"column":8,"nodeType":"582","messageId":"583","endLine":6,"endColumn":16},{"ruleId":"580","severity":1,"message":"632","line":2,"column":8,"nodeType":"582","messageId":"583","endLine":2,"endColumn":15},{"ruleId":"586","severity":1,"message":"598","line":58,"column":6,"nodeType":"588","endLine":58,"endColumn":13,"suggestions":"633"},{"ruleId":"586","severity":1,"message":"587","line":36,"column":6,"nodeType":"588","endLine":36,"endColumn":20,"suggestions":"634"},{"ruleId":"580","severity":1,"message":"590","line":18,"column":10,"nodeType":"582","messageId":"583","endLine":18,"endColumn":17},{"ruleId":"586","severity":1,"message":"591","line":80,"column":6,"nodeType":"588","endLine":80,"endColumn":26,"suggestions":"635"},{"ruleId":"586","severity":1,"message":"598","line":33,"column":6,"nodeType":"588","endLine":33,"endColumn":25,"suggestions":"636"},{"ruleId":"580","severity":1,"message":"593","line":26,"column":10,"nodeType":"582","messageId":"583","endLine":26,"endColumn":21},{"ruleId":"586","severity":1,"message":"594","line":108,"column":6,"nodeType":"588","endLine":108,"endColumn":34,"suggestions":"637"},{"ruleId":"586","severity":1,"message":"596","line":132,"column":6,"nodeType":"588","endLine":132,"endColumn":26,"suggestions":"638"},{"ruleId":"580","severity":1,"message":"639","line":77,"column":9,"nodeType":"582","messageId":"583","endLine":77,"endColumn":15},{"ruleId":"580","severity":1,"message":"590","line":17,"column":10,"nodeType":"582","messageId":"583","endLine":17,"endColumn":17},{"ruleId":"586","severity":1,"message":"600","line":90,"column":6,"nodeType":"588","endLine":90,"endColumn":22,"suggestions":"640"},{"ruleId":"580","severity":1,"message":"609","line":45,"column":10,"nodeType":"582","messageId":"583","endLine":45,"endColumn":15},{"ruleId":"586","severity":1,"message":"602","line":144,"column":6,"nodeType":"588","endLine":144,"endColumn":27,"suggestions":"641"},{"ruleId":"586","severity":1,"message":"594","line":161,"column":6,"nodeType":"588","endLine":161,"endColumn":34,"suggestions":"642"},{"ruleId":"586","severity":1,"message":"643","line":29,"column":6,"nodeType":"588","endLine":29,"endColumn":8,"suggestions":"644"},{"ruleId":"580","severity":1,"message":"609","line":12,"column":10,"nodeType":"582","messageId":"583","endLine":12,"endColumn":15},{"ruleId":"586","severity":1,"message":"645","line":31,"column":6,"nodeType":"588","endLine":31,"endColumn":26,"suggestions":"646"},{"ruleId":"586","severity":1,"message":"647","line":57,"column":6,"nodeType":"588","endLine":57,"endColumn":8,"suggestions":"648"},"no-native-reassign",["649"],"no-negated-in-lhs",["650"],"no-unused-vars","'page' is assigned a value but never used.","Identifier","unusedVar","'setPage' is assigned a value but never used.","'sortModel' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ClientDetails'. Either include it or remove the dependency array.","ArrayExpression",["651"],"'clients' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ClientDetailSearch'. Either include it or remove the dependency array.",["652"],"'reservation' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'AvailableStylsitDetails'. Either include it or remove the dependency array.",["653"],"React Hook useEffect has a missing dependency: 'ReservationDetailSearch'. Either include it or remove the dependency array.",["654"],"React Hook useEffect has a missing dependency: 'ReservationDetails'. Either include it or remove the dependency array.",["655"],"React Hook useEffect has a missing dependency: 'ClientDetailSearchID'. Either include it or remove the dependency array.",["656"],"React Hook useEffect has a missing dependency: 'ReservationDetailSearchID'. Either include it or remove the dependency array.",["657"],["658"],["649"],["650"],"'setIsLogin' is assigned a value but never used.",["659"],"'users' is assigned a value but never used.","'response' is assigned a value but never used.",["660"],["661"],["662"],["663"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["664"],["665"],"React Hook useEffect has a missing dependency: 'findUser'. Either include it or remove the dependency array.",["666"],["667"],["649"],["650"],"'ProSidebar' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'SubMenu' is defined but never used.","'Sidebar' is defined but never used.","'HomePage' is defined but never used.","'classes' is defined but never used.",["668"],["669"],["670"],["671"],["672"],["673"],"'COLORS' is assigned a value but never used.",["674"],["675"],["676"],"React Hook useEffect has a missing dependency: 'userDetails'. Either include it or remove the dependency array.",["677"],"React Hook useEffect has a missing dependency: 'UserDetailSearch'. Either include it or remove the dependency array.",["678"],"React Hook useEffect has a missing dependency: 'UserDetailSearchID'. Either include it or remove the dependency array.",["679"],"no-global-assign","no-unsafe-negation",{"desc":"680","fix":"681"},{"desc":"682","fix":"683"},{"desc":"684","fix":"685"},{"desc":"686","fix":"687"},{"desc":"688","fix":"689"},{"desc":"690","fix":"691"},{"desc":"692","fix":"693"},{"desc":"684","fix":"694"},{"desc":"688","fix":"695"},{"desc":"684","fix":"696"},{"desc":"697","fix":"698"},{"desc":"680","fix":"699"},{"desc":"700","fix":"701"},{"desc":"692","fix":"702"},{"desc":"690","fix":"703"},{"desc":"704","fix":"705"},{"desc":"706","fix":"707"},{"desc":"708","fix":"709"},{"desc":"680","fix":"710"},{"desc":"682","fix":"711"},{"desc":"688","fix":"712"},{"desc":"684","fix":"713"},{"desc":"686","fix":"714"},{"desc":"690","fix":"715"},{"desc":"692","fix":"716"},{"desc":"684","fix":"717"},{"desc":"718","fix":"719"},{"desc":"720","fix":"721"},{"desc":"722","fix":"723"},"Update the dependencies array to be: [ClientDetails, clientUpdate]",{"range":"724","text":"725"},"Update the dependencies array to be: [ClientDetailSearch, replaceSearchValue]",{"range":"726","text":"727"},"Update the dependencies array to be: [AvailableStylsitDetails, onChangeDate, onChangeTime]",{"range":"728","text":"729"},"Update the dependencies array to be: [ReservationDetailSearch, replaceSearchValue]",{"range":"730","text":"731"},"Update the dependencies array to be: [ReservationDetails, reservationUpdate]",{"range":"732","text":"733"},"Update the dependencies array to be: [ClientDetailSearchID, props.clientId]",{"range":"734","text":"735"},"Update the dependencies array to be: [ReservationDetailSearchID, props.reservationId]",{"range":"736","text":"737"},{"range":"738","text":"729"},{"range":"739","text":"733"},{"range":"740","text":"729"},"Update the dependencies array to be: [ReservationDetailSearch, reservationsearchvalue]",{"range":"741","text":"742"},{"range":"743","text":"725"},"Update the dependencies array to be: [ClientDetailSearch, searchvalue]",{"range":"744","text":"745"},{"range":"746","text":"737"},{"range":"747","text":"735"},"Update the dependencies array to be: [findUser, params.email]",{"range":"748","text":"749"},"Update the dependencies array to be: [ReservationDetails, reservation]",{"range":"750","text":"751"},"Update the dependencies array to be: [ReservationDetails, reser]",{"range":"752","text":"753"},{"range":"754","text":"725"},{"range":"755","text":"727"},{"range":"756","text":"733"},{"range":"757","text":"729"},{"range":"758","text":"731"},{"range":"759","text":"735"},{"range":"760","text":"737"},{"range":"761","text":"729"},"Update the dependencies array to be: [userDetails]",{"range":"762","text":"763"},"Update the dependencies array to be: [UserDetailSearch, replaceSearchValue]",{"range":"764","text":"765"},"Update the dependencies array to be: [UserDetailSearchID]",{"range":"766","text":"767"},[1270,1284],"[ClientDetails, clientUpdate]",[2124,2144],"[ClientDetailSearch, replaceSearchValue]",[3666,3694],"[AvailableStylsitDetails, onChangeDate, onChangeTime]",[3809,3829],"[ReservationDetailSearch, replaceSearchValue]",[1159,1178],"[ReservationDetails, reservationUpdate]",[2033,2049],"[ClientDetailSearchID, props.clientId]",[3967,3988],"[ReservationDetailSearchID, props.reservationId]",[4102,4130],[1254,1273],[3535,3563],[4128,4152],"[ReservationDetailSearch, reservationsearchvalue]",[1052,1066],[2371,2384],"[ClientDetailSearch, searchvalue]",[3647,3668],[2254,2270],[1542,1556],"[findUser, params.email]",[1847,1860],"[ReservationDetails, reservation]",[1762,1769],"[ReservationDetails, reser]",[1053,1067],[2517,2537],[1148,1167],[3465,3493],[4036,4056],[2487,2503],[4218,4239],[4609,4637],[734,736],"[userDetails]",[979,999],"[UserDetailSearch, replaceSearchValue]",[1429,1431],"[UserDetailSearchID]"]