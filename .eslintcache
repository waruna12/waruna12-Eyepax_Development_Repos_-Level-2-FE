[{"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\index.js":"1","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\App.js":"2","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\store\\auth-context.js":"3","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\ReservationPage.js":"4","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\AuthPage.js":"5","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\ClientPage.js":"6","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\HomePage.js":"7","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\CalenderPage.js":"8","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Layout\\Layout.js":"9","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Profile\\UserProfile.js":"10","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Layout\\MainNavigation.js":"11","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Profile\\ProfileForm.js":"12","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\ReservationPageContent.js":"13","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\ClientPageContent.js":"14","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Auth\\AuthForm.js":"15","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\StartingPageContent.js":"16","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\ReservationTable.js":"17","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\AddReservation.js":"18","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\ClientTable.js":"19","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\data.js":"20","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\AddClientModel.js":"21","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\InviteNewUser.js":"22","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\PieChart.js":"23","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\BarChartContent.js":"24","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\AuthService.js":"25","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\ReservationService.js":"26","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\UpdateReservation.js":"27","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\DeleteReservation.js":"28","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\ClientService.js":"29","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\UserService.js":"30","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\UpdateClient.js":"31","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\DeleteClient.js":"32","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\config\\constants.js":"33","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\store\\client-context.js":"34","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\store\\reservation-context.js":"35","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Auth\\SignUp.js":"36","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\index.js":"37","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\App.js":"38","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\store\\reservation-context.js":"39","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\store\\client-context.js":"40","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\store\\auth-context.js":"41","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\ReservationPage.js":"42","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\AuthPage.js":"43","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\CalenderPage.js":"44","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\ClientPage.js":"45","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\HomePage.js":"46","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Auth\\SignUp.js":"47","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Layout\\Layout.js":"48","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Profile\\UserProfile.js":"49","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Auth\\AuthForm.js":"50","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\ClientPageContent.js":"51","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\ReservationPageContent.js":"52","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Layout\\MainNavigation.js":"53","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Calender\\CalenderDragDrop.js":"54","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\StartingPageContent.js":"55","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Profile\\ProfileForm.js":"56","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\AuthService.js":"57","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\ClientTable.js":"58","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\AddClientModel.js":"59","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\ReservationTable.js":"60","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\AddReservation.js":"61","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\ReservationService.js":"62","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\PieChart.js":"63","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\BarChartContent.js":"64","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\UserService.js":"65","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\InviteNewUser.js":"66","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\config\\constants.js":"67","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\DeleteClient.js":"68","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\ClientService.js":"69","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\UpdateClient.js":"70","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\UpdateReservation.js":"71","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\DeleteReservation.js":"72","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\data.js":"73","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Layout\\Sidebar.js":"74","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\store\\user-context.js":"75","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\AdminPage.js":"76","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\MyProfile\\MyProfile.js":"77","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Layout\\Sidebar.js":"78","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Calender\\CalenderDragDrop.js":"79","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Admin\\AdminPageContent.js":"80","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Admin\\AdminTable.js":"81","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Admin\\InviteUser.js":"82","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\index.js":"83","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\App.js":"84","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\store\\auth-context.js":"85","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\store\\user-context.js":"86","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\store\\client-context.js":"87","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\store\\reservation-context.js":"88","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\pages\\HomePage.js":"89","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\pages\\AuthPage.js":"90","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\pages\\ReservationPage.js":"91","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\pages\\ClientPage.js":"92","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\pages\\CalenderPage.js":"93","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\pages\\AdminPage.js":"94","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Layout\\Sidebar.js":"95","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Layout\\Layout.js":"96","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Profile\\UserProfile.js":"97","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\MyProfile\\MyProfile.js":"98","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Auth\\SignUp.js":"99","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Auth\\AuthForm.js":"100","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Layout\\MainNavigation.js":"101","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Profile\\ProfileForm.js":"102","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationPageContent.js":"103","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientPageContent.js":"104","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\StartingPage\\StartingPageContent.js":"105","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Admin\\AdminPageContent.js":"106","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Calender\\CalenderDragDrop.js":"107","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\services\\UserService.js":"108","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\services\\AuthService.js":"109","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\StartingPage\\InviteNewUser.js":"110","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\ClientPage\\AddClientModel.js":"111","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationTable.js":"112","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientTable.js":"113","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\StartingPage\\BarChartContent.js":"114","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Reservation\\AddReservation.js":"115","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\StartingPage\\PieChart.js":"116","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Admin\\AdminTable.js":"117","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Admin\\InviteUser.js":"118","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\services\\ReservationService.js":"119","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\config\\constants.js":"120","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Reservation\\DeleteReservation.js":"121","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\services\\ClientService.js":"122","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Reservation\\UpdateReservation.js":"123","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\ClientPage\\UpdateClient.js":"124","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\ClientPage\\DeleteClient.js":"125","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\data.js":"126","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\index.js":"127","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\App.js":"128","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\auth-context.js":"129","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\user-context.js":"130","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\client-context.js":"131","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\reservation-context.js":"132","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\ClientPage.js":"133","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\CalenderPage.js":"134","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\AuthPage.js":"135","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\AdminPage.js":"136","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\ReservationPage.js":"137","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\HomePage.js":"138","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\MyProfile\\MyProfile.js":"139","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\Sidebar.js":"140","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Profile\\UserProfile.js":"141","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\Layout.js":"142","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Auth\\SignUp.js":"143","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Auth\\AuthForm.js":"144","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientPageContent.js":"145","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Profile\\ProfileForm.js":"146","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\MainNavigation.js":"147","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Admin\\AdminPageContent.js":"148","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationPageContent.js":"149","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Calender\\CalenderDragDrop.js":"150","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\StartingPageContent.js":"151","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\UserService.js":"152","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\AuthService.js":"153","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\AddClientModel.js":"154","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientTable.js":"155","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\InviteNewUser.js":"156","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Admin\\AdminTable.js":"157","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Admin\\InviteUser.js":"158","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\ReservationService.js":"159","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationTable.js":"160","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\AddReservation.js":"161","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\BarChartContent.js":"162","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\PieChart.js":"163","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\config\\constants.js":"164","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\ClientService.js":"165","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\DeleteClient.js":"166","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\UpdateClient.js":"167","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\DeleteReservation.js":"168","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\data.js":"169","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\UpdateReservation.js":"170"},{"size":749,"mtime":1666069047322,"results":"171","hashOfConfig":"172"},{"size":2996,"mtime":1666326239453,"results":"173","hashOfConfig":"172"},{"size":1254,"mtime":1663640920777,"results":"174","hashOfConfig":"172"},{"size":200,"mtime":1658834079878,"results":"175","hashOfConfig":"172"},{"size":130,"mtime":1648643396000,"results":"176","hashOfConfig":"172"},{"size":174,"mtime":1658806940240,"results":"177","hashOfConfig":"172"},{"size":171,"mtime":1664280668243,"results":"178","hashOfConfig":"172"},{"size":173,"mtime":1663641845254,"results":"179","hashOfConfig":"172"},{"size":245,"mtime":1664435954088,"results":"180","hashOfConfig":"172"},{"size":308,"mtime":1664436029047,"results":"181","hashOfConfig":"172"},{"size":1494,"mtime":1664510104545,"results":"182","hashOfConfig":"172"},{"size":3567,"mtime":1665464012841,"results":"183","hashOfConfig":"172"},{"size":655,"mtime":1666326291928,"results":"184","hashOfConfig":"172"},{"size":638,"mtime":1666326044234,"results":"185","hashOfConfig":"172"},{"size":2197,"mtime":1666327016586,"results":"186","hashOfConfig":"172"},{"size":898,"mtime":1666326629702,"results":"187","hashOfConfig":"172"},{"size":2791,"mtime":1665309686723,"results":"188","hashOfConfig":"172"},{"size":9876,"mtime":1666321367932,"results":"189","hashOfConfig":"172"},{"size":4286,"mtime":1666072257971,"results":"190","hashOfConfig":"172"},{"size":825,"mtime":1666321540517,"results":"191","hashOfConfig":"172"},{"size":8559,"mtime":1666329272223,"results":"192","hashOfConfig":"172"},{"size":2797,"mtime":1666326531198,"results":"193","hashOfConfig":"172"},{"size":3341,"mtime":1666174089157,"results":"194","hashOfConfig":"172"},{"size":2709,"mtime":1666329934545,"results":"195","hashOfConfig":"172"},{"size":1779,"mtime":1665713763388,"results":"196","hashOfConfig":"172"},{"size":7499,"mtime":1665665475040,"results":"197","hashOfConfig":"172"},{"size":11714,"mtime":1666321435465,"results":"198","hashOfConfig":"172"},{"size":2375,"mtime":1665400265147,"results":"199","hashOfConfig":"172"},{"size":5019,"mtime":1666329281751,"results":"200","hashOfConfig":"172"},{"size":4731,"mtime":1665721342433,"results":"201","hashOfConfig":"172"},{"size":6287,"mtime":1666253820177,"results":"202","hashOfConfig":"172"},{"size":2351,"mtime":1665295015268,"results":"203","hashOfConfig":"172"},{"size":367,"mtime":1666078534749,"results":"204","hashOfConfig":"172"},{"size":989,"mtime":1666073600087,"results":"205","hashOfConfig":"172"},{"size":425,"mtime":1662831720456,"results":"206","hashOfConfig":"172"},{"size":5702,"mtime":1666329008738,"results":"207","hashOfConfig":"172"},{"size":622,"mtime":1663669529362,"results":"208","hashOfConfig":"209"},{"size":2436,"mtime":1664329626291,"results":"210","hashOfConfig":"209"},{"size":425,"mtime":1662831720456,"results":"211","hashOfConfig":"209"},{"size":375,"mtime":1662831708487,"results":"212","hashOfConfig":"209"},{"size":1254,"mtime":1663640920777,"results":"213","hashOfConfig":"209"},{"size":200,"mtime":1658834079878,"results":"214","hashOfConfig":"209"},{"size":130,"mtime":1648643396000,"results":"215","hashOfConfig":"209"},{"size":173,"mtime":1663641845254,"results":"216","hashOfConfig":"209"},{"size":174,"mtime":1658806940240,"results":"217","hashOfConfig":"209"},{"size":171,"mtime":1664280668243,"results":"218","hashOfConfig":"209"},{"size":2658,"mtime":1664433555591,"results":"219","hashOfConfig":"209"},{"size":446,"mtime":1664280384200,"results":"220","hashOfConfig":"209"},{"size":356,"mtime":1664343690610,"results":"221","hashOfConfig":"209"},{"size":2491,"mtime":1664356540875,"results":"222","hashOfConfig":"209"},{"size":733,"mtime":1664284325533,"results":"223","hashOfConfig":"209"},{"size":750,"mtime":1663668622856,"results":"224","hashOfConfig":"209"},{"size":1494,"mtime":1664433902373,"results":"225","hashOfConfig":"209"},{"size":4056,"mtime":1664346643696,"results":"226","hashOfConfig":"209"},{"size":992,"mtime":1664351789090,"results":"227","hashOfConfig":"209"},{"size":3913,"mtime":1664343788294,"results":"228","hashOfConfig":"209"},{"size":1492,"mtime":1664182679393,"results":"229","hashOfConfig":"209"},{"size":2530,"mtime":1664433648486,"results":"230","hashOfConfig":"209"},{"size":6280,"mtime":1664352169500,"results":"231","hashOfConfig":"209"},{"size":2762,"mtime":1664433984910,"results":"232","hashOfConfig":"209"},{"size":9592,"mtime":1664364993430,"results":"233","hashOfConfig":"209"},{"size":6148,"mtime":1664183780076,"results":"234","hashOfConfig":"209"},{"size":2467,"mtime":1664342360305,"results":"235","hashOfConfig":"209"},{"size":1796,"mtime":1664342489883,"results":"236","hashOfConfig":"209"},{"size":1563,"mtime":1664183804592,"results":"237","hashOfConfig":"209"},{"size":3189,"mtime":1664351720398,"results":"238","hashOfConfig":"209"},{"size":56,"mtime":1658906277807,"results":"239","hashOfConfig":"209"},{"size":2773,"mtime":1664352372906,"results":"240","hashOfConfig":"209"},{"size":3518,"mtime":1664183587306,"results":"241","hashOfConfig":"209"},{"size":6774,"mtime":1664352540709,"results":"242","hashOfConfig":"209"},{"size":11804,"mtime":1664434063781,"results":"243","hashOfConfig":"209"},{"size":2782,"mtime":1664356357327,"results":"244","hashOfConfig":"209"},{"size":2145,"mtime":1663048415028,"results":"245","hashOfConfig":"209"},{"size":1279,"mtime":1664364256867,"results":"246","hashOfConfig":"209"},{"size":359,"mtime":1664968383267,"results":"247","hashOfConfig":"172"},{"size":164,"mtime":1664951795373,"results":"248","hashOfConfig":"172"},{"size":4368,"mtime":1666328192811,"results":"249","hashOfConfig":"172"},{"size":1484,"mtime":1664963766329,"results":"250","hashOfConfig":"172"},{"size":3968,"mtime":1666328102179,"results":"251","hashOfConfig":"172"},{"size":620,"mtime":1664954824479,"results":"252","hashOfConfig":"172"},{"size":1356,"mtime":1665405598035,"results":"253","hashOfConfig":"172"},{"size":1873,"mtime":1665402589646,"results":"254","hashOfConfig":"172"},{"size":749,"mtime":1666069047322,"results":"255","hashOfConfig":"256"},{"size":2851,"mtime":1664969855027,"results":"257","hashOfConfig":"256"},{"size":1254,"mtime":1663640920777,"results":"258","hashOfConfig":"256"},{"size":359,"mtime":1664968383267,"results":"259","hashOfConfig":"256"},{"size":989,"mtime":1666073600087,"results":"260","hashOfConfig":"256"},{"size":425,"mtime":1662831720456,"results":"261","hashOfConfig":"256"},{"size":171,"mtime":1664280668243,"results":"262","hashOfConfig":"256"},{"size":130,"mtime":1648643396000,"results":"263","hashOfConfig":"256"},{"size":200,"mtime":1658834079878,"results":"264","hashOfConfig":"256"},{"size":174,"mtime":1658806940240,"results":"265","hashOfConfig":"256"},{"size":173,"mtime":1663641845254,"results":"266","hashOfConfig":"256"},{"size":164,"mtime":1664951795373,"results":"267","hashOfConfig":"256"},{"size":1484,"mtime":1664963766329,"results":"268","hashOfConfig":"256"},{"size":245,"mtime":1664435954088,"results":"269","hashOfConfig":"256"},{"size":308,"mtime":1664436029047,"results":"270","hashOfConfig":"256"},{"size":4516,"mtime":1665465151122,"results":"271","hashOfConfig":"256"},{"size":5849,"mtime":1665656614273,"results":"272","hashOfConfig":"256"},{"size":2342,"mtime":1665656705086,"results":"273","hashOfConfig":"256"},{"size":1494,"mtime":1664510104545,"results":"274","hashOfConfig":"256"},{"size":3567,"mtime":1665464012841,"results":"275","hashOfConfig":"256"},{"size":750,"mtime":1663668622856,"results":"276","hashOfConfig":"256"},{"size":733,"mtime":1665125577203,"results":"277","hashOfConfig":"256"},{"size":992,"mtime":1664351789090,"results":"278","hashOfConfig":"256"},{"size":620,"mtime":1664954824479,"results":"279","hashOfConfig":"256"},{"size":3991,"mtime":1666060395218,"results":"280","hashOfConfig":"256"},{"size":4731,"mtime":1665721342433,"results":"281","hashOfConfig":"256"},{"size":1779,"mtime":1665713763388,"results":"282","hashOfConfig":"256"},{"size":2892,"mtime":1665721279774,"results":"283","hashOfConfig":"256"},{"size":8804,"mtime":1666072979366,"results":"284","hashOfConfig":"256"},{"size":2791,"mtime":1665309686723,"results":"285","hashOfConfig":"256"},{"size":4286,"mtime":1666072257971,"results":"286","hashOfConfig":"256"},{"size":1983,"mtime":1666147238684,"results":"287","hashOfConfig":"256"},{"size":11131,"mtime":1666073200422,"results":"288","hashOfConfig":"256"},{"size":2865,"mtime":1666153808749,"results":"289","hashOfConfig":"256"},{"size":1356,"mtime":1665405598035,"results":"290","hashOfConfig":"256"},{"size":1873,"mtime":1665402589646,"results":"291","hashOfConfig":"256"},{"size":7499,"mtime":1665665475040,"results":"292","hashOfConfig":"256"},{"size":367,"mtime":1666078534749,"results":"293","hashOfConfig":"256"},{"size":2375,"mtime":1665400265147,"results":"294","hashOfConfig":"256"},{"size":5128,"mtime":1666073795461,"results":"295","hashOfConfig":"256"},{"size":11768,"mtime":1666073252405,"results":"296","hashOfConfig":"256"},{"size":6339,"mtime":1666073120764,"results":"297","hashOfConfig":"256"},{"size":2351,"mtime":1665295015268,"results":"298","hashOfConfig":"256"},{"size":2145,"mtime":1666078517244,"results":"299","hashOfConfig":"256"},{"size":749,"mtime":1666069047322,"results":"300","hashOfConfig":"301"},{"size":2996,"mtime":1666326239453,"results":"302","hashOfConfig":"301"},{"size":1254,"mtime":1663640920777,"results":"303","hashOfConfig":"301"},{"size":359,"mtime":1664968383267,"results":"304","hashOfConfig":"301"},{"size":989,"mtime":1666073600087,"results":"305","hashOfConfig":"301"},{"size":425,"mtime":1662831720456,"results":"306","hashOfConfig":"301"},{"size":174,"mtime":1658806940240,"results":"307","hashOfConfig":"301"},{"size":173,"mtime":1663641845254,"results":"308","hashOfConfig":"301"},{"size":130,"mtime":1648643396000,"results":"309","hashOfConfig":"301"},{"size":164,"mtime":1664951795373,"results":"310","hashOfConfig":"301"},{"size":200,"mtime":1658834079878,"results":"311","hashOfConfig":"301"},{"size":171,"mtime":1664280668243,"results":"312","hashOfConfig":"301"},{"size":4368,"mtime":1666328192811,"results":"313","hashOfConfig":"301"},{"size":1484,"mtime":1664963766329,"results":"314","hashOfConfig":"301"},{"size":308,"mtime":1664436029047,"results":"315","hashOfConfig":"301"},{"size":245,"mtime":1664435954088,"results":"316","hashOfConfig":"301"},{"size":5702,"mtime":1666329008738,"results":"317","hashOfConfig":"301"},{"size":2197,"mtime":1666327016586,"results":"318","hashOfConfig":"301"},{"size":638,"mtime":1666326044234,"results":"319","hashOfConfig":"301"},{"size":3567,"mtime":1665464012841,"results":"320","hashOfConfig":"301"},{"size":1494,"mtime":1664510104545,"results":"321","hashOfConfig":"301"},{"size":620,"mtime":1664954824479,"results":"322","hashOfConfig":"301"},{"size":655,"mtime":1666326291928,"results":"323","hashOfConfig":"301"},{"size":3968,"mtime":1666328102179,"results":"324","hashOfConfig":"301"},{"size":898,"mtime":1666326629702,"results":"325","hashOfConfig":"301"},{"size":4731,"mtime":1665721342433,"results":"326","hashOfConfig":"301"},{"size":1779,"mtime":1665713763388,"results":"327","hashOfConfig":"301"},{"size":8559,"mtime":1666329272223,"results":"328","hashOfConfig":"301"},{"size":4286,"mtime":1666072257971,"results":"329","hashOfConfig":"301"},{"size":2797,"mtime":1666326531198,"results":"330","hashOfConfig":"301"},{"size":1356,"mtime":1665405598035,"results":"331","hashOfConfig":"301"},{"size":1873,"mtime":1665402589646,"results":"332","hashOfConfig":"301"},{"size":7499,"mtime":1665665475040,"results":"333","hashOfConfig":"301"},{"size":2791,"mtime":1665309686723,"results":"334","hashOfConfig":"301"},{"size":9876,"mtime":1666321367932,"results":"335","hashOfConfig":"301"},{"size":2709,"mtime":1666329934545,"results":"336","hashOfConfig":"301"},{"size":3341,"mtime":1666174089157,"results":"337","hashOfConfig":"301"},{"size":367,"mtime":1666078534749,"results":"338","hashOfConfig":"301"},{"size":5019,"mtime":1666329281751,"results":"339","hashOfConfig":"301"},{"size":2351,"mtime":1665295015268,"results":"340","hashOfConfig":"301"},{"size":6287,"mtime":1666253820177,"results":"341","hashOfConfig":"301"},{"size":2375,"mtime":1665400265147,"results":"342","hashOfConfig":"301"},{"size":825,"mtime":1666321540517,"results":"343","hashOfConfig":"301"},{"size":11714,"mtime":1666321435465,"results":"344","hashOfConfig":"301"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},"wgt8vx",{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"347"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"347"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"347"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},"1b6wk03",{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"427"},{"filePath":"451","messages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"427"},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"462","messages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"427"},{"filePath":"465","messages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473"},{"filePath":"474","messages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"427"},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479"},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"427"},{"filePath":"483","messages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"485","messages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487","usedDeprecatedRules":"427"},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502","usedDeprecatedRules":"427"},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"505"},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"347"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531","usedDeprecatedRules":"347"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},"1rkyyk",{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"551","messages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"534"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"568","usedDeprecatedRules":"534"},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"575","messages":"576","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585","usedDeprecatedRules":"534"},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"534"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"534"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"534"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"534"},{"filePath":"604","messages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"534"},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531","usedDeprecatedRules":"534"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"534"},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"534"},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"534"},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},"1k1wi1l",{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"637","messages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"655","messages":"656","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"677","messages":"678","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"685","messages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"632"},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"632"},{"filePath":"693","messages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531","usedDeprecatedRules":"632"},{"filePath":"695","messages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"632"},{"filePath":"699","messages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"701","messages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"703","messages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"705","messages":"706","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"707","messages":"708","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"709","messages":"710","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"711","messages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413"},{"filePath":"713","messages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"632"},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\index.js",[],["719","720"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\App.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\store\\auth-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\ReservationPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\AuthPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\ClientPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\HomePage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\CalenderPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Layout\\Layout.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Profile\\UserProfile.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Layout\\MainNavigation.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Profile\\ProfileForm.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\ReservationPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\ClientPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Auth\\AuthForm.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\StartingPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\ReservationTable.js",["721"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport DeleteReservation from \"./DeleteReservation\";\r\nimport UpdateReservation from \"./UpdateReservation\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\n\r\nconst ReservationTable = () => {\r\n  const [reservation, setReservationContext] = useContext(ReservationContext);\r\n  const [reservationId, setReservationId] = useState(\"\");\r\n  const [reservationUpdate, setReservationUpdate] = useState(false);\r\n\r\n  const updateReservationRow = reservation.map((reservation) => {\r\n    return {\r\n      ...reservation,\r\n      id: reservation._id,\r\n    };\r\n  });\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n      setReservationContext(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    ReservationDetails();\r\n    setReservationUpdate(false);\r\n  }, [reservationUpdate]);\r\n\r\n  const onClick = () => {\r\n    ReservationDetails();\r\n  };\r\n\r\n  const columns = [\r\n    { field: \"client_email\", headerName: \"Client\", flex: 2 },\r\n    { field: \"service_type\", headerName: \"Service Type\", flex: 2 },\r\n    { field: \"stylist_email\", headerName: \"Stylist\", flex: 2 },\r\n    { field: \"reservation_date\", headerName: \"Date\", flex: 2 },\r\n    { field: \"reservation_time\", headerName: \"Time\", flex: 2 },\r\n    { field: \"reservation_status\", headerName: \"Status\", flex: 2 },\r\n    {\r\n      field: \"Action\",\r\n      headerName: \"Action\",\r\n      flex: 1,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setReservationId(params.row.id);\r\n            }}\r\n            style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n          >\r\n            <UpdateReservation\r\n              reservationId={reservationId}\r\n              onUpdateReservationData={setReservationUpdate}\r\n            />\r\n            <DeleteReservation\r\n              reservationId={reservationId}\r\n              onClick={onClick}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <Row\r\n        style={{\r\n          width: \"100%\",\r\n          marginTop: \"2vh\",\r\n        }}\r\n      >\r\n        <DataGrid\r\n          rows={updateReservationRow}\r\n          columns={columns}\r\n          autoHeight\r\n          pageSize={5}\r\n          rowsPerPageOptions={[5]}\r\n        />\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ReservationTable;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\AddReservation.js",["722","723","724"],"import React, { useRef, useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./AddReservation.module.css\";\r\nimport { serviceType, timeArray } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport moment from \"moment\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { DATE_FORMAT, TIME_FORMAT } from \"./../../config/constants\";\r\nimport { sortModel } from \"../../data\";\r\n\r\nconst AddReservationModel = () => {\r\n  const currentDate = new Date();\r\n\r\n  const currentTime = moment(currentDate).format(TIME_FORMAT);\r\n  currentDate.setDate(currentDate.getDate() - 0);\r\n\r\n  const [reservation, setReservationContext] = useContext(ReservationContext);\r\n\r\n  const [clients, setClients] = useState([]);\r\n  const [onChangeDate, setChangeDate] = useState(\"\");\r\n  const [onChangeTime, setChangeTime] = useState(\"\");\r\n  const [availableStylist, setAvailableStylist] = useState([]);\r\n  const [reservationSearchValue, setReservationSearchValue] = useState(\"\");\r\n\r\n  let replaceSearchValue = reservationSearchValue.replace(/\\s+/g, \"\");\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const clientInputRef = useRef();\r\n  const serviceTypeInputRef = useRef();\r\n  const stylistInputRef = useRef();\r\n  const reservationDateInputRef = useRef();\r\n  const reservationTimeInputRef = useRef();\r\n\r\n  const onSubmitForm = async (event) => {\r\n    event.preventDefault();\r\n    const enteredClient = clientInputRef.current.value;\r\n    const enteredService = serviceTypeInputRef.current.value;\r\n    const enteredStylist = stylistInputRef.current.value;\r\n    const enteredDate = reservationDateInputRef.current.value;\r\n    const enteredTime = reservationTimeInputRef.current.value;\r\n\r\n    try {\r\n      const response = await ReservationService.reservationCreate(\r\n        enteredClient,\r\n        enteredService,\r\n        enteredStylist,\r\n        enteredDate,\r\n        enteredTime\r\n      );\r\n      ReservationDetails();\r\n      handleClose();\r\n      return response;\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails(0, sortModel);\r\n      setClients(result.data);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const AvailableStylsitDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationStylistSearch(\r\n        onChangeDate,\r\n        onChangeTime\r\n      );\r\n      setAvailableStylist(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ReservationDetailSearch = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationSearch(\r\n        replaceSearchValue\r\n      );\r\n      setReservationContext(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n      setReservationContext(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (onChangeDate && onChangeTime) {\r\n      AvailableStylsitDetails();\r\n    }\r\n  }, [onChangeDate, onChangeTime]);\r\n\r\n  useEffect(() => {\r\n    if (replaceSearchValue.length > 0) {\r\n      ReservationDetailSearch();\r\n    }\r\n  }, [replaceSearchValue]);\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n  }, []);\r\n\r\n  return (\r\n    <Container className=\"mt-3\">\r\n      <Row>\r\n        <Col sm={4}>\r\n          <InputGroup className=\"mb-3\">\r\n            <Form.Control\r\n              placeholder=\"Search here\"\r\n              aria-label=\"Search here\"\r\n              aria-describedby=\"basic-addon2\"\r\n              onChange={(e) => {\r\n                setReservationSearchValue(e.target.value);\r\n                if (e.target.value === \"\") {\r\n                  ReservationDetails();\r\n                }\r\n              }}\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col sm={8} style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n          <button onClick={handleOpen} className={classes.button}>\r\n            Add New\r\n          </button>\r\n          <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n          >\r\n            <Box className={classes.auth}>\r\n              <Typography\r\n                id=\"modal-modal-title\"\r\n                variant=\"h6\"\r\n                component=\"h2\"\r\n                textAlign=\"center\"\r\n              >\r\n                Add New Reservation\r\n              </Typography>\r\n              <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                <section>\r\n                  <form onSubmit={onSubmitForm}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Client</label>\r\n                      <select name=\"client\" required ref={clientInputRef}>\r\n                        <option value=\"\">Select Client </option>\r\n                        {clients.map((client, index) => {\r\n                          return (\r\n                            <option key={index} value={client.email}>\r\n                              {client.fname}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Service Type</label>\r\n                      <select\r\n                        name=\"serviceType\"\r\n                        required\r\n                        ref={serviceTypeInputRef}\r\n                      >\r\n                        <option value=\"\">Select Service Type</option>\r\n                        {serviceType.map((service, index) => {\r\n                          return (\r\n                            <option key={index} value={service.title}>\r\n                              {service.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"date\">Select Date</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        min={moment(currentDate).format(DATE_FORMAT)}\r\n                        max=\"2024-09-09\"\r\n                        id=\"password\"\r\n                        required\r\n                        ref={reservationDateInputRef}\r\n                        onChange={(e) => {\r\n                          setChangeDate(e.target.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Select Time</label>\r\n                      <select\r\n                        name=\"time\"\r\n                        required\r\n                        ref={reservationTimeInputRef}\r\n                        onChange={(e) => {\r\n                          setChangeTime(e.target.value);\r\n                        }}\r\n                      >\r\n                        <option value=\"\">Select Time</option>\r\n                        {timeArray.map((timeData, index) => {\r\n                          return (\r\n                            <option\r\n                              key={index}\r\n                              value={timeData.time}\r\n                              disabled={\r\n                                parseInt(timeData.time) <\r\n                                  parseInt(currentTime) &&\r\n                                moment(currentDate).format(DATE_FORMAT) ===\r\n                                  onChangeDate\r\n                              }\r\n                            >\r\n                              {timeData.time}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Stylist</label>\r\n                      <select name=\"stylist\" required ref={stylistInputRef}>\r\n                        <option value=\"\">Select Stylist</option>\r\n                        {availableStylist.map((stylist, index) => {\r\n                          return (\r\n                            <option key={index} value={stylist}>\r\n                              {stylist}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginTop: \"5vh\",\r\n                      }}\r\n                    >\r\n                      <Button type=\"submit\" variant=\"light\">\r\n                        Add Reservation\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                </section>\r\n              </Typography>\r\n            </Box>\r\n          </Modal>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddReservationModel;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\ClientTable.js",["725","726","727"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport DeleteClient from \"./DeleteClient\";\r\nimport UpdateClient from \"./UpdateClient\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport ClientContext from \"./../../store/client-context\";\r\n\r\nconst ClientTable = () => {\r\n  const clientCtx = useContext(ClientContext);\r\n\r\n  const [page, setPage] = useState(0);\r\n\r\n  const [sortModel, setSortModel] = useState([\r\n    {\r\n      field: \"createdAt\",\r\n      sort: \"asc\",\r\n    },\r\n  ]);\r\n\r\n  const [clientId, setClientId] = useState(\"\");\r\n  const [clientEmail, setClientEmail] = useState(\"\");\r\n\r\n  const updateClientRow = clientCtx.clients?.map((updateValue) => {\r\n    return {\r\n      ...updateValue,\r\n      id: updateValue._id,\r\n    };\r\n  });\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails(page, sortModel);\r\n\r\n      clientCtx.getAllClientDetails(result, page);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const onClick = () => {\r\n    ClientDetails();\r\n  };\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n  }, [page, sortModel]);\r\n\r\n  const columns = [\r\n    {\r\n      field: \"fname\",\r\n      headerName: \"First Name\",\r\n      flex: 2,\r\n    },\r\n    { field: \"lname\", headerName: \"Last Name\", flex: 2 },\r\n    { field: \"phone_number\", headerName: \"Phone Number\", flex: 2 },\r\n    { field: \"email\", headerName: \"Email\", flex: 2 },\r\n    {\r\n      field: \"Action\",\r\n      headerName: \"Action\",\r\n      flex: 1,\r\n      sortable: false,\r\n      hideable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setClientId(params.row.id);\r\n              setClientEmail(params.row.email);\r\n            }}\r\n            style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n          >\r\n            <UpdateClient clientId={clientId} />\r\n            <DeleteClient\r\n              clientId={clientId}\r\n              clientEmail={clientEmail}\r\n              onClick={onClick}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const columns1 = [\r\n    { field: \"id\", headerName: \"ID\", width: 90 },\r\n    {\r\n      field: \"firstName\",\r\n      headerName: \"First name\",\r\n      width: 150,\r\n      editable: true,\r\n    },\r\n    {\r\n      field: \"lastName\",\r\n      headerName: \"Last name\",\r\n      width: 150,\r\n      editable: true,\r\n    },\r\n    {\r\n      field: \"age\",\r\n      headerName: \"Age\",\r\n      type: \"number\",\r\n      width: 110,\r\n      editable: true,\r\n    },\r\n    {\r\n      field: \"fullName\",\r\n      headerName: \"Full name\",\r\n      description: \"This column has a value getter and is not sortable.\",\r\n      sortable: false,\r\n      width: 160,\r\n      valueGetter: (params) =>\r\n        `${params.row.firstName || \"\"} ${params.row.lastName || \"\"}`,\r\n    },\r\n  ];\r\n\r\n  const rows1 = [\r\n    { id: 1, lastName: \"Snow\", firstName: \"Jon\", age: 35 },\r\n    { id: 2, lastName: \"Lannister\", firstName: \"Cersei\", age: 42 },\r\n    { id: 3, lastName: \"Lannister\", firstName: \"Jaime\", age: 45 },\r\n    { id: 4, lastName: \"Stark\", firstName: \"Arya\", age: 16 },\r\n    { id: 5, lastName: \"Targaryen\", firstName: \"Daenerys\", age: null },\r\n    { id: 6, lastName: \"Melisandre\", firstName: null, age: 150 },\r\n    { id: 7, lastName: \"Clifford\", firstName: \"Ferrara\", age: 44 },\r\n    { id: 8, lastName: \"Frances\", firstName: \"Rossini\", age: 36 },\r\n    { id: 9, lastName: \"Roxie\", firstName: \"Harvey\", age: 65 },\r\n  ];\r\n\r\n  return (\r\n    <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <Row style={{ width: \"100%\", marginTop: \"2vh\" }}>\r\n        <DataGrid\r\n          rows={updateClientRow}\r\n          columns={columns}\r\n          autoHeight\r\n          pagination\r\n          paginationMode=\"server\"\r\n          pageSize={5}\r\n          // rowsPerPageOptions={[2]}\r\n          onPageChange={(newPage) => {\r\n            setPage(newPage);\r\n          }}\r\n          rowCount={clientCtx.allClientsCount}\r\n          onSortModelChange={(newSortModel) => {\r\n            setSortModel(newSortModel);\r\n          }}\r\n        />\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ClientTable;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\data.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\AddClientModel.js",["728"],"import React, { useRef, useState, useEffect, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./AddClient.module.css\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { PHONE_REGEX } from \"./../../config/constants\";\r\nimport ClientContext from \"./../../store/client-context\";\r\nimport { sortModel } from \"../../data\";\r\n\r\nconst AddClientModel = () => {\r\n  const formRef = useRef();\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const clientCtx = useContext(ClientContext);\r\n\r\n  const [searchvalue, setSearchValue] = useState(\"\");\r\n  const replaceSearchValue = searchvalue.replace(/\\s+/g, \"\");\r\n\r\n  const onSubmitForm = async (values) => {\r\n    try {\r\n      const response = await ClientService.createClient(\r\n        values.email,\r\n        values.fname,\r\n        values.lname,\r\n        values.phonenumber\r\n      );\r\n\r\n      ClientDetails();\r\n      document.getElementById(\"create_client\").reset();\r\n      handleClose();\r\n      return response;\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ClientDetailSearch = async () => {\r\n    try {\r\n      const result = await ClientService.clientSearch(replaceSearchValue);\r\n      clientCtx.getAllClientDetails(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails(\r\n        clientCtx.currentPage,\r\n        sortModel\r\n      );\r\n      clientCtx.getAllClientDetails(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (replaceSearchValue.length > 0) {\r\n      ClientDetailSearch();\r\n    }\r\n  }, [replaceSearchValue]);\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"mt-3\">\r\n        <Col sm={4}>\r\n          <InputGroup className=\"mb-3\">\r\n            <Form.Control\r\n              placeholder=\"Search here\"\r\n              aria-label=\"Search here\"\r\n              aria-describedby=\"basic-addon2\"\r\n              onChange={(e) => {\r\n                setSearchValue(e.target.value);\r\n                if (e.target.value === \"\") {\r\n                  ClientDetails();\r\n                }\r\n              }}\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col sm={8} style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n          <button onClick={handleOpen} className={classes.button}>\r\n            Add New\r\n          </button>\r\n\r\n          <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n          >\r\n            <Box className={classes.auth}>\r\n              <Typography\r\n                id=\"modal-modal-title\"\r\n                variant=\"h6\"\r\n                component=\"h2\"\r\n                textAlign=\"center\"\r\n              >\r\n                Add New Client\r\n              </Typography>\r\n              <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                <section>\r\n                  <Formik\r\n                    enableReinitialize={true}\r\n                    initialValues={{\r\n                      email: \"\",\r\n                      fname: \"\",\r\n                      lname: \"\",\r\n                      phonenumber: \"\",\r\n                    }}\r\n                    validationSchema={Yup.object().shape({\r\n                      email: Yup.string()\r\n                        .email(\"Invalid email\")\r\n                        .required(\"Required\"),\r\n                      fname: Yup.string().required(\"Required\"),\r\n                      lname: Yup.string().required(\"Required\"),\r\n                      phonenumber: Yup.string()\r\n                        .matches(PHONE_REGEX, \"Phone number is not valid\")\r\n                        .required(\"Phone Number is required\"),\r\n                    })}\r\n                    onSubmit={onSubmitForm}\r\n                    innerRef={formRef}\r\n                  >\r\n                    {({\r\n                      errors,\r\n                      handleBlur,\r\n                      handleChange,\r\n                      touched,\r\n                      values,\r\n                      handleSubmit,\r\n                    }) => (\r\n                      <form onSubmit={handleSubmit} id=\"create_client\">\r\n                        <div className={classes.control}>\r\n                          <label htmlFor=\"email\">Email</label>\r\n                          <input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            id=\"email_id\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.email}\r\n                          />\r\n                        </div>\r\n                        <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n                          {touched.email && errors.email}\r\n                        </div>\r\n                        <div className={classes.control}>\r\n                          <label htmlFor=\"text\">First Name</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"fname\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            id=\"fname_id\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.fname}\r\n                          />\r\n                        </div>\r\n                        <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n                          {touched.fname && errors.fname}\r\n                        </div>\r\n                        <div className={classes.control}>\r\n                          <label htmlFor=\"text\">Last Name</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"lname\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            id=\"lname_id\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.lname}\r\n                          />\r\n                        </div>\r\n                        <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n                          {touched.lname && errors.lname}\r\n                        </div>\r\n                        <div className={classes.control}>\r\n                          <label htmlFor=\"phone\">Phone Number</label>\r\n                          <input\r\n                            type=\"phone\"\r\n                            name=\"phonenumber\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            id=\"phone_id\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.phonenumber}\r\n                          />\r\n                        </div>\r\n                        <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n                          {touched.phonenumber && errors.phonenumber}\r\n                        </div>\r\n                        <div\r\n                          style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            marginTop: \"5vh\",\r\n                          }}\r\n                        >\r\n                          <Button type=\"submit\" variant=\"light\">\r\n                            Add New Client\r\n                          </Button>\r\n                        </div>\r\n                      </form>\r\n                    )}\r\n                  </Formik>\r\n                </section>\r\n              </Typography>\r\n            </Box>\r\n          </Modal>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddClientModel;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\InviteNewUser.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\PieChart.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\StartingPage\\BarChartContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\AuthService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\ReservationService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\UpdateReservation.js",["729","730"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./UpdateReservation.module.css\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { serviceType, timeArray, status } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { Formik } from \"formik\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport moment from \"moment\";\r\nimport {\r\n  DATE_FORMAT,\r\n  TIME_FORMAT,\r\n  CURRENT_DATE,\r\n} from \"./../../config/constants\";\r\nimport { sortModel } from \"../../data\";\r\n\r\nconst UpdateReservation = (props) => {\r\n  CURRENT_DATE.setDate(CURRENT_DATE.getDate() - 0);\r\n  const currentTime = moment(CURRENT_DATE).format(TIME_FORMAT);\r\n\r\n  const [onChangeDate, setChangeDate] = useState(\"\");\r\n  const [onChangeTime, setChangeTime] = useState(\"\");\r\n  const [availablestylist, setAvailableStylist] = useState([]);\r\n\r\n  const [setReservationContext] = useContext(ReservationContext);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    ReservationDetailSearchID();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    ReservationDetailSearchID();\r\n    ReservationDetails();\r\n  };\r\n\r\n  const [clients, setClients] = useState([]);\r\n\r\n  const [reservationInfo, setReservationInfo] = useState({\r\n    client_email: \"\",\r\n    service_type: \"\",\r\n    stylist_email: \"\",\r\n    reservation_date: \"\",\r\n    reservation_time: \"\",\r\n    reservation_status: \"\",\r\n  });\r\n\r\n  const ReservationDetailSearchID = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetailsID(\r\n        props.reservationId\r\n      );\r\n\r\n      const info = {};\r\n      const reservationInfo = result;\r\n\r\n      info.client_email = reservationInfo.client_email;\r\n      info.service_type = reservationInfo.service_type;\r\n      info.stylist_email = reservationInfo.stylist_email;\r\n      info.reservation_date = reservationInfo.reservation_date;\r\n      info.reservation_time = reservationInfo.reservation_time;\r\n      info.reservation_status = reservationInfo.reservation_status;\r\n\r\n      setChangeDate(reservationInfo.reservation_date);\r\n      setChangeTime(reservationInfo.reservation_time);\r\n      setReservationInfo(info);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails(0, sortModel);\r\n\r\n      setClients(result.data);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const onSubmitForm = (values) => {\r\n    try {\r\n      ReservationService.reservationUpdate(\r\n        props.reservationId,\r\n        values.client_email,\r\n        values.service_type,\r\n        values.stylist_email,\r\n        onChangeDate,\r\n        onChangeTime,\r\n        values.reservation_status\r\n      );\r\n\r\n      ReservationDetails();\r\n      props.onUpdateReservationData();\r\n      handleClose();\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n      setReservationContext(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const AvailableStylsitDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationStylistSearch(\r\n        onChangeDate,\r\n        onChangeTime\r\n      );\r\n      setAvailableStylist(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.reservationId) {\r\n      ReservationDetailSearchID();\r\n    }\r\n  }, [props.reservationId]);\r\n\r\n  useEffect(() => {\r\n    if (onChangeDate && onChangeTime) {\r\n      AvailableStylsitDetails();\r\n    }\r\n  }, [onChangeDate, onChangeTime]);\r\n\r\n  return (\r\n    <Container>\r\n      <FontAwesomeIcon\r\n        icon={faPen}\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={handleOpen}\r\n      />\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Update Reservation\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                  client_email: reservationInfo.client_email,\r\n                  service_type: reservationInfo.service_type,\r\n                  stylist_email: reservationInfo.stylist_email,\r\n                  reservation_date: reservationInfo.reservation_date,\r\n                  reservation_time: reservationInfo.reservation_time,\r\n                  reservation_status: reservationInfo.reservation_status,\r\n                }}\r\n                onSubmit={onSubmitForm}\r\n              >\r\n                {({ values, handleChange, handleBlur, handleSubmit }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Client</label>\r\n                      <select\r\n                        name=\"client_email\"\r\n                        className=\"form-control\"\r\n                        id=\"selectClient\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.client_email}\r\n                      >\r\n                        <option value={\"\"}>Select Client</option>\r\n                        {clients.map((cli, index) => {\r\n                          return (\r\n                            <option key={cli._id} value={cli.email}>\r\n                              {cli.email}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Service Type</label>\r\n                      <select\r\n                        name=\"service_type\"\r\n                        className=\"form-control\"\r\n                        id=\"selectservice\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.service_type}\r\n                      >\r\n                        {serviceType.map((service, index) => {\r\n                          return (\r\n                            <option key={service.id} value={service.title}>\r\n                              {service.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Date</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        id=\"date_id\"\r\n                        name=\"reservation_date\"\r\n                        min={moment(CURRENT_DATE).format(DATE_FORMAT)}\r\n                        required\r\n                        value={onChangeDate}\r\n                        onBlur={handleBlur}\r\n                        onChange={(e) => {\r\n                          setChangeDate(e.target.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Time</label>\r\n                      <select\r\n                        name=\"reservation_time\"\r\n                        className=\"form-control\"\r\n                        id=\"reservation_time_id\"\r\n                        required\r\n                        onBlur={handleBlur}\r\n                        value={onChangeTime}\r\n                        onChange={(e) => {\r\n                          setChangeTime(e.target.value);\r\n                        }}\r\n                      >\r\n                        {timeArray.map((time, index) => {\r\n                          return (\r\n                            <option\r\n                              key={time.id}\r\n                              value={time.time}\r\n                              disabled={\r\n                                parseInt(time.time) < parseInt(currentTime) &&\r\n                                moment(CURRENT_DATE).format(DATE_FORMAT) ===\r\n                                  onChangeDate\r\n                              }\r\n                            >\r\n                              {time.time}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Stylist</label>\r\n                      <select\r\n                        name=\"stylist_email\"\r\n                        className=\"form-control\"\r\n                        id=\"stylist_id\"\r\n                        required\r\n                        value={values.stylist_email}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                      >\r\n                        <option value={values.stylist_email}>\r\n                          {values.stylist_email}\r\n                        </option>\r\n                        {availablestylist.map((stylist) => {\r\n                          return (\r\n                            <option key={stylist} value={stylist}>\r\n                              {stylist}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Status</label>\r\n                      <select\r\n                        name=\"reservation_status\"\r\n                        className=\"form-control\"\r\n                        id=\"reservation_status_id\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.reservation_status}\r\n                      >\r\n                        {status.map((stat, index) => {\r\n                          return (\r\n                            <option key={stat.id} value={stat.title}>\r\n                              {stat.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                      <Button variant=\"light\" type=\"submit\">\r\n                        Update Reservation\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateReservation;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Reservation\\DeleteReservation.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\ClientService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\services\\UserService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\UpdateClient.js",["731"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./UpdateClient.module.css\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { Formik } from \"formik\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ClientContext from \"./../../store/client-context\";\r\nimport { sortModel } from \"../../data\";\r\n\r\nconst UpdateClient = (props) => {\r\n  const clientCtx = useContext(ClientContext);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    ClientDetailSearchID();\r\n  };\r\n\r\n  const [clientInfo, setClientInfo] = useState({\r\n    email: \"\",\r\n    fname: \"\",\r\n    lname: \"\",\r\n    phone_number: \"\",\r\n  });\r\n\r\n  const onSubmitForm = async (values) => {\r\n    try {\r\n      const result = await ClientService.clientUpdate(\r\n        props.clientId,\r\n        values.fname,\r\n        values.lname,\r\n        values.phone_number,\r\n        values.email\r\n      );\r\n      ClientDetails();\r\n      handleClose();\r\n      return result;\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ClientDetailSearchID = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetailsID(props.clientId);\r\n\r\n      const info = {};\r\n\r\n      const cliInfo = result;\r\n\r\n      info.email = cliInfo.email;\r\n      info.fname = cliInfo.fname;\r\n      info.lname = cliInfo.lname;\r\n      info.phone_number = cliInfo.phone_number;\r\n\r\n      setClientInfo(info);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.clientId === \"\") {\r\n    } else {\r\n      ClientDetailSearchID();\r\n    }\r\n  }, [props.clientId]);\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails(\r\n        clientCtx.currentPage,\r\n        sortModel\r\n      );\r\n      clientCtx.getAllClientDetails(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <FontAwesomeIcon\r\n        icon={faPen}\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={handleOpen}\r\n      />\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Update Client\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                  email: clientInfo.email,\r\n                  fname: clientInfo.fname,\r\n                  lname: clientInfo.lname,\r\n                  phone_number: clientInfo.phone_number,\r\n                }}\r\n                onSubmit={onSubmitForm}\r\n              >\r\n                {({\r\n                  values,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Email</label>\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.email}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"fname\">First Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"fname\"\r\n                        name=\"fname\"\r\n                        required\r\n                        value={values.fname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Last Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"text\"\r\n                        name=\"lname\"\r\n                        required\r\n                        value={values.lname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"phonenumber\">Phone Number</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"phone_number\"\r\n                        name=\"phone_number\"\r\n                        required\r\n                        value={values.phone_number}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginTop: \"5vh\",\r\n                      }}\r\n                    >\r\n                      <Button\r\n                        disabled={isSubmitting}\r\n                        type=\"submit\"\r\n                        variant=\"light\"\r\n                      >\r\n                        Update Client\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateClient;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\ClientPage\\DeleteClient.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\config\\constants.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\store\\client-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\store\\reservation-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Auth\\SignUp.js",["732"],"import { useRef, useContext, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport AuthContext from \"../../store/auth-context\";\nimport classes from \"./AuthForm.module.css\";\nimport { MainUserService } from \"./../../services/AuthService\";\nimport { UserService } from \"./../../services/UserService\";\nimport Button from \"react-bootstrap/Button\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Container from \"react-bootstrap/Container\";\n\nconst SignUp = () => {\n  const history = useHistory();\n  const params = useParams();\n\n  const formRef = useRef();\n\n  const authCtx = useContext(AuthContext);\n\n  const onSubmitForm = async (values) => {\n    try {\n      const result = await MainUserService.signUpUser(\n        params.token,\n        values.email,\n        values.fname,\n        values.password\n      );\n\n      authCtx.login(result.token, result.usetId);\n      history.replace(\"/\");\n    } catch (err) {\n      return err;\n    }\n  };\n\n  const [formContentShow, setFormContentShow] = useState(false);\n  const [contentShow, setContentShow] = useState(false);\n\n  const findUser = async () => {\n    try {\n      const response = await UserService.findUser(params.email);\n\n      if (response) {\n        setFormContentShow(true);\n      } else {\n        setContentShow(true);\n      }\n    } catch (err) {\n      return err;\n    }\n  };\n\n  useEffect(() => {\n    findUser();\n  }, [params.email]);\n\n  return (\n    <Container>\n      <h1\n        className={classes.auth_error}\n        style={{ textAlign: \"center\" }}\n        hidden={contentShow}\n      >\n        Alredy SignUp\n      </h1>\n      <section className={classes.auth} hidden={formContentShow}>\n        <h1>Sign Up</h1>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            email: params.email,\n            fname: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n          }}\n          validationSchema={Yup.object().shape({\n            fname: Yup.string().required(\"Required\"),\n            password: Yup.string()\n              .required(\"Required\")\n              .min(6, \"password must have at least 6 characters\")\n              .max(25, \"password must have less than 25 characters\"),\n            confirmPassword: Yup.string().when(\"password\", {\n              is: (val) => (val && val.length > 0 ? true : false),\n              then: Yup.string().oneOf(\n                [Yup.ref(\"password\")],\n                \"Both password need to be the same\"\n              ),\n            }),\n          })}\n          onSubmit={onSubmitForm}\n          innerRef={formRef}\n        >\n          {({\n            errors,\n            handleBlur,\n            handleChange,\n            touched,\n            values,\n            handleSubmit,\n          }) => (\n            <form onSubmit={handleSubmit}>\n              <div className={classes.control}>\n                <label htmlFor=\"email\">Your Email</label>\n                <input\n                  name=\"email\"\n                  type=\"email\"\n                  className=\"form-control\"\n                  id=\"emai_id\"\n                  required\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                  disabled\n                />\n              </div>\n              <div className={classes.control}>\n                <label htmlFor=\"text\">Your First Name</label>\n                <input\n                  name=\"fname\"\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"id\"\n                  placeholder=\"First Name\"\n                  required\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.fname}\n                />\n              </div>\n              <div style={{ color: \"red\", fontSize: \"12px\" }}>\n                {touched.fname && errors.fname}\n              </div>\n              <div className={classes.control}>\n                <label htmlFor=\"password\">Your Password</label>\n                <input\n                  name=\"password\"\n                  type=\"password\"\n                  className=\"form-control\"\n                  id=\"id\"\n                  placeholder=\"Password\"\n                  required\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                />\n              </div>\n              <div style={{ color: \"red\", fontSize: \"12px\" }}>\n                {touched.password && errors.password}\n              </div>\n              <div className={classes.control}>\n                <label htmlFor=\"new-password\">Confirm Password</label>\n                <input\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  className=\"form-control\"\n                  id=\"id\"\n                  placeholder=\"Confirm Password\"\n                  required\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.confirmPassword}\n                />\n              </div>\n              <div style={{ color: \"red\", fontSize: \"12px\" }}>\n                {touched.confirmPassword && errors.confirmPassword}\n              </div>\n\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  marginTop: \"5vh\",\n                }}\n              >\n                <Button variant=\"light\" type=\"submit\">\n                  User SignUp\n                </Button>\n              </div>\n            </form>\n          )}\n        </Formik>\n      </section>\n    </Container>\n  );\n};\n\nexport default SignUp;\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\index.js",[],["733","734"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\App.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\store\\reservation-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\store\\client-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\store\\auth-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\ReservationPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\AuthPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\CalenderPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\ClientPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\pages\\HomePage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Auth\\SignUp.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Layout\\Layout.js",["735","736","737","738","739","740"],"import { Fragment } from \"react\";\nimport MainNavigation from \"./MainNavigation\";\nimport { ProSidebar, Menu, MenuItem, SubMenu } from \"react-pro-sidebar\";\nimport \"react-pro-sidebar/dist/css/styles.css\";\nimport Sidebar from \"./Sidebar\";\nimport HomePage from \"./../../pages/HomePage\";\n\nconst Layout = (props) => {\n  return (\n    <Fragment>\n      <MainNavigation />\n      <main>{props.children}</main>\n    </Fragment>\n  );\n};\n\nexport default Layout;\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Profile\\UserProfile.js",["741"],"import ProfileForm from \"./ProfileForm\";\nimport classes from \"./UserProfile.module.css\";\n\nconst UserProfile = () => {\n  return (\n    <section>\n      <h4\n        style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"5vh\" }}\n      >\n        Change Your Password\n      </h4>\n      <ProfileForm />\n    </section>\n  );\n};\n\nexport default UserProfile;\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Auth\\AuthForm.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\ClientPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\ReservationPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Layout\\MainNavigation.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Calender\\CalenderDragDrop.js",["742"],"import withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\r\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\r\nimport React, { useEffect, useState, useContext } from \"react\";\r\nimport classes from \"./CalenderContent.module.css\";\r\nimport { Calendar, dateFnsLocalizer } from \"react-big-calendar\";\r\nimport format from \"date-fns/format\";\r\nimport parse from \"date-fns/parse\";\r\nimport startOfWeek from \"date-fns/startOfWeek\";\r\nimport getDay from \"date-fns/getDay\";\r\nimport enUS from \"date-fns/locale/en-US\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport {\r\n  NotificationManager,\r\n  NotificationContainer,\r\n} from \"react-notifications\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport moment from \"moment\";\r\n\r\nconst DnDCalendar = withDragAndDrop(Calendar);\r\n\r\nconst locales = {\r\n  \"en-US\": enUS,\r\n};\r\n\r\nconst localizer = dateFnsLocalizer({\r\n  format,\r\n  parse,\r\n  startOfWeek,\r\n  getDay,\r\n  locales,\r\n});\r\n\r\nconst CalenderDragDrop = () => {\r\n  const customFormat = \"YYYY-MM-DD\";\r\n\r\n  const today = new Date();\r\n\r\n  const [setReservationContext] = useContext(ReservationContext);\r\n  const [reservation_details, setReservation] = useState([]);\r\n\r\n  const [reser, setReservationDetails] = useState(false);\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n\r\n      setReservation(result);\r\n      setReservationContext(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    ReservationDetails();\r\n    setReservationDetails(false);\r\n  }, [reser]);\r\n\r\n  const newArray = reservation_details.map((u) => {\r\n    return {\r\n      ...u,\r\n      id: u._id,\r\n      title:\r\n        u.service_type + \" : \" + u.reservation_time + \" : \" + u.stylist_email,\r\n      start: new Date(u.reservation_date),\r\n      end: new Date(u.reservation_date),\r\n    };\r\n  });\r\n\r\n  const moveEvent = ({\r\n    event,\r\n    start,\r\n    // end,\r\n    isAllDay: droppedOnAllDaySlot = false,\r\n  }) => {\r\n    if (start >= today) {\r\n      onSubmitForm(\r\n        event.id,\r\n        moment(start).format(customFormat),\r\n        event.reservation_time,\r\n        event.stylist_email,\r\n        event.client_email,\r\n        event.service_type,\r\n        event.reservation_status\r\n      );\r\n    } else {\r\n      NotificationManager.error(\r\n        \"The date is too old\",\r\n        \"error\",\r\n        \"Close after 45000ms\",\r\n        10000000000\r\n      );\r\n    }\r\n  };\r\n\r\n  const onSubmitForm = async (\r\n    id,\r\n    start,\r\n    reservation_time,\r\n    stylist_email,\r\n    client_email,\r\n    service_type,\r\n    reservation_status\r\n  ) => {\r\n    try {\r\n      await ReservationService.dragReservationUpdate(\r\n        id,\r\n        start,\r\n        reservation_time,\r\n        stylist_email,\r\n        client_email,\r\n        service_type,\r\n        reservation_status\r\n      );\r\n\r\n      setReservationDetails(true);\r\n      ReservationDetails();\r\n      NotificationManager.success(\r\n        \"Reservation Success Update\",\r\n        \"Success\",\r\n        \"Close after 15000ms\",\r\n        10000000000\r\n      );\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"There is no available date.\",\r\n        \"error\",\r\n        \"Close after 45000ms\",\r\n        10000000000\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className={classes.starting}>\r\n      {console.log(newArray)}\r\n      <Row>\r\n        <div className={classes.maincontent}>\r\n          <DnDCalendar\r\n            localizer={localizer}\r\n            events={newArray}\r\n            draggableAccessor={(event) => true}\r\n            startAccessor=\"start\"\r\n            endAccessor=\"end\"\r\n            style={{ height: \"75vh\" }}\r\n            resizable={false}\r\n            onEventDrop={moveEvent}\r\n          />\r\n        </div>\r\n      </Row>\r\n      <NotificationContainer />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CalenderDragDrop;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\StartingPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Profile\\ProfileForm.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\AuthService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\ClientTable.js",["743"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport DeleteClient from \"./DeleteClient\";\r\nimport UpdateClient from \"./UpdateClient\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { ClientContext } from \"./../../store/client-context\";\r\n\r\nconst ClientTable = () => {\r\n  const [clients, setClients] = useContext(ClientContext);\r\n  const [clientUpdate, setClientUpdate] = useState(false);\r\n  const [clientId, setClientId] = useState(\"\");\r\n  const [clientEmail, setClientEmail] = useState(\"\");\r\n\r\n  const newArrayRow = clients.map((u) => {\r\n    return {\r\n      ...u,\r\n      id: u._id,\r\n    };\r\n  });\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const onClick = () => {\r\n    ClientDetails();\r\n  };\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n  }, [clientUpdate]);\r\n\r\n  const columns = [\r\n    {\r\n      field: \"fname\",\r\n      headerName: \"First Name\",\r\n      flex: 2,\r\n    },\r\n    { field: \"lname\", headerName: \"Last Name\", flex: 2 },\r\n    { field: \"phone_number\", headerName: \"Phone Number\", flex: 2 },\r\n    { field: \"email\", headerName: \"Email\", flex: 2 },\r\n    {\r\n      field: \"Action\",\r\n      headerName: \"Action\",\r\n      flex: 1,\r\n      sortable: false,\r\n      hideable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setClientId(params.row.id);\r\n              setClientEmail(params.row.email);\r\n            }}\r\n            style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n          >\r\n            <UpdateClient\r\n              clientId={clientId}\r\n              onUpdateClientData={setClientUpdate}\r\n              clientEmail={clientEmail}\r\n            />\r\n            <DeleteClient\r\n              clientId={clientId}\r\n              clientEmail={clientEmail}\r\n              onClick={onClick}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <Row style={{ width: \"100%\", marginTop: \"2vh\" }}>\r\n        <DataGrid\r\n          rows={newArrayRow}\r\n          columns={columns}\r\n          autoHeight\r\n          hideFooter\r\n          disableColumnMenu\r\n        />\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ClientTable;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\AddClientModel.js",["744","745"],"import React, { useRef, useState, useEffect, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./AddClient.module.css\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { ClientContext } from \"./../../store/client-context\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst AddClientModel = () => {\r\n  const [clients, setClients] = useContext(ClientContext);\r\n\r\n  const [searchvalue, setSearchValue] = useState(\"\");\r\n\r\n  let replaceSearchValue = searchvalue.replace(/\\s+/g, \"\");\r\n\r\n  const emailInputRef = useRef();\r\n  const fnameInputRef = useRef();\r\n  const lnameInputRef = useRef();\r\n  const phoneNumberInputRef = useRef();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const submitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredEmail = emailInputRef.current.value;\r\n    const enteredFname = fnameInputRef.current.value;\r\n    const enteredLname = lnameInputRef.current.value;\r\n    const enteredPhonenumber = phoneNumberInputRef.current.value;\r\n\r\n    try {\r\n      const response = await ClientService.clientCreate(\r\n        enteredEmail,\r\n        enteredFname,\r\n        enteredLname,\r\n        enteredPhonenumber\r\n      );\r\n\r\n      ClientDetails();\r\n      NotificationManager.success(\r\n        \"Client Success Added\",\r\n        \"Success\",\r\n        \"Close after 100000ms\",\r\n        10000000000\r\n      );\r\n      document.getElementById(\"create_client\").reset();\r\n      handleClose();\r\n      return response;\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"Email alredy registered\",\r\n        \"error\",\r\n        \"Close after 25000ms\",\r\n        10000000000\r\n      );\r\n    }\r\n  };\r\n\r\n  const ClientDetailSearch = async () => {\r\n    try {\r\n      const result = await ClientService.clientSearch(replaceSearchValue);\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (replaceSearchValue.length > 0) {\r\n      ClientDetailSearch();\r\n    }\r\n  }, [replaceSearchValue]);\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"mt-3\">\r\n        <Col sm={4}>\r\n          <InputGroup className=\"mb-3\">\r\n            <Form.Control\r\n              placeholder=\"Search here\"\r\n              aria-label=\"Search here\"\r\n              aria-describedby=\"basic-addon2\"\r\n              onChange={(e) => {\r\n                setSearchValue(e.target.value);\r\n                if (e.target.value === \"\") {\r\n                  ClientDetails();\r\n                }\r\n              }}\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col sm={8} style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n          <button onClick={handleOpen} className={classes.button}>\r\n            Add New\r\n          </button>\r\n\r\n          <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n          >\r\n            <Box className={classes.auth}>\r\n              <Typography\r\n                id=\"modal-modal-title\"\r\n                variant=\"h6\"\r\n                component=\"h2\"\r\n                textAlign=\"center\"\r\n              >\r\n                Add New Client\r\n              </Typography>\r\n              <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                <section>\r\n                  <form onSubmit={submitHandler} id=\"create_client\">\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Email</label>\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        required\r\n                        ref={emailInputRef}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">First Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"fname\"\r\n                        name=\"name\"\r\n                        required\r\n                        ref={fnameInputRef}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Last Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"text\"\r\n                        name=\"lname\"\r\n                        required\r\n                        ref={lnameInputRef}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"phone\">Phone Number</label>\r\n                      <input\r\n                        type=\"phone\"\r\n                        id=\"phone\"\r\n                        name=\"phone\"\r\n                        required\r\n                        ref={phoneNumberInputRef}\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginTop: \"5vh\",\r\n                      }}\r\n                    >\r\n                      <Button type=\"submit\" variant=\"light\">\r\n                        Add New Client\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                </section>\r\n              </Typography>\r\n            </Box>\r\n          </Modal>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddClientModel;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\ReservationTable.js",["746"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport DeleteReservation from \"./DeleteReservation\";\r\nimport UpdateReservation from \"./UpdateReservation\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\n\r\nconst ReservationTable = () => {\r\n  const [reservation, setReservationContext] = useContext(ReservationContext);\r\n  const [reservationId, setReservationId] = useState(\"\");\r\n  const [reservationUpdate, setReservationUpdate] = useState(false);\r\n\r\n  const newArrayRow = reservation.map((u) => {\r\n    return {\r\n      ...u,\r\n      id: u._id,\r\n    };\r\n  });\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n      setReservationContext(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    ReservationDetails();\r\n    setReservationUpdate(false);\r\n  }, [reservationUpdate]);\r\n\r\n  const onClick = () => {\r\n    ReservationDetails();\r\n  };\r\n\r\n  const columns = [\r\n    { field: \"client_email\", headerName: \"Client\", flex: 2 },\r\n    { field: \"service_type\", headerName: \"Service Type\", flex: 2 },\r\n    { field: \"stylist_email\", headerName: \"Stylist\", flex: 2 },\r\n    { field: \"reservation_date\", headerName: \"Date\", flex: 2 },\r\n    { field: \"reservation_time\", headerName: \"Time\", flex: 2 },\r\n    { field: \"reservation_status\", headerName: \"Status\", flex: 2 },\r\n    {\r\n      field: \"Action\",\r\n      headerName: \"Action\",\r\n      flex: 1,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setReservationId(params.row.id);\r\n            }}\r\n            style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n          >\r\n            <UpdateReservation\r\n              reservationId={reservationId}\r\n              onUpdateReservationData={setReservationUpdate}\r\n            />\r\n            <DeleteReservation\r\n              reservationId={reservationId}\r\n              onClick={onClick}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <Row\r\n        style={{\r\n          width: \"100%\",\r\n          marginTop: \"2vh\",\r\n        }}\r\n      >\r\n        <DataGrid\r\n          rows={newArrayRow}\r\n          columns={columns}\r\n          autoHeight\r\n          hideFooter\r\n          disableColumnMenu\r\n        />\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ReservationTable;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\AddReservation.js",["747","748","749"],"import React, { useRef, useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./AddReservation.module.css\";\r\nimport { service_type, timeArray } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport moment from \"moment\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst AddReservationModel = () => {\r\n  const currentDate = new Date();\r\n  currentDate.setDate(currentDate.getDate() - 0);\r\n\r\n  const formatOne = \"YYYY-MM-DD\";\r\n\r\n  const [reservation, setReservationContext] = useContext(ReservationContext);\r\n\r\n  const [clients, setClients] = useState([]);\r\n\r\n  const [onChangeDate, setChangeDate] = useState(\"\");\r\n  const [onChangeTime, setChangeTime] = useState(\"\");\r\n\r\n  const [availablestylist, setAvailableStylist] = useState([]);\r\n\r\n  const [reservationsearchvalue, setReservationSearchValue] = useState(\"\");\r\n  let replaceSearchValue = reservationsearchvalue.replace(/\\s+/g, \"\");\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const clientInputRef = useRef();\r\n  const serviceTypeInputRef = useRef();\r\n  const stylistInputRef = useRef();\r\n  const reservationDateInputRef = useRef();\r\n  const reservationTimeInputRef = useRef();\r\n\r\n  const onSubmitForm = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredClient = clientInputRef.current.value;\r\n    const enteredService = serviceTypeInputRef.current.value;\r\n    const enteredStylist = stylistInputRef.current.value;\r\n    const enteredDate = reservationDateInputRef.current.value;\r\n    const enteredTime = reservationTimeInputRef.current.value;\r\n\r\n    try {\r\n      const response = await ReservationService.reservationCreate(\r\n        enteredClient,\r\n        enteredService,\r\n        enteredStylist,\r\n        enteredDate,\r\n        enteredTime\r\n      );\r\n\r\n      ReservationDetails();\r\n      NotificationManager.success(\r\n        \"Reservation success added\",\r\n        \"Success\",\r\n        \"Close after 15000ms\",\r\n        10000000000\r\n      );\r\n      handleClose();\r\n      return response;\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"Reservation cannot be duplicate\",\r\n        \"error\",\r\n        \"Close after 15000ms\",\r\n        10000000000\r\n      );\r\n    }\r\n  };\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const AvailableStylsitDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationStylistSearch(\r\n        onChangeDate,\r\n        onChangeTime\r\n      );\r\n\r\n      setAvailableStylist(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (onChangeDate && onChangeTime) {\r\n      AvailableStylsitDetails();\r\n    }\r\n  }, [onChangeDate, onChangeTime]);\r\n\r\n  const ReservationDetailSearch = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationSearch(\r\n        replaceSearchValue\r\n      );\r\n\r\n      setReservationContext(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n\r\n      setReservationContext(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (replaceSearchValue.length > 0) {\r\n      ReservationDetailSearch();\r\n    }\r\n  }, [replaceSearchValue]);\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n  }, []);\r\n\r\n  return (\r\n    <Container className=\"mt-3\">\r\n      <Row>\r\n        <Col sm={4}>\r\n          <InputGroup className=\"mb-3\">\r\n            <Form.Control\r\n              placeholder=\"Search here\"\r\n              aria-label=\"Search here\"\r\n              aria-describedby=\"basic-addon2\"\r\n              onChange={(e) => {\r\n                setReservationSearchValue(e.target.value);\r\n\r\n                if (e.target.value === \"\") {\r\n                  ReservationDetails();\r\n                }\r\n              }}\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col sm={8} style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n          <button onClick={handleOpen} className={classes.button}>\r\n            Add New\r\n          </button>\r\n          <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n          >\r\n            <Box className={classes.auth}>\r\n              <Typography\r\n                id=\"modal-modal-title\"\r\n                variant=\"h6\"\r\n                component=\"h2\"\r\n                textAlign=\"center\"\r\n              >\r\n                Add New Reservation\r\n              </Typography>\r\n              <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                <section>\r\n                  <form onSubmit={onSubmitForm}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Client</label>\r\n                      <select name=\"client\" required ref={clientInputRef}>\r\n                        <option value=\"\">Select Client </option>\r\n                        {clients.map((cli, index) => {\r\n                          return (\r\n                            <option key={cli.id} value={cli.email}>\r\n                              {cli.email}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Service Type</label>\r\n                      <select\r\n                        name=\"serviceType\"\r\n                        required\r\n                        ref={serviceTypeInputRef}\r\n                      >\r\n                        <option value=\"\">Select Service Type</option>\r\n                        {service_type.map((service, index) => {\r\n                          return (\r\n                            <option key={service.id} value={service.title}>\r\n                              {service.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"date\">Select Date</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        min={moment(currentDate).format(formatOne)}\r\n                        max=\"2024-09-09\"\r\n                        id=\"password\"\r\n                        required\r\n                        ref={reservationDateInputRef}\r\n                        onChange={(e) => {\r\n                          setChangeDate(e.target.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Select Time</label>\r\n                      <select\r\n                        name=\"time\"\r\n                        required\r\n                        ref={reservationTimeInputRef}\r\n                        onChange={(e) => {\r\n                          setChangeTime(e.target.value);\r\n                        }}\r\n                      >\r\n                        <option value=\"\">Select Time</option>\r\n                        {timeArray.map((time, index) => {\r\n                          return (\r\n                            <option key={time.id} value={time.time}>\r\n                              {time.time}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Stylist</label>\r\n                      <select name=\"stylist\" required ref={stylistInputRef}>\r\n                        <option value=\"\">Select Stylist</option>\r\n                        {availablestylist.map((x) => {\r\n                          return (\r\n                            <option key={x} value={x}>\r\n                              {x}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginTop: \"5vh\",\r\n                      }}\r\n                    >\r\n                      <Button type=\"submit\" variant=\"light\">\r\n                        Add Reservation\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                </section>\r\n              </Typography>\r\n            </Box>\r\n          </Modal>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddReservationModel;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\ReservationService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\PieChart.js",["750"],"import React, { useEffect, useState } from \"react\";\r\nimport { PieChart, Pie, Tooltip } from \"recharts\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nconst PieChartContent = () => {\r\n  const [row, setRow] = useState([]);\r\n\r\n  const newArray = row.map((u) => {\r\n    return {\r\n      ...u,\r\n      name: u.service_type,\r\n      value: 1000,\r\n    };\r\n  });\r\n\r\n  const completeReservation = async () => {\r\n    try {\r\n      const result = await ReservationService.completeReservation();\r\n\r\n      setRow(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    completeReservation();\r\n  }, []);\r\n\r\n  let hairCount = 0;\r\n  let makeUpCount = 0;\r\n  let facialCount = 0;\r\n\r\n  for (let i = 0; i < newArray.length; ++i) {\r\n    if (newArray[i].service_type === \"HairCut\") {\r\n      hairCount++;\r\n    } else if (newArray[i].service_type === \"MakeUp\") {\r\n      makeUpCount++;\r\n    } else if (newArray[i].service_type === \"Facial\") {\r\n      facialCount++;\r\n    }\r\n  }\r\n\r\n  const hair = {\r\n    label: \"HairCut\",\r\n    value: hairCount,\r\n  };\r\n\r\n  const makeup = {\r\n    label: \"MakeUp\",\r\n    value: makeUpCount,\r\n  };\r\n\r\n  const facial = {\r\n    label: \"Facial\",\r\n    value: facialCount,\r\n  };\r\n\r\n  let pieChatDataSet = [];\r\n  let hairObj = {};\r\n  let makeObj = {};\r\n  let facialObj = {};\r\n\r\n  hairObj[\"name\"] = hair.label;\r\n  hairObj[\"value\"] = hair.value;\r\n\r\n  makeObj[\"name\"] = makeup.label;\r\n  makeObj[\"value\"] = makeup.value;\r\n\r\n  facialObj[\"name\"] = facial.label;\r\n  facialObj[\"value\"] = facial.value;\r\n\r\n  pieChatDataSet.push(hairObj);\r\n  pieChatDataSet.push(makeObj);\r\n  pieChatDataSet.push(facialObj);\r\n\r\n  const COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\"];\r\n\r\n  return (\r\n    <Container>\r\n      <Row style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <PieChart width={400} height={400}>\r\n          <Pie\r\n            dataKey=\"value\"\r\n            isAnimationActive={true}\r\n            data={pieChatDataSet}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            outerRadius={140}\r\n            fill=\"#FFBB28\"\r\n            label\r\n          />\r\n\r\n          <Tooltip />\r\n        </PieChart>\r\n      </Row>\r\n      <Row>\r\n        <h6 style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          All reservation made verses completed reservations\r\n        </h6>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PieChartContent;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\BarChartContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\UserService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\StartingPage\\InviteNewUser.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\config\\constants.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\DeleteClient.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\services\\ClientService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\ClientPage\\UpdateClient.js",["751","752"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./UpdateClient.module.css\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport { Formik } from \"formik\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { ClientContext } from \"./../../store/client-context\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst UpdateClient = (props) => {\r\n  const [clients, setClients] = useContext(ClientContext);\r\n  props.onUpdateClientData(false);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    ClientDetailSearchID();\r\n  };\r\n\r\n  const [clientInfo, setClientInfo] = useState({\r\n    email: \"\",\r\n    fname: \"\",\r\n    lname: \"\",\r\n    phone_number: \"\",\r\n  });\r\n\r\n  const onSubmitForm = async (values) => {\r\n    try {\r\n      const result = await ClientService.clientUpdate(\r\n        props.clientId,\r\n        props.clientEmail,\r\n        values.fname,\r\n        values.lname,\r\n        values.phone_number,\r\n        values.email\r\n      );\r\n\r\n      ClientDetails();\r\n      props.onUpdateClientData(true);\r\n      NotificationManager.success(\r\n        \"Client Success Update\",\r\n        \"Success\",\r\n        \"Close after 25000ms\",\r\n        10000000000\r\n      );\r\n      handleClose();\r\n      return result;\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"Cannot update , Already have an appointment\",\r\n        \"error\",\r\n        \"Close after 15000ms\",\r\n        10000000000\r\n      );\r\n    }\r\n  };\r\n\r\n  const ClientDetailSearchID = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetailsID(props.clientId);\r\n\r\n      const info = {};\r\n\r\n      const cliInfo = result;\r\n\r\n      info.email = cliInfo.email;\r\n      info.fname = cliInfo.fname;\r\n      info.lname = cliInfo.lname;\r\n      info.phone_number = cliInfo.phone_number;\r\n\r\n      setClientInfo(info);\r\n    } catch (err) {\r\n      throw Error(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.clientId === \"\") {\r\n    } else {\r\n      ClientDetailSearchID();\r\n    }\r\n  }, [props.clientId]);\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n      setClients(result);\r\n    } catch (err) {\r\n      throw Error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <FontAwesomeIcon\r\n        icon={faPen}\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={handleOpen}\r\n      />\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Update Client\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                  email: clientInfo.email,\r\n                  fname: clientInfo.fname,\r\n                  lname: clientInfo.lname,\r\n                  phone_number: clientInfo.phone_number,\r\n                }}\r\n                onSubmit={onSubmitForm}\r\n              >\r\n                {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Email</label>\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.email}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"fname\">First Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"fname\"\r\n                        name=\"fname\"\r\n                        required\r\n                        value={values.fname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Last Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"text\"\r\n                        name=\"lname\"\r\n                        required\r\n                        value={values.lname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"phonenumber\">Phone Number</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"phone_number\"\r\n                        name=\"phone_number\"\r\n                        required\r\n                        value={values.phone_number}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginTop: \"5vh\",\r\n                      }}\r\n                    >\r\n                      <Button\r\n                        disabled={isSubmitting}\r\n                        type=\"submit\"\r\n                        variant=\"light\"\r\n                      >\r\n                        Update Client\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateClient;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\UpdateReservation.js",["753","754","755"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./UpdateReservation.module.css\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { service_type, timeArray, status } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { Formik } from \"formik\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { UserService } from \"./../../services/UserService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport moment from \"moment\";\r\n\r\nconst UpdateReservation = (props) => {\r\n  const currentDate = new Date();\r\n  currentDate.setDate(currentDate.getDate() - 0);\r\n  const formatOne = \"YYYY-MM-DD\";\r\n\r\n  const [onChangeDate, setChangeDate] = useState(\"\");\r\n  const [onChangeTime, setChangeTime] = useState(\"\");\r\n  const [availablestylist, setAvailableStylist] = useState([]);\r\n\r\n  const [setReservationContext] = useContext(ReservationContext);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    ReservationDetailSearchID();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    ReservationDetailSearchID();\r\n    ReservationDetails();\r\n  };\r\n\r\n  const [clients, setClients] = useState([]);\r\n\r\n  const [users, setUser] = useState([]);\r\n\r\n  const [reservationInfo, setReservationInfo] = useState({\r\n    client_email: \"\",\r\n    service_type: \"\",\r\n    stylist_email: \"\",\r\n    reservation_date: \"\",\r\n    reservation_time: \"\",\r\n    reservation_status: \"\",\r\n  });\r\n\r\n  const ReservationDetailSearchID = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationIDDetailsID(\r\n        props.reservationId\r\n      );\r\n\r\n      const info = {};\r\n\r\n      const reservationInfo = result;\r\n\r\n      info.client_email = reservationInfo.client_email;\r\n      info.service_type = reservationInfo.service_type;\r\n      info.stylist_email = reservationInfo.stylist_email;\r\n      info.reservation_date = reservationInfo.reservation_date;\r\n      info.reservation_time = reservationInfo.reservation_time;\r\n      info.reservation_status = reservationInfo.reservation_status;\r\n\r\n      setChangeDate(reservationInfo.reservation_date);\r\n      setChangeTime(reservationInfo.reservation_time);\r\n\r\n      setReservationInfo(info);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const UserDetails = async () => {\r\n    try {\r\n      const result = await UserService.userDetails();\r\n\r\n      setUser(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const onSubmitForm = (values) => {\r\n    try {\r\n      ReservationService.reservationUpdate(\r\n        props.reservationId,\r\n        values.client_email,\r\n        values.service_type,\r\n        values.stylist_email,\r\n        onChangeDate,\r\n        onChangeTime,\r\n        values.reservation_status\r\n      );\r\n\r\n      ReservationDetails();\r\n      props.onUpdateReservationData();\r\n      NotificationManager.success(\r\n        \"Reservation Success Update\",\r\n        \"Success\",\r\n        \"Close after 15000ms\",\r\n        10000000000\r\n      );\r\n      handleClose();\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        \"Reservation Update Failed\",\r\n        \"error\",\r\n        \"Close after 15000ms\",\r\n        10000000000\r\n      );\r\n    }\r\n  };\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n\r\n      setReservationContext(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n    UserDetails();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.reservationId) {\r\n      ReservationDetailSearchID();\r\n    }\r\n  }, [props.reservationId]);\r\n\r\n  const AvailableStylsitDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationStylistSearch(\r\n        onChangeDate,\r\n        onChangeTime\r\n      );\r\n\r\n      setAvailableStylist(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (onChangeDate && onChangeTime) {\r\n      AvailableStylsitDetails();\r\n    }\r\n  }, [onChangeDate, onChangeTime]);\r\n\r\n  return (\r\n    <Container>\r\n      <FontAwesomeIcon\r\n        icon={faPen}\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={handleOpen}\r\n      />\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Update Reservation\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                  client_email: reservationInfo.client_email,\r\n                  service_type: reservationInfo.service_type,\r\n                  stylist_email: reservationInfo.stylist_email,\r\n                  reservation_date: reservationInfo.reservation_date,\r\n                  reservation_time: reservationInfo.reservation_time,\r\n                  reservation_status: reservationInfo.reservation_status,\r\n                }}\r\n                onSubmit={onSubmitForm}\r\n                // innerRef={formRef}\r\n              >\r\n                {({ values, handleChange, handleBlur, handleSubmit }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Client</label>\r\n                      <select\r\n                        name=\"client_email\"\r\n                        className=\"form-control\"\r\n                        id=\"selectClient\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.client_email}\r\n                      >\r\n                        <option value={\"\"}>Select Client</option>\r\n                        {clients.map((cli, index) => {\r\n                          return (\r\n                            <option key={cli._id} value={cli.email}>\r\n                              {cli.email}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Service Type</label>\r\n                      <select\r\n                        name=\"service_type\"\r\n                        className=\"form-control\"\r\n                        id=\"selectservice\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.service_type}\r\n                      >\r\n                        {service_type.map((service, index) => {\r\n                          return (\r\n                            <option key={service.id} value={service.title}>\r\n                              {service.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Date</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        id=\"date_id\"\r\n                        name=\"reservation_date\"\r\n                        min={moment(currentDate).format(formatOne)}\r\n                        required\r\n                        value={onChangeDate}\r\n                        onBlur={handleBlur}\r\n                        onChange={(e) => {\r\n                          setChangeDate(e.target.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Time</label>\r\n                      <select\r\n                        name=\"reservation_time\"\r\n                        className=\"form-control\"\r\n                        id=\"reservation_time_id\"\r\n                        required\r\n                        onBlur={handleBlur}\r\n                        value={onChangeTime}\r\n                        onChange={(e) => {\r\n                          setChangeTime(e.target.value);\r\n                        }}\r\n                      >\r\n                        {timeArray.map((time, index) => {\r\n                          return (\r\n                            <option key={time.id} value={time.time}>\r\n                              {time.time}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Stylist</label>\r\n                      <select\r\n                        name=\"stylist_email\"\r\n                        className=\"form-control\"\r\n                        id=\"stylist_id\"\r\n                        required\r\n                        value={values.stylist_email}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                      >\r\n                        <option value={values.stylist_email}>\r\n                          {values.stylist_email}\r\n                        </option>\r\n                        {availablestylist.map((x) => {\r\n                          return (\r\n                            <option key={x} value={x}>\r\n                              {x}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Status</label>\r\n                      <select\r\n                        name=\"reservation_status\"\r\n                        className=\"form-control\"\r\n                        id=\"reservation_status_id\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.reservation_status}\r\n                      >\r\n                        {status.map((stat, index) => {\r\n                          return (\r\n                            <option key={stat.id} value={stat.title}>\r\n                              {stat.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                      <Button variant=\"light\" type=\"submit\">\r\n                        Update Reservation\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateReservation;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Reservation\\DeleteReservation.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\data.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\UI_Improve\\src\\components\\Layout\\Sidebar.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\store\\user-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\pages\\AdminPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\MyProfile\\MyProfile.js",["756"],"import { useRef, useContext, useState, useEffect } from \"react\";\r\nimport classes from \"./../Profile/ProfileForm.module.css\";\r\nimport { UserService } from \"./../../services/UserService\";\r\nimport AuthContext from \"./../../store/auth-context\";\r\nimport * as Yup from \"yup\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { Formik } from \"formik\";\r\n\r\nconst MyProfileForm = () => {\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  const formRef = useRef();\r\n\r\n  const onSubmitForm = async (values) => {\r\n    try {\r\n      const result = await UserService.userUpdate(\r\n        authCtx.userId,\r\n        values.email,\r\n        values.fname,\r\n        values.lname\r\n      );\r\n      UserDetailSearchID();\r\n      return result;\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const [userInfo, setUserInfo] = useState({\r\n    email: \"\",\r\n    fname: \"\",\r\n    lname: \"\",\r\n  });\r\n\r\n  const UserDetailSearchID = async () => {\r\n    try {\r\n      const result = await UserService.userDetailsID(authCtx.userId);\r\n\r\n      const info = {};\r\n\r\n      const cliInfo = result;\r\n\r\n      info.email = cliInfo.email;\r\n      info.fname = cliInfo.fname;\r\n      info.lname = cliInfo.lname;\r\n\r\n      setUserInfo(info);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    UserDetailSearchID();\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Formik\r\n        enableReinitialize={true}\r\n        initialValues={{\r\n          email: userInfo.email,\r\n          fname: userInfo.fname,\r\n          lname: userInfo.lname,\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n          fname: Yup.string().required(\"Required\"),\r\n          lname: Yup.string().required(\"Required\"),\r\n        })}\r\n        onSubmit={onSubmitForm}\r\n        innerRef={formRef}\r\n      >\r\n        {({\r\n          errors,\r\n          handleBlur,\r\n          handleChange,\r\n          touched,\r\n          values,\r\n          handleSubmit,\r\n        }) => (\r\n          <form\r\n            className={classes.form}\r\n            onSubmit={handleSubmit}\r\n            id=\"updatePassword\"\r\n          >\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"new-password\">Email</label>\r\n              <input\r\n                name=\"email\"\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                id=\"id\"\r\n                placeholder=\"Email\"\r\n                required\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.email}\r\n              />\r\n            </div>\r\n            <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n              {touched.email && errors.email}\r\n            </div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"new-password\">First Name</label>\r\n              <input\r\n                name=\"fname\"\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"id\"\r\n                placeholder=\"Fname\"\r\n                required\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.fname}\r\n              />\r\n            </div>\r\n            <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n              {touched.fname && errors.fname}\r\n            </div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"new-password\">Last Name</label>\r\n              <input\r\n                name=\"lname\"\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"id\"\r\n                placeholder=\"Lname\"\r\n                required\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.lname}\r\n              />\r\n            </div>\r\n            <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n              {touched.lname && errors.lname}\r\n            </div>\r\n            <div\r\n              className={classes.action}\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"5vh\",\r\n              }}\r\n            >\r\n              <button>Update Profile</button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MyProfileForm;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Layout\\Sidebar.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Calender\\CalenderDragDrop.js",["757"],"import withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\r\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\r\nimport React, { useEffect, useState, useContext } from \"react\";\r\nimport classes from \"./CalenderContent.module.css\";\r\nimport { Calendar, dateFnsLocalizer } from \"react-big-calendar\";\r\nimport format from \"date-fns/format\";\r\nimport parse from \"date-fns/parse\";\r\nimport startOfWeek from \"date-fns/startOfWeek\";\r\nimport min from \"date-fns/min\";\r\nimport getDay from \"date-fns/getDay\";\r\nimport enUS from \"date-fns/locale/en-US\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport moment from \"moment\";\r\nimport { DATE_FORMAT, CURRENT_DATE } from \"./../../config/constants\";\r\n\r\nconst DnDCalendar = withDragAndDrop(Calendar);\r\n\r\nconst locales = {\r\n  \"en-US\": enUS,\r\n};\r\n\r\nconst localizer = dateFnsLocalizer({\r\n  format,\r\n  parse,\r\n  startOfWeek,\r\n  getDay,\r\n  locales,\r\n  min,\r\n});\r\n\r\nconst CalenderDragDrop = () => {\r\n  const [setReservationContext] = useContext(ReservationContext);\r\n  const [reservationDetails, setReservationDetails] = useState([]);\r\n\r\n  const [reservation, setReservationBoolean] = useState(false);\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n\r\n      setReservationDetails(result);\r\n      setReservationContext(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    ReservationDetails();\r\n    setReservationBoolean(false);\r\n  }, [reservation]);\r\n\r\n  const DnDCalendarFormatData = reservationDetails.map((reservation) => {\r\n    return {\r\n      ...reservation,\r\n      id: reservation._id,\r\n      title:\r\n        reservation.service_type +\r\n        \" : \" +\r\n        reservation.reservation_time +\r\n        \" : \" +\r\n        reservation.stylist_email,\r\n      start: new Date(reservation.reservation_date),\r\n      end: new Date(reservation.reservation_date),\r\n    };\r\n  });\r\n\r\n  const moveEvent = ({\r\n    event,\r\n    start,\r\n    // end,\r\n    isAllDay: droppedOnAllDaySlot = false,\r\n  }) => {\r\n    if (start >= CURRENT_DATE) {\r\n      onSubmitForm(\r\n        event.id,\r\n        moment(start).format(DATE_FORMAT),\r\n        event.reservation_time,\r\n        event.stylist_email,\r\n        event.client_email,\r\n        event.service_type,\r\n        event.reservation_status\r\n      );\r\n    } else {\r\n      NotificationManager.error(\r\n        \"Cannot update to a previous date.\",\r\n        \"error\",\r\n        \"Close after 3000ms\",\r\n        3000\r\n      );\r\n    }\r\n  };\r\n\r\n  const onSubmitForm = async (\r\n    id,\r\n    start,\r\n    reservation_time,\r\n    stylist_email,\r\n    client_email,\r\n    service_type,\r\n    reservation_status\r\n  ) => {\r\n    try {\r\n      await ReservationService.dragReservationUpdate(\r\n        id,\r\n        start,\r\n        reservation_time,\r\n        stylist_email,\r\n        client_email,\r\n        service_type,\r\n        reservation_status\r\n      );\r\n      setReservationBoolean(true);\r\n      ReservationDetails();\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className={classes.starting}>\r\n      <Row>\r\n        <div className={classes.maincontent}>\r\n          <DnDCalendar\r\n            localizer={localizer}\r\n            events={DnDCalendarFormatData}\r\n            draggableAccessor={(event) => true}\r\n            startAccessor=\"start\"\r\n            endAccessor=\"end\"\r\n            style={{ height: \"75vh\", maxWidth: \"100%\" }}\r\n            resizable={false}\r\n            onEventDrop={moveEvent}\r\n          />\r\n        </div>\r\n      </Row>\r\n      {/* <NotificationContainer /> */}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CalenderDragDrop;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Admin\\AdminPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Admin\\AdminTable.js",["758"],"import React, { useEffect, useContext } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { UserService } from \"./../../services/UserService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { UserContext } from \"./../../store/user-context\";\r\n\r\nconst AdminTable = () => {\r\n  const [useres, setUsers] = useContext(UserContext);\r\n\r\n  const newArrayRow = useres.map((u) => {\r\n    return {\r\n      ...u,\r\n      id: u._id,\r\n    };\r\n  });\r\n\r\n  const userDetails = async () => {\r\n    try {\r\n      const result = await UserService.userDetails();\r\n      setUsers(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    userDetails();\r\n  }, []);\r\n\r\n  const columns = [\r\n    {\r\n      field: \"fname\",\r\n      headerName: \"First Name\",\r\n      flex: 2,\r\n    },\r\n    { field: \"lname\", headerName: \"Last Name\", flex: 2 },\r\n    { field: \"email\", headerName: \"Email\", flex: 2 },\r\n  ];\r\n\r\n  return (\r\n    <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <Row style={{ width: \"100%\", marginTop: \"2vh\" }}>\r\n        <DataGrid\r\n          rows={newArrayRow}\r\n          columns={columns}\r\n          autoHeight\r\n          pageSize={5}\r\n          rowsPerPageOptions={[5]}\r\n        />\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AdminTable;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\test-porpose-fe\\src\\components\\Admin\\InviteUser.js",["759","760"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { UserService } from \"./../../services/UserService\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { UserContext } from \"./../../store/user-context\";\r\n\r\nconst InviteUser = () => {\r\n  const [users, setUsers] = useContext(UserContext);\r\n\r\n  const [searchvalue, setSearchValue] = useState(\"\");\r\n\r\n  let replaceSearchValue = searchvalue.replace(/\\s+/g, \"\");\r\n\r\n  const UserDetailSearch = async () => {\r\n    try {\r\n      const result = await UserService.userSearch(replaceSearchValue);\r\n      setUsers(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (replaceSearchValue.length > 0) {\r\n      UserDetailSearch();\r\n    }\r\n  }, [replaceSearchValue]);\r\n\r\n  const UserDetails = async () => {\r\n    try {\r\n      const result = await UserService.userDetails();\r\n      setUsers(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"mt-3\">\r\n        <Col sm={4}>\r\n          <InputGroup className=\"mb-3\">\r\n            <Form.Control\r\n              placeholder=\"Search here\"\r\n              aria-label=\"Search here\"\r\n              aria-describedby=\"basic-addon2\"\r\n              onChange={(e) => {\r\n                setSearchValue(e.target.value);\r\n                if (e.target.value === \"\") {\r\n                  UserDetails();\r\n                }\r\n              }}\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col sm={8} style={{ display: \"flex\", justifyContent: \"end\" }}></Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default InviteUser;\r\n","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\index.js",[],["761","762"],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\App.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\store\\auth-context.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\store\\user-context.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\store\\client-context.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\store\\reservation-context.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\pages\\HomePage.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\pages\\AuthPage.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\pages\\ReservationPage.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\pages\\ClientPage.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\pages\\CalenderPage.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\pages\\AdminPage.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Layout\\Sidebar.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Layout\\Layout.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Profile\\UserProfile.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\MyProfile\\MyProfile.js",["763"],"import { useRef, useContext, useState, useEffect } from \"react\";\r\nimport classes from \"./../Profile/ProfileForm.module.css\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport { UserService } from \"./../../services/UserService\";\r\nimport AuthContext from \"./../../store/auth-context\";\r\nimport * as Yup from \"yup\";\r\nimport { NotificationContainer } from \"react-notifications\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { Formik } from \"formik\";\r\n\r\nconst MyProfileForm = () => {\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  const formRef = useRef();\r\n\r\n  const onSubmitForm = async (values) => {\r\n    try {\r\n      const result = await UserService.userUpdate(\r\n        authCtx.userId,\r\n        values.email,\r\n        values.fname,\r\n        values.lname\r\n      );\r\n      UserDetailSearchID();\r\n      return result;\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const [userInfo, setUserInfo] = useState({\r\n    email: \"\",\r\n    fname: \"\",\r\n    lname: \"\",\r\n  });\r\n\r\n  const UserDetailSearchID = async () => {\r\n    try {\r\n      const result = await UserService.userDetailsID(authCtx.userId);\r\n\r\n      const info = {};\r\n\r\n      const cliInfo = result;\r\n\r\n      info.email = cliInfo.email;\r\n      info.fname = cliInfo.fname;\r\n      info.lname = cliInfo.lname;\r\n\r\n      setUserInfo(info);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    UserDetailSearchID();\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Formik\r\n        enableReinitialize={true}\r\n        initialValues={{\r\n          email: userInfo.email,\r\n          fname: userInfo.fname,\r\n          lname: userInfo.lname,\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n          fname: Yup.string().required(\"Required\"),\r\n          lname: Yup.string().required(\"Required\"),\r\n        })}\r\n        onSubmit={onSubmitForm}\r\n        innerRef={formRef}\r\n      >\r\n        {({\r\n          errors,\r\n          handleBlur,\r\n          handleChange,\r\n          touched,\r\n          values,\r\n          handleSubmit,\r\n        }) => (\r\n          <form\r\n            className={classes.form}\r\n            onSubmit={handleSubmit}\r\n            id=\"updatePassword\"\r\n          >\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"new-password\">Email</label>\r\n              <input\r\n                name=\"email\"\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                id=\"id\"\r\n                placeholder=\"Email\"\r\n                required\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.email}\r\n              />\r\n            </div>\r\n            <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n              {touched.email && errors.email}\r\n            </div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"new-password\">First Name</label>\r\n              <input\r\n                name=\"fname\"\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"id\"\r\n                placeholder=\"Fname\"\r\n                required\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.fname}\r\n              />\r\n            </div>\r\n            <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n              {touched.fname && errors.fname}\r\n            </div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"new-password\">Last Name</label>\r\n              <input\r\n                name=\"lname\"\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"id\"\r\n                placeholder=\"Lname\"\r\n                required\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.lname}\r\n              />\r\n            </div>\r\n            <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n              {touched.lname && errors.lname}\r\n            </div>\r\n            <div\r\n              className={classes.action}\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"5vh\",\r\n              }}\r\n            >\r\n              <button>Update Profile</button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n      <NotificationContainer />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MyProfileForm;\r\n","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Auth\\SignUp.js",["764"],"import { useRef, useContext, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport AuthContext from \"../../store/auth-context\";\nimport classes from \"./AuthForm.module.css\";\nimport { MainUserService } from \"./../../services/AuthService\";\nimport { UserService } from \"./../../services/UserService\";\nimport { NotificationContainer } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Button from \"react-bootstrap/Button\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Container from \"react-bootstrap/Container\";\n\nconst SignUp = () => {\n  const history = useHistory();\n  const params = useParams();\n\n  const formRef = useRef();\n\n  const authCtx = useContext(AuthContext);\n\n  const onSubmitForm = async (values) => {\n    try {\n      const result = await MainUserService.signUpUser(\n        params.token,\n        values.email,\n        values.fname,\n        values.password\n      );\n\n      authCtx.login(result.token, result.usetId);\n      history.replace(\"/\");\n    } catch (err) {\n      return err;\n    }\n  };\n\n  const [formContentShow, setFormContentShow] = useState(false);\n  const [contentShow, setContentShow] = useState(false);\n\n  const findUser = async () => {\n    try {\n      const response = await UserService.findUser(params.email);\n\n      if (response) {\n        setFormContentShow(true);\n      } else {\n        setContentShow(true);\n      }\n    } catch (err) {\n      return err;\n    }\n  };\n\n  useEffect(() => {\n    findUser();\n  }, [params.email]);\n\n  return (\n    <Container>\n      <h1\n        className={classes.auth_error}\n        style={{ textAlign: \"center\" }}\n        hidden={contentShow}\n      >\n        Alredy SignUp\n      </h1>\n      <section className={classes.auth} hidden={formContentShow}>\n        <h1>Sign Up</h1>\n        <Formik\n          enableReinitialize={true}\n          initialValues={{\n            email: params.email,\n            fname: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n          }}\n          validationSchema={Yup.object().shape({\n            fname: Yup.string().required(\"Required\"),\n            password: Yup.string()\n              .required(\"Required\")\n              .min(6, \"password must have at least 6 characters\")\n              .max(25, \"password must have less than 25 characters\"),\n            confirmPassword: Yup.string().when(\"password\", {\n              is: (val) => (val && val.length > 0 ? true : false),\n              then: Yup.string().oneOf(\n                [Yup.ref(\"password\")],\n                \"Both password need to be the same\"\n              ),\n            }),\n          })}\n          onSubmit={onSubmitForm}\n          innerRef={formRef}\n        >\n          {({\n            errors,\n            handleBlur,\n            handleChange,\n            touched,\n            values,\n            handleSubmit,\n          }) => (\n            <form onSubmit={handleSubmit}>\n              <div className={classes.control}>\n                <label htmlFor=\"email\">Your Email</label>\n                <input\n                  name=\"email\"\n                  type=\"email\"\n                  className=\"form-control\"\n                  id=\"emai_id\"\n                  required\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                  disabled\n                />\n              </div>\n              <div className={classes.control}>\n                <label htmlFor=\"text\">Your First Name</label>\n                <input\n                  name=\"fname\"\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"id\"\n                  placeholder=\"First Name\"\n                  required\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.fname}\n                />\n              </div>\n              <div style={{ color: \"red\", fontSize: \"12px\" }}>\n                {touched.fname && errors.fname}\n              </div>\n              <div className={classes.control}>\n                <label htmlFor=\"password\">Your Password</label>\n                <input\n                  name=\"password\"\n                  type=\"password\"\n                  className=\"form-control\"\n                  id=\"id\"\n                  placeholder=\"Password\"\n                  required\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                />\n              </div>\n              <div style={{ color: \"red\", fontSize: \"12px\" }}>\n                {touched.password && errors.password}\n              </div>\n              <div className={classes.control}>\n                <label htmlFor=\"new-password\">Confirm Password</label>\n                <input\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  className=\"form-control\"\n                  id=\"id\"\n                  placeholder=\"Confirm Password\"\n                  required\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.confirmPassword}\n                />\n              </div>\n              <div style={{ color: \"red\", fontSize: \"12px\" }}>\n                {touched.confirmPassword && errors.confirmPassword}\n              </div>\n\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  marginTop: \"5vh\",\n                }}\n              >\n                <Button variant=\"light\" type=\"submit\">\n                  User SignUp\n                </Button>\n              </div>\n            </form>\n          )}\n        </Formik>\n        <NotificationContainer />\n      </section>\n    </Container>\n  );\n};\n\nexport default SignUp;\n","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Auth\\AuthForm.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Layout\\MainNavigation.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Profile\\ProfileForm.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationPageContent.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientPageContent.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\StartingPage\\StartingPageContent.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Admin\\AdminPageContent.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Calender\\CalenderDragDrop.js",["765"],"import withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\r\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\r\nimport React, { useEffect, useState, useContext } from \"react\";\r\nimport classes from \"./CalenderContent.module.css\";\r\nimport { Calendar, dateFnsLocalizer } from \"react-big-calendar\";\r\nimport format from \"date-fns/format\";\r\nimport parse from \"date-fns/parse\";\r\nimport startOfWeek from \"date-fns/startOfWeek\";\r\nimport min from \"date-fns/min\";\r\nimport getDay from \"date-fns/getDay\";\r\nimport enUS from \"date-fns/locale/en-US\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport {\r\n  NotificationManager,\r\n  NotificationContainer,\r\n} from \"react-notifications\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport moment from \"moment\";\r\nimport { DATE_FORMAT, CURRENT_DATE } from \"./../../config/constants\";\r\n\r\nconst DnDCalendar = withDragAndDrop(Calendar);\r\n\r\nconst locales = {\r\n  \"en-US\": enUS,\r\n};\r\n\r\nconst localizer = dateFnsLocalizer({\r\n  format,\r\n  parse,\r\n  startOfWeek,\r\n  getDay,\r\n  locales,\r\n  min,\r\n});\r\n\r\nconst CalenderDragDrop = () => {\r\n  const [setReservationContext] = useContext(ReservationContext);\r\n  const [reservationDetails, setReservationDetails] = useState([]);\r\n\r\n  const [reservation, setReservationBoolean] = useState(false);\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n\r\n      setReservationDetails(result);\r\n      setReservationContext(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    ReservationDetails();\r\n    setReservationBoolean(false);\r\n  }, [reservation]);\r\n\r\n  const DnDCalendarFormatData = reservationDetails.map((reservation) => {\r\n    return {\r\n      ...reservation,\r\n      id: reservation._id,\r\n      title:\r\n        reservation.service_type +\r\n        \" : \" +\r\n        reservation.reservation_time +\r\n        \" : \" +\r\n        reservation.stylist_email,\r\n      start: new Date(reservation.reservation_date),\r\n      end: new Date(reservation.reservation_date),\r\n    };\r\n  });\r\n\r\n  const moveEvent = ({\r\n    event,\r\n    start,\r\n    // end,\r\n    isAllDay: droppedOnAllDaySlot = false,\r\n  }) => {\r\n    if (start >= CURRENT_DATE) {\r\n      onSubmitForm(\r\n        event.id,\r\n        moment(start).format(DATE_FORMAT),\r\n        event.reservation_time,\r\n        event.stylist_email,\r\n        event.client_email,\r\n        event.service_type,\r\n        event.reservation_status\r\n      );\r\n    } else {\r\n      NotificationManager.error(\r\n        \"Cannot update to a previous date.\",\r\n        \"error\",\r\n        \"Close after 3000ms\",\r\n        3000\r\n      );\r\n    }\r\n  };\r\n\r\n  const onSubmitForm = async (\r\n    id,\r\n    start,\r\n    reservation_time,\r\n    stylist_email,\r\n    client_email,\r\n    service_type,\r\n    reservation_status\r\n  ) => {\r\n    try {\r\n      await ReservationService.dragReservationUpdate(\r\n        id,\r\n        start,\r\n        reservation_time,\r\n        stylist_email,\r\n        client_email,\r\n        service_type,\r\n        reservation_status\r\n      );\r\n      setReservationBoolean(true);\r\n      ReservationDetails();\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className={classes.starting}>\r\n      <Row>\r\n        <div className={classes.maincontent}>\r\n          <DnDCalendar\r\n            localizer={localizer}\r\n            events={DnDCalendarFormatData}\r\n            draggableAccessor={(event) => true}\r\n            startAccessor=\"start\"\r\n            endAccessor=\"end\"\r\n            style={{ height: \"75vh\", maxWidth: \"100%\" }}\r\n            resizable={false}\r\n            onEventDrop={moveEvent}\r\n          />\r\n        </div>\r\n      </Row>\r\n      <NotificationContainer />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CalenderDragDrop;\r\n","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\services\\UserService.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\services\\AuthService.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\StartingPage\\InviteNewUser.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\ClientPage\\AddClientModel.js",["766"],"import React, { useRef, useState, useEffect, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./AddClient.module.css\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\n// import \"react-notifications/lib/notifications.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { PHONE_REGEX } from \"./../../config/constants\";\r\nimport ClientContext from \"./../../store/client-context\";\r\n\r\nconst AddClientModel = () => {\r\n  const formRef = useRef();\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const clientCtx = useContext(ClientContext);\r\n\r\n  const [searchvalue, setSearchValue] = useState(\"\");\r\n  const replaceSearchValue = searchvalue.replace(/\\s+/g, \"\");\r\n\r\n  // const [sortModel, setSortModel] = useState([\r\n  //   {\r\n  //     field: \"createdAt\",\r\n  //     sort: \"asc\",\r\n  //   },\r\n  // ]);\r\n\r\n  const sortModel = [\r\n    {\r\n      field: \"createdAt\",\r\n      sort: \"asc\",\r\n    },\r\n  ];\r\n\r\n  const onSubmitForm = async (values) => {\r\n    try {\r\n      const response = await ClientService.createClient(\r\n        values.email,\r\n        values.fname,\r\n        values.lname,\r\n        values.phonenumber\r\n      );\r\n\r\n      ClientDetails();\r\n      document.getElementById(\"create_client\").reset();\r\n      handleClose();\r\n      return response;\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ClientDetailSearch = async () => {\r\n    try {\r\n      const result = await ClientService.searchClient(replaceSearchValue);\r\n      clientCtx.getAllClientDetails(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails(\r\n        clientCtx.currentPage,\r\n        sortModel\r\n      );\r\n      clientCtx.getAllClientDetails(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (replaceSearchValue.length > 0) {\r\n      ClientDetailSearch();\r\n    }\r\n  }, [replaceSearchValue]);\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"mt-3\">\r\n        <Col sm={4}>\r\n          <InputGroup className=\"mb-3\">\r\n            <Form.Control\r\n              placeholder=\"Search here\"\r\n              aria-label=\"Search here\"\r\n              aria-describedby=\"basic-addon2\"\r\n              onChange={(e) => {\r\n                setSearchValue(e.target.value);\r\n                if (e.target.value === \"\") {\r\n                  ClientDetails();\r\n                }\r\n              }}\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col sm={8} style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n          <button onClick={handleOpen} className={classes.button}>\r\n            Add New\r\n          </button>\r\n\r\n          <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n          >\r\n            <Box className={classes.auth}>\r\n              <Typography\r\n                id=\"modal-modal-title\"\r\n                variant=\"h6\"\r\n                component=\"h2\"\r\n                textAlign=\"center\"\r\n              >\r\n                Add New Client\r\n              </Typography>\r\n              <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                <section>\r\n                  <Formik\r\n                    enableReinitialize={true}\r\n                    initialValues={{\r\n                      email: \"\",\r\n                      fname: \"\",\r\n                      lname: \"\",\r\n                      phonenumber: \"\",\r\n                    }}\r\n                    validationSchema={Yup.object().shape({\r\n                      email: Yup.string()\r\n                        .email(\"Invalid email\")\r\n                        .required(\"Required\"),\r\n                      fname: Yup.string().required(\"Required\"),\r\n                      lname: Yup.string().required(\"Required\"),\r\n                      phonenumber: Yup.string()\r\n                        .matches(PHONE_REGEX, \"Phone number is not valid\")\r\n                        .required(\"Phone Number is required\"),\r\n                    })}\r\n                    onSubmit={onSubmitForm}\r\n                    innerRef={formRef}\r\n                  >\r\n                    {({\r\n                      errors,\r\n                      handleBlur,\r\n                      handleChange,\r\n                      touched,\r\n                      values,\r\n                      handleSubmit,\r\n                    }) => (\r\n                      <form onSubmit={handleSubmit} id=\"create_client\">\r\n                        <div className={classes.control}>\r\n                          <label htmlFor=\"email\">Email</label>\r\n                          <input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            id=\"email_id\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.email}\r\n                          />\r\n                        </div>\r\n                        <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n                          {touched.email && errors.email}\r\n                        </div>\r\n                        <div className={classes.control}>\r\n                          <label htmlFor=\"text\">First Name</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"fname\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            id=\"fname_id\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.fname}\r\n                          />\r\n                        </div>\r\n                        <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n                          {touched.fname && errors.fname}\r\n                        </div>\r\n                        <div className={classes.control}>\r\n                          <label htmlFor=\"text\">Last Name</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"lname\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            id=\"lname_id\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.lname}\r\n                          />\r\n                        </div>\r\n                        <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n                          {touched.lname && errors.lname}\r\n                        </div>\r\n                        <div className={classes.control}>\r\n                          <label htmlFor=\"phone\">Phone Number</label>\r\n                          <input\r\n                            type=\"phone\"\r\n                            name=\"phonenumber\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            id=\"phone_id\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.phonenumber}\r\n                          />\r\n                        </div>\r\n                        <div style={{ color: \"red\", fontSize: \"12px\" }}>\r\n                          {touched.phonenumber && errors.phonenumber}\r\n                        </div>\r\n                        <div\r\n                          style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            marginTop: \"5vh\",\r\n                          }}\r\n                        >\r\n                          <Button type=\"submit\" variant=\"light\">\r\n                            Add New Client\r\n                          </Button>\r\n                        </div>\r\n                      </form>\r\n                    )}\r\n                  </Formik>\r\n                </section>\r\n              </Typography>\r\n            </Box>\r\n          </Modal>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddClientModel;\r\n","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationTable.js",["767"],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientTable.js",["768","769","770"],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\StartingPage\\BarChartContent.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Reservation\\AddReservation.js",["771","772","773","774"],"import React, { useRef, useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./AddReservation.module.css\";\r\nimport { service_type, timeArray } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport moment from \"moment\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { DATE_FORMAT, TIME_FORMAT } from \"./../../config/constants\";\r\n\r\nconst AddReservationModel = () => {\r\n  const currentDate = new Date();\r\n\r\n  const currentTime = moment(currentDate).format(TIME_FORMAT);\r\n  currentDate.setDate(currentDate.getDate() - 0);\r\n\r\n  const [reservation, setReservationContext] = useContext(ReservationContext);\r\n\r\n  const [clients, setClients] = useState([]);\r\n  const [onChangeDate, setChangeDate] = useState(\"\");\r\n  const [onChangeTime, setChangeTime] = useState(\"\");\r\n  const [availableStylist, setAvailableStylist] = useState([]);\r\n  const [reservationSearchValue, setReservationSearchValue] = useState(\"\");\r\n\r\n  let replaceSearchValue = reservationSearchValue.replace(/\\s+/g, \"\");\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const clientInputRef = useRef();\r\n  const serviceTypeInputRef = useRef();\r\n  const stylistInputRef = useRef();\r\n  const reservationDateInputRef = useRef();\r\n  const reservationTimeInputRef = useRef();\r\n\r\n  const onSubmitForm = async (event) => {\r\n    event.preventDefault();\r\n    const enteredClient = clientInputRef.current.value;\r\n    const enteredService = serviceTypeInputRef.current.value;\r\n    const enteredStylist = stylistInputRef.current.value;\r\n    const enteredDate = reservationDateInputRef.current.value;\r\n    const enteredTime = reservationTimeInputRef.current.value;\r\n\r\n    try {\r\n      const response = await ReservationService.reservationCreate(\r\n        enteredClient,\r\n        enteredService,\r\n        enteredStylist,\r\n        enteredDate,\r\n        enteredTime\r\n      );\r\n      ReservationDetails();\r\n      handleClose();\r\n      return response;\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const sortModel = [\r\n    {\r\n      field: \"createdAt\",\r\n      sort: \"asc\",\r\n    },\r\n  ];\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails(0, sortModel);\r\n      setClients(result.data);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const AvailableStylsitDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationStylistSearch(\r\n        onChangeDate,\r\n        onChangeTime\r\n      );\r\n      setAvailableStylist(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ReservationDetailSearch = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationSearch(\r\n        replaceSearchValue\r\n      );\r\n      setReservationContext(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n      setReservationContext(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (onChangeDate && onChangeTime) {\r\n      AvailableStylsitDetails();\r\n    }\r\n  }, [onChangeDate, onChangeTime]);\r\n\r\n  useEffect(() => {\r\n    if (replaceSearchValue.length > 0) {\r\n      ReservationDetailSearch();\r\n    }\r\n  }, [replaceSearchValue]);\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n  }, []);\r\n\r\n  return (\r\n    <Container className=\"mt-3\">\r\n      <Row>\r\n        <Col sm={4}>\r\n          <InputGroup className=\"mb-3\">\r\n            <Form.Control\r\n              placeholder=\"Search here\"\r\n              aria-label=\"Search here\"\r\n              aria-describedby=\"basic-addon2\"\r\n              onChange={(e) => {\r\n                setReservationSearchValue(e.target.value);\r\n                if (e.target.value === \"\") {\r\n                  ReservationDetails();\r\n                }\r\n              }}\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        <Col sm={8} style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n          <button onClick={handleOpen} className={classes.button}>\r\n            Add New\r\n          </button>\r\n          <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n          >\r\n            <Box className={classes.auth}>\r\n              <Typography\r\n                id=\"modal-modal-title\"\r\n                variant=\"h6\"\r\n                component=\"h2\"\r\n                textAlign=\"center\"\r\n              >\r\n                Add New Reservation\r\n              </Typography>\r\n              <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                <section>\r\n                  <form onSubmit={onSubmitForm}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Client</label>\r\n                      <select name=\"client\" required ref={clientInputRef}>\r\n                        <option value=\"\">Select Client </option>\r\n                        {clients.map((client, index) => {\r\n                          return (\r\n                            <option key={index} value={client.email}>\r\n                              {client.fname}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Service Type</label>\r\n                      <select\r\n                        name=\"serviceType\"\r\n                        required\r\n                        ref={serviceTypeInputRef}\r\n                      >\r\n                        <option value=\"\">Select Service Type</option>\r\n                        {service_type.map((service, index) => {\r\n                          return (\r\n                            <option key={index} value={service.title}>\r\n                              {service.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"date\">Select Date</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        min={moment(currentDate).format(DATE_FORMAT)}\r\n                        max=\"2024-09-09\"\r\n                        id=\"password\"\r\n                        required\r\n                        ref={reservationDateInputRef}\r\n                        onChange={(e) => {\r\n                          setChangeDate(e.target.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Select Time</label>\r\n                      <select\r\n                        name=\"time\"\r\n                        required\r\n                        ref={reservationTimeInputRef}\r\n                        onChange={(e) => {\r\n                          setChangeTime(e.target.value);\r\n                        }}\r\n                      >\r\n                        <option value=\"\">Select Time</option>\r\n                        {timeArray.map((timeData, index) => {\r\n                          return (\r\n                            <option\r\n                              key={index}\r\n                              value={timeData.time}\r\n                              disabled={\r\n                                parseInt(timeData.time) <\r\n                                  parseInt(currentTime) &&\r\n                                moment(currentDate).format(DATE_FORMAT) ===\r\n                                  onChangeDate\r\n                              }\r\n                            >\r\n                              {timeData.time}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    {/* <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Select Time</label>\r\n                      <select\r\n                        name=\"time\"\r\n                        required\r\n                        ref={reservationTimeInputRef}\r\n                        onChange={(e) => {\r\n                          setChangeTime(e.target.value);\r\n                        }}\r\n                      >\r\n                        <option value=\"\">Select Time</option>\r\n                        {timeArray.map((timeData, index) => {\r\n                          // currentDate === new Date(onChangeDate)\r\n                          return (\r\n                            <option\r\n                              key={index}\r\n                              value={timeData.time}\r\n                              disabled={\r\n                                parseInt(timeData.time) < parseInt(currentTime)\r\n                              }\r\n                            >\r\n                              {timeData.time}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div> */}\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Stylist</label>\r\n                      <select name=\"stylist\" required ref={stylistInputRef}>\r\n                        <option value=\"\">Select Stylist</option>\r\n                        {availableStylist.map((stylist, index) => {\r\n                          return (\r\n                            <option key={index} value={stylist}>\r\n                              {stylist}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginTop: \"5vh\",\r\n                      }}\r\n                    >\r\n                      <Button type=\"submit\" variant=\"light\">\r\n                        Add Reservation\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                </section>\r\n              </Typography>\r\n            </Box>\r\n          </Modal>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddReservationModel;\r\n","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\StartingPage\\PieChart.js",["775"],"import React, { useEffect, useState } from \"react\";\r\nimport { PieChart, Pie, Tooltip } from \"recharts\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nconst PieChartContent = () => {\r\n  const [completeReservation, setCompleteReservation] = useState([]);\r\n\r\n  const newArray = completeReservation.map((reservation) => {\r\n    return {\r\n      ...reservation,\r\n      name: reservation.service_type,\r\n      value: 1000,\r\n    };\r\n  });\r\n\r\n  const completeReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.completeReservation();\r\n      setCompleteReservation(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    completeReservationDetails();\r\n  }, []);\r\n\r\n  let hairCount = 0;\r\n  let makeUpCount = 0;\r\n  let facialCount = 0;\r\n\r\n  for (let i = 0; i < newArray.length; ++i) {\r\n    if (newArray[i].service_type === \"HairCut\") {\r\n      hairCount++;\r\n    } else if (newArray[i].service_type === \"MakeUp\") {\r\n      makeUpCount++;\r\n    } else if (newArray[i].service_type === \"Facial\") {\r\n      facialCount++;\r\n    }\r\n  }\r\n\r\n  const hair = {\r\n    label: \"HairCut\",\r\n    value: hairCount,\r\n  };\r\n\r\n  const makeup = {\r\n    label: \"MakeUp\",\r\n    value: makeUpCount,\r\n  };\r\n\r\n  const facial = {\r\n    label: \"Facial\",\r\n    value: facialCount,\r\n  };\r\n\r\n  let pieChatDataSet = [];\r\n  let hairObj = {};\r\n  let makeObj = {};\r\n  let facialObj = {};\r\n\r\n  hairObj[\"name\"] = hair.label;\r\n  hairObj[\"value\"] = hair.value;\r\n\r\n  makeObj[\"name\"] = makeup.label;\r\n  makeObj[\"value\"] = makeup.value;\r\n\r\n  facialObj[\"name\"] = facial.label;\r\n  facialObj[\"value\"] = facial.value;\r\n\r\n  pieChatDataSet.push(hairObj);\r\n  pieChatDataSet.push(makeObj);\r\n  pieChatDataSet.push(facialObj);\r\n\r\n  console.log(newArray.length);\r\n\r\n  const [dataAvailable, setDataAvalible] = useState(false);\r\n\r\n  // if (newArray.length > 0) {\r\n  //   setDataAvalible(true);\r\n  // } else {\r\n  //   setDataAvalible(false);\r\n  // }\r\n\r\n  return (\r\n    <Container>\r\n      <div>\r\n        {dataAvailable ? <button>true</button> : <button>false</button>}\r\n      </div>\r\n\r\n      <Row style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <PieChart width={400} height={400}>\r\n          <Pie\r\n            dataKey=\"value\"\r\n            isAnimationActive={true}\r\n            data={pieChatDataSet}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            outerRadius={140}\r\n            fill=\"#FFBB28\"\r\n            label\r\n          />\r\n\r\n          <Tooltip />\r\n        </PieChart>\r\n      </Row>\r\n      <Row>\r\n        <h6 style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          All reservation made verses completed reservations\r\n        </h6>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PieChartContent;\r\n","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Admin\\AdminTable.js",["776"],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Admin\\InviteUser.js",["777","778"],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\services\\ReservationService.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\config\\constants.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Reservation\\DeleteReservation.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\services\\ClientService.js",["779"],"import axios from \"axios\";\r\nimport { API_ORIGIN } from \"../config/constants\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport ClientContext from \"./../store/client-context\";\r\n\r\nexport class ClientService {\r\n  static createClient = async (\r\n    enteredEmail,\r\n    enteredFname,\r\n    enteredLname,\r\n    enteredPhonenumber\r\n  ) => {\r\n    try {\r\n      let response = await axios({\r\n        method: \"post\",\r\n        baseURL: API_ORIGIN + \"/client\",\r\n        data: {\r\n          fname: enteredFname,\r\n          lname: enteredLname,\r\n          phone_number: enteredPhonenumber,\r\n          email: enteredEmail,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      if (response.data.success === true) {\r\n        NotificationManager.success(\r\n          response.data.message,\r\n          \"Success\",\r\n          \"Close after 3000ms\",\r\n          3000\r\n        );\r\n        let responseData = response.data.data;\r\n        return responseData;\r\n      }\r\n    } catch (err) {\r\n      var errorObject = err.response.data.error;\r\n      NotificationManager.error(\r\n        Object.values(errorObject)[0],\r\n        \"error\",\r\n        \"Close after 3000ms\",\r\n        3000\r\n      );\r\n      throw Error(err);\r\n    }\r\n  };\r\n\r\n  static clientDetails = async (page, setModel) => {\r\n    const SKIP = page * 5;\r\n    const LIMIT = 5;\r\n\r\n    const SORT_KEY = setModel[0].field;\r\n    const SORT_VALUE = setModel[0].sort;\r\n\r\n    try {\r\n      let response = await axios({\r\n        method: \"get\",\r\n        baseURL:\r\n          API_ORIGIN +\r\n          `/client/getAllClients/skip/${SKIP}/limit/${LIMIT}?sortBy=${SORT_KEY}:${SORT_VALUE}`,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      let clientDetail = response.data;\r\n      return clientDetail;\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        err.response.data.message,\r\n        \"error\",\r\n        \"Close after 3000ms\",\r\n        3000\r\n      );\r\n      throw Error(err);\r\n    }\r\n  };\r\n\r\n  static clientDetailsID = async (clientID) => {\r\n    try {\r\n      let response = await axios({\r\n        method: \"get\",\r\n        baseURL: API_ORIGIN + `/client/${clientID}`,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      let clientDetailByID = response.data.data;\r\n      return clientDetailByID;\r\n    } catch (err) {\r\n      throw Error(err);\r\n    }\r\n  };\r\n\r\n  static clientUpdate = async (\r\n    clientID,\r\n    enteredFname,\r\n    enteredLname,\r\n    enteredPhonenumber,\r\n    enteredEmail\r\n  ) => {\r\n    try {\r\n      let response = await axios({\r\n        method: \"put\",\r\n        baseURL: API_ORIGIN + `/client/${clientID}`,\r\n        data: {\r\n          fname: enteredFname,\r\n          lname: enteredLname,\r\n          phone_number: enteredPhonenumber,\r\n          email: enteredEmail,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      if (response.data.success === true) {\r\n        let responseData = response.data.data;\r\n        NotificationManager.success(\r\n          response.data.message,\r\n          \"Success\",\r\n          \"Close after 3000ms\",\r\n          3000\r\n        );\r\n        return responseData;\r\n      }\r\n    } catch (err) {\r\n      if (err.response.status === 400) {\r\n        NotificationManager.error(\r\n          err.response.data.message,\r\n          \"error\",\r\n          \"Close after 3000ms\",\r\n          3000\r\n        );\r\n        throw Error(err);\r\n      } else {\r\n        var errorObject = err.response.data.error;\r\n        NotificationManager.error(\r\n          Object.values(errorObject)[0],\r\n          \"error\",\r\n          \"Close after 3000ms\",\r\n          3000\r\n        );\r\n        throw Error(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  static clientDelete = async (clientID, clientEmail) => {\r\n    try {\r\n      let response = await axios({\r\n        method: \"delete\",\r\n        baseURL: API_ORIGIN + `/client/${clientID}`,\r\n        data: {\r\n          email: clientEmail,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      if (response.data.success === true) {\r\n        let responseData = response.data.data;\r\n        NotificationManager.success(\r\n          response.data.message,\r\n          \"Success\",\r\n          \"Close after 3000ms\",\r\n          3000\r\n        );\r\n        return responseData;\r\n      }\r\n    } catch (err) {\r\n      NotificationManager.error(\r\n        err.response.data.message,\r\n        \"error\",\r\n        \"Close after 3000ms\",\r\n        3000\r\n      );\r\n      throw Error(err);\r\n    }\r\n  };\r\n\r\n  static searchClient = async (key) => {\r\n    try {\r\n      let response = await axios({\r\n        method: \"get\",\r\n        baseURL: API_ORIGIN + `/client/search/${key}`,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      if (response.data.success === true) {\r\n        let clientDetailSearch = response.data;\r\n        return clientDetailSearch;\r\n      }\r\n    } catch (err) {\r\n      throw Error(err);\r\n    }\r\n  };\r\n}\r\n","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\Reservation\\UpdateReservation.js",["780","781","782"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./UpdateReservation.module.css\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { service_type, timeArray, status } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { Formik } from \"formik\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { ReservationContext } from \"./../../store/reservation-context\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport moment from \"moment\";\r\nimport {\r\n  DATE_FORMAT,\r\n  TIME_FORMAT,\r\n  CURRENT_DATE,\r\n} from \"./../../config/constants\";\r\n\r\nconst UpdateReservation = (props) => {\r\n  CURRENT_DATE.setDate(CURRENT_DATE.getDate() - 0);\r\n  const currentTime = moment(CURRENT_DATE).format(TIME_FORMAT);\r\n\r\n  const [onChangeDate, setChangeDate] = useState(\"\");\r\n  const [onChangeTime, setChangeTime] = useState(\"\");\r\n  const [availablestylist, setAvailableStylist] = useState([]);\r\n\r\n  const [setReservationContext] = useContext(ReservationContext);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    ReservationDetailSearchID();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    ReservationDetailSearchID();\r\n    ReservationDetails();\r\n  };\r\n\r\n  const [clients, setClients] = useState([]);\r\n\r\n  const [reservationInfo, setReservationInfo] = useState({\r\n    client_email: \"\",\r\n    service_type: \"\",\r\n    stylist_email: \"\",\r\n    reservation_date: \"\",\r\n    reservation_time: \"\",\r\n    reservation_status: \"\",\r\n  });\r\n\r\n  const ReservationDetailSearchID = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetailsID(\r\n        props.reservationId\r\n      );\r\n\r\n      const info = {};\r\n      const reservationInfo = result;\r\n\r\n      info.client_email = reservationInfo.client_email;\r\n      info.service_type = reservationInfo.service_type;\r\n      info.stylist_email = reservationInfo.stylist_email;\r\n      info.reservation_date = reservationInfo.reservation_date;\r\n      info.reservation_time = reservationInfo.reservation_time;\r\n      info.reservation_status = reservationInfo.reservation_status;\r\n\r\n      setChangeDate(reservationInfo.reservation_date);\r\n      setChangeTime(reservationInfo.reservation_time);\r\n      setReservationInfo(info);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const sortModel = [\r\n    {\r\n      field: \"createdAt\",\r\n      sort: \"asc\",\r\n    },\r\n  ];\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails(0, sortModel);\r\n\r\n      setClients(result.data);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const onSubmitForm = (values) => {\r\n    try {\r\n      ReservationService.reservationUpdate(\r\n        props.reservationId,\r\n        values.client_email,\r\n        values.service_type,\r\n        values.stylist_email,\r\n        onChangeDate,\r\n        onChangeTime,\r\n        values.reservation_status\r\n      );\r\n\r\n      ReservationDetails();\r\n      props.onUpdateReservationData();\r\n      handleClose();\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n      setReservationContext(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const AvailableStylsitDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationStylistSearch(\r\n        onChangeDate,\r\n        onChangeTime\r\n      );\r\n      setAvailableStylist(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.reservationId) {\r\n      ReservationDetailSearchID();\r\n    }\r\n  }, [props.reservationId]);\r\n\r\n  useEffect(() => {\r\n    if (onChangeDate && onChangeTime) {\r\n      AvailableStylsitDetails();\r\n    }\r\n  }, [onChangeDate, onChangeTime]);\r\n\r\n  return (\r\n    <Container>\r\n      <FontAwesomeIcon\r\n        icon={faPen}\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={handleOpen}\r\n      />\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Update Reservation\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                  client_email: reservationInfo.client_email,\r\n                  service_type: reservationInfo.service_type,\r\n                  stylist_email: reservationInfo.stylist_email,\r\n                  reservation_date: reservationInfo.reservation_date,\r\n                  reservation_time: reservationInfo.reservation_time,\r\n                  reservation_status: reservationInfo.reservation_status,\r\n                }}\r\n                onSubmit={onSubmitForm}\r\n              >\r\n                {({ values, handleChange, handleBlur, handleSubmit }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Client</label>\r\n                      <select\r\n                        name=\"client_email\"\r\n                        className=\"form-control\"\r\n                        id=\"selectClient\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.client_email}\r\n                      >\r\n                        <option value={\"\"}>Select Client</option>\r\n                        {clients.map((cli, index) => {\r\n                          return (\r\n                            <option key={cli._id} value={cli.email}>\r\n                              {cli.email}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Service Type</label>\r\n                      <select\r\n                        name=\"service_type\"\r\n                        className=\"form-control\"\r\n                        id=\"selectservice\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.service_type}\r\n                      >\r\n                        {service_type.map((service, index) => {\r\n                          return (\r\n                            <option key={service.id} value={service.title}>\r\n                              {service.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Date</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        id=\"date_id\"\r\n                        name=\"reservation_date\"\r\n                        min={moment(CURRENT_DATE).format(DATE_FORMAT)}\r\n                        required\r\n                        value={onChangeDate}\r\n                        onBlur={handleBlur}\r\n                        onChange={(e) => {\r\n                          setChangeDate(e.target.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Time</label>\r\n                      <select\r\n                        name=\"reservation_time\"\r\n                        className=\"form-control\"\r\n                        id=\"reservation_time_id\"\r\n                        required\r\n                        onBlur={handleBlur}\r\n                        value={onChangeTime}\r\n                        onChange={(e) => {\r\n                          setChangeTime(e.target.value);\r\n                        }}\r\n                      >\r\n                        {timeArray.map((time, index) => {\r\n                          return (\r\n                            <option\r\n                              key={time.id}\r\n                              value={time.time}\r\n                              disabled={\r\n                                parseInt(time.time) < parseInt(currentTime) &&\r\n                                moment(CURRENT_DATE).format(DATE_FORMAT) ===\r\n                                  onChangeDate\r\n                              }\r\n                            >\r\n                              {time.time}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Stylist</label>\r\n                      <select\r\n                        name=\"stylist_email\"\r\n                        className=\"form-control\"\r\n                        id=\"stylist_id\"\r\n                        required\r\n                        value={values.stylist_email}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                      >\r\n                        <option value={values.stylist_email}>\r\n                          {values.stylist_email}\r\n                        </option>\r\n                        {availablestylist.map((stylist) => {\r\n                          return (\r\n                            <option key={stylist} value={stylist}>\r\n                              {stylist}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Status</label>\r\n                      <select\r\n                        name=\"reservation_status\"\r\n                        className=\"form-control\"\r\n                        id=\"reservation_status_id\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.reservation_status}\r\n                      >\r\n                        {status.map((stat, index) => {\r\n                          return (\r\n                            <option key={stat.id} value={stat.title}>\r\n                              {stat.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                      <Button variant=\"light\" type=\"submit\">\r\n                        Update Reservation\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateReservation;\r\n","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\ClientPage\\UpdateClient.js",["783"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./UpdateClient.module.css\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { Formik } from \"formik\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ClientContext from \"./../../store/client-context\";\r\n\r\nconst UpdateClient = (props) => {\r\n  const clientCtx = useContext(ClientContext);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    ClientDetailSearchID();\r\n  };\r\n\r\n  const [clientInfo, setClientInfo] = useState({\r\n    email: \"\",\r\n    fname: \"\",\r\n    lname: \"\",\r\n    phone_number: \"\",\r\n  });\r\n\r\n  const onSubmitForm = async (values) => {\r\n    try {\r\n      const result = await ClientService.clientUpdate(\r\n        props.clientId,\r\n        values.fname,\r\n        values.lname,\r\n        values.phone_number,\r\n        values.email\r\n      );\r\n      ClientDetails();\r\n      handleClose();\r\n      return result;\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  const ClientDetailSearchID = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetailsID(props.clientId);\r\n\r\n      const info = {};\r\n\r\n      const cliInfo = result;\r\n\r\n      info.email = cliInfo.email;\r\n      info.fname = cliInfo.fname;\r\n      info.lname = cliInfo.lname;\r\n      info.phone_number = cliInfo.phone_number;\r\n\r\n      setClientInfo(info);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.clientId === \"\") {\r\n    } else {\r\n      ClientDetailSearchID();\r\n    }\r\n  }, [props.clientId]);\r\n\r\n  const sortModel = [\r\n    {\r\n      field: \"createdAt\",\r\n      sort: \"asc\",\r\n    },\r\n  ];\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails(\r\n        clientCtx.currentPage,\r\n        sortModel\r\n      );\r\n      clientCtx.getAllClientDetails(result);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <FontAwesomeIcon\r\n        icon={faPen}\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={handleOpen}\r\n      />\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Update Client\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                  email: clientInfo.email,\r\n                  fname: clientInfo.fname,\r\n                  lname: clientInfo.lname,\r\n                  phone_number: clientInfo.phone_number,\r\n                }}\r\n                onSubmit={onSubmitForm}\r\n              >\r\n                {({\r\n                  values,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Email</label>\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.email}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"fname\">First Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"fname\"\r\n                        name=\"fname\"\r\n                        required\r\n                        value={values.fname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Last Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"text\"\r\n                        name=\"lname\"\r\n                        required\r\n                        value={values.lname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"phonenumber\">Phone Number</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"phone_number\"\r\n                        name=\"phone_number\"\r\n                        required\r\n                        value={values.phone_number}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        marginTop: \"5vh\",\r\n                      }}\r\n                    >\r\n                      <Button\r\n                        disabled={isSubmitting}\r\n                        type=\"submit\"\r\n                        variant=\"light\"\r\n                      >\r\n                        Update Client\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateClient;\r\n","E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\components\\ClientPage\\DeleteClient.js",[],"E:\\React\\React 2nd Assigment\\FrontEnd_Waruna\\src\\data.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\index.js",[],["784","785"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\App.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\auth-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\user-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\client-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\reservation-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\ClientPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\CalenderPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\AuthPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\AdminPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\ReservationPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\HomePage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\MyProfile\\MyProfile.js",["786"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\Sidebar.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Profile\\UserProfile.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\Layout.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Auth\\SignUp.js",["787"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Auth\\AuthForm.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Profile\\ProfileForm.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\MainNavigation.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Admin\\AdminPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Calender\\CalenderDragDrop.js",["788"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\StartingPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\UserService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\AuthService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\AddClientModel.js",["789"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientTable.js",["790","791","792"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\InviteNewUser.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Admin\\AdminTable.js",["793"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Admin\\InviteUser.js",["794","795"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\ReservationService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationTable.js",["796"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\AddReservation.js",["797","798","799"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\BarChartContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\PieChart.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\config\\constants.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\ClientService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\DeleteClient.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\UpdateClient.js",["800"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\DeleteReservation.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\data.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\UpdateReservation.js",["801","802"],{"ruleId":"803","replacedBy":"804"},{"ruleId":"805","replacedBy":"806"},{"ruleId":"807","severity":1,"message":"808","line":34,"column":6,"nodeType":"809","endLine":34,"endColumn":25,"suggestions":"810"},{"ruleId":"811","severity":1,"message":"812","line":26,"column":10,"nodeType":"813","messageId":"814","endLine":26,"endColumn":21},{"ruleId":"807","severity":1,"message":"815","line":115,"column":6,"nodeType":"809","endLine":115,"endColumn":34,"suggestions":"816"},{"ruleId":"807","severity":1,"message":"817","line":121,"column":6,"nodeType":"809","endLine":121,"endColumn":26,"suggestions":"818"},{"ruleId":"807","severity":1,"message":"819","line":48,"column":6,"nodeType":"809","endLine":48,"endColumn":23,"suggestions":"820"},{"ruleId":"811","severity":1,"message":"821","line":86,"column":9,"nodeType":"813","messageId":"814","endLine":86,"endColumn":17},{"ruleId":"811","severity":1,"message":"822","line":118,"column":9,"nodeType":"813","messageId":"814","endLine":118,"endColumn":14},{"ruleId":"807","severity":1,"message":"823","line":73,"column":6,"nodeType":"809","endLine":73,"endColumn":26,"suggestions":"824"},{"ruleId":"807","severity":1,"message":"825","line":139,"column":6,"nodeType":"809","endLine":139,"endColumn":27,"suggestions":"826"},{"ruleId":"807","severity":1,"message":"815","line":145,"column":6,"nodeType":"809","endLine":145,"endColumn":34,"suggestions":"827"},{"ruleId":"807","severity":1,"message":"828","line":74,"column":6,"nodeType":"809","endLine":74,"endColumn":22,"suggestions":"829"},{"ruleId":"807","severity":1,"message":"830","line":55,"column":6,"nodeType":"809","endLine":55,"endColumn":20,"suggestions":"831"},{"ruleId":"803","replacedBy":"832"},{"ruleId":"805","replacedBy":"833"},{"ruleId":"811","severity":1,"message":"834","line":3,"column":10,"nodeType":"813","messageId":"814","endLine":3,"endColumn":20},{"ruleId":"811","severity":1,"message":"835","line":3,"column":22,"nodeType":"813","messageId":"814","endLine":3,"endColumn":26},{"ruleId":"811","severity":1,"message":"836","line":3,"column":28,"nodeType":"813","messageId":"814","endLine":3,"endColumn":36},{"ruleId":"811","severity":1,"message":"837","line":3,"column":38,"nodeType":"813","messageId":"814","endLine":3,"endColumn":45},{"ruleId":"811","severity":1,"message":"838","line":5,"column":8,"nodeType":"813","messageId":"814","endLine":5,"endColumn":15},{"ruleId":"811","severity":1,"message":"839","line":6,"column":8,"nodeType":"813","messageId":"814","endLine":6,"endColumn":16},{"ruleId":"811","severity":1,"message":"840","line":2,"column":8,"nodeType":"813","messageId":"814","endLine":2,"endColumn":15},{"ruleId":"807","severity":1,"message":"808","line":58,"column":6,"nodeType":"809","endLine":58,"endColumn":13,"suggestions":"841"},{"ruleId":"807","severity":1,"message":"819","line":36,"column":6,"nodeType":"809","endLine":36,"endColumn":20,"suggestions":"842"},{"ruleId":"811","severity":1,"message":"843","line":18,"column":10,"nodeType":"813","messageId":"814","endLine":18,"endColumn":17},{"ruleId":"807","severity":1,"message":"823","line":80,"column":6,"nodeType":"809","endLine":80,"endColumn":26,"suggestions":"844"},{"ruleId":"807","severity":1,"message":"808","line":33,"column":6,"nodeType":"809","endLine":33,"endColumn":25,"suggestions":"845"},{"ruleId":"811","severity":1,"message":"812","line":26,"column":10,"nodeType":"813","messageId":"814","endLine":26,"endColumn":21},{"ruleId":"807","severity":1,"message":"815","line":108,"column":6,"nodeType":"809","endLine":108,"endColumn":34,"suggestions":"846"},{"ruleId":"807","severity":1,"message":"817","line":132,"column":6,"nodeType":"809","endLine":132,"endColumn":26,"suggestions":"847"},{"ruleId":"811","severity":1,"message":"848","line":77,"column":9,"nodeType":"813","messageId":"814","endLine":77,"endColumn":15},{"ruleId":"811","severity":1,"message":"843","line":17,"column":10,"nodeType":"813","messageId":"814","endLine":17,"endColumn":17},{"ruleId":"807","severity":1,"message":"828","line":90,"column":6,"nodeType":"809","endLine":90,"endColumn":22,"suggestions":"849"},{"ruleId":"811","severity":1,"message":"850","line":45,"column":10,"nodeType":"813","messageId":"814","endLine":45,"endColumn":15},{"ruleId":"807","severity":1,"message":"825","line":144,"column":6,"nodeType":"809","endLine":144,"endColumn":27,"suggestions":"851"},{"ruleId":"807","severity":1,"message":"815","line":161,"column":6,"nodeType":"809","endLine":161,"endColumn":34,"suggestions":"852"},{"ruleId":"807","severity":1,"message":"853","line":55,"column":6,"nodeType":"809","endLine":55,"endColumn":8,"suggestions":"854"},{"ruleId":"807","severity":1,"message":"808","line":56,"column":6,"nodeType":"809","endLine":56,"endColumn":19,"suggestions":"855"},{"ruleId":"807","severity":1,"message":"856","line":29,"column":6,"nodeType":"809","endLine":29,"endColumn":8,"suggestions":"857"},{"ruleId":"811","severity":1,"message":"850","line":12,"column":10,"nodeType":"813","messageId":"814","endLine":12,"endColumn":15},{"ruleId":"807","severity":1,"message":"858","line":31,"column":6,"nodeType":"809","endLine":31,"endColumn":26,"suggestions":"859"},{"ruleId":"803","replacedBy":"860"},{"ruleId":"805","replacedBy":"861"},{"ruleId":"807","severity":1,"message":"853","line":57,"column":6,"nodeType":"809","endLine":57,"endColumn":8,"suggestions":"862"},{"ruleId":"807","severity":1,"message":"830","line":57,"column":6,"nodeType":"809","endLine":57,"endColumn":20,"suggestions":"863"},{"ruleId":"807","severity":1,"message":"808","line":59,"column":6,"nodeType":"809","endLine":59,"endColumn":19,"suggestions":"864"},{"ruleId":"807","severity":1,"message":"823","line":87,"column":6,"nodeType":"809","endLine":87,"endColumn":26,"suggestions":"865"},{"ruleId":"807","severity":1,"message":"808","line":34,"column":6,"nodeType":"809","endLine":34,"endColumn":25,"suggestions":"866"},{"ruleId":"807","severity":1,"message":"819","line":48,"column":6,"nodeType":"809","endLine":48,"endColumn":23,"suggestions":"867"},{"ruleId":"811","severity":1,"message":"821","line":86,"column":9,"nodeType":"813","messageId":"814","endLine":86,"endColumn":17},{"ruleId":"811","severity":1,"message":"822","line":118,"column":9,"nodeType":"813","messageId":"814","endLine":118,"endColumn":14},{"ruleId":"811","severity":1,"message":"812","line":25,"column":10,"nodeType":"813","messageId":"814","endLine":25,"endColumn":21},{"ruleId":"807","severity":1,"message":"815","line":121,"column":6,"nodeType":"809","endLine":121,"endColumn":34,"suggestions":"868"},{"ruleId":"807","severity":1,"message":"817","line":127,"column":6,"nodeType":"809","endLine":127,"endColumn":26,"suggestions":"869"},{"ruleId":"807","severity":1,"message":"819","line":131,"column":6,"nodeType":"809","endLine":131,"endColumn":8,"suggestions":"870"},{"ruleId":"811","severity":1,"message":"871","line":80,"column":25,"nodeType":"813","messageId":"814","endLine":80,"endColumn":40},{"ruleId":"807","severity":1,"message":"856","line":29,"column":6,"nodeType":"809","endLine":29,"endColumn":8,"suggestions":"872"},{"ruleId":"811","severity":1,"message":"850","line":12,"column":10,"nodeType":"813","messageId":"814","endLine":12,"endColumn":15},{"ruleId":"807","severity":1,"message":"858","line":31,"column":6,"nodeType":"809","endLine":31,"endColumn":26,"suggestions":"873"},{"ruleId":"811","severity":1,"message":"874","line":5,"column":8,"nodeType":"813","messageId":"814","endLine":5,"endColumn":21},{"ruleId":"807","severity":1,"message":"819","line":139,"column":6,"nodeType":"809","endLine":139,"endColumn":8,"suggestions":"875"},{"ruleId":"807","severity":1,"message":"825","line":145,"column":6,"nodeType":"809","endLine":145,"endColumn":27,"suggestions":"876"},{"ruleId":"807","severity":1,"message":"815","line":151,"column":6,"nodeType":"809","endLine":151,"endColumn":34,"suggestions":"877"},{"ruleId":"807","severity":1,"message":"828","line":73,"column":6,"nodeType":"809","endLine":73,"endColumn":22,"suggestions":"878"},{"ruleId":"803","replacedBy":"879"},{"ruleId":"805","replacedBy":"880"},{"ruleId":"807","severity":1,"message":"853","line":55,"column":6,"nodeType":"809","endLine":55,"endColumn":8,"suggestions":"881"},{"ruleId":"807","severity":1,"message":"830","line":55,"column":6,"nodeType":"809","endLine":55,"endColumn":20,"suggestions":"882"},{"ruleId":"807","severity":1,"message":"808","line":56,"column":6,"nodeType":"809","endLine":56,"endColumn":19,"suggestions":"883"},{"ruleId":"807","severity":1,"message":"823","line":73,"column":6,"nodeType":"809","endLine":73,"endColumn":26,"suggestions":"884"},{"ruleId":"807","severity":1,"message":"819","line":48,"column":6,"nodeType":"809","endLine":48,"endColumn":23,"suggestions":"885"},{"ruleId":"811","severity":1,"message":"821","line":86,"column":9,"nodeType":"813","messageId":"814","endLine":86,"endColumn":17},{"ruleId":"811","severity":1,"message":"822","line":118,"column":9,"nodeType":"813","messageId":"814","endLine":118,"endColumn":14},{"ruleId":"807","severity":1,"message":"856","line":29,"column":6,"nodeType":"809","endLine":29,"endColumn":8,"suggestions":"886"},{"ruleId":"811","severity":1,"message":"850","line":12,"column":10,"nodeType":"813","messageId":"814","endLine":12,"endColumn":15},{"ruleId":"807","severity":1,"message":"858","line":31,"column":6,"nodeType":"809","endLine":31,"endColumn":26,"suggestions":"887"},{"ruleId":"807","severity":1,"message":"808","line":34,"column":6,"nodeType":"809","endLine":34,"endColumn":25,"suggestions":"888"},{"ruleId":"811","severity":1,"message":"812","line":26,"column":10,"nodeType":"813","messageId":"814","endLine":26,"endColumn":21},{"ruleId":"807","severity":1,"message":"815","line":115,"column":6,"nodeType":"809","endLine":115,"endColumn":34,"suggestions":"889"},{"ruleId":"807","severity":1,"message":"817","line":121,"column":6,"nodeType":"809","endLine":121,"endColumn":26,"suggestions":"890"},{"ruleId":"807","severity":1,"message":"828","line":74,"column":6,"nodeType":"809","endLine":74,"endColumn":22,"suggestions":"891"},{"ruleId":"807","severity":1,"message":"825","line":139,"column":6,"nodeType":"809","endLine":139,"endColumn":27,"suggestions":"892"},{"ruleId":"807","severity":1,"message":"815","line":145,"column":6,"nodeType":"809","endLine":145,"endColumn":34,"suggestions":"893"},"no-native-reassign",["894"],"no-negated-in-lhs",["895"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ReservationDetails'. Either include it or remove the dependency array.","ArrayExpression",["896"],"no-unused-vars","'reservation' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'AvailableStylsitDetails'. Either include it or remove the dependency array.",["897"],"React Hook useEffect has a missing dependency: 'ReservationDetailSearch'. Either include it or remove the dependency array.",["898"],"React Hook useEffect has a missing dependency: 'ClientDetails'. Either include it or remove the dependency array.",["899"],"'columns1' is assigned a value but never used.","'rows1' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ClientDetailSearch'. Either include it or remove the dependency array.",["900"],"React Hook useEffect has a missing dependency: 'ReservationDetailSearchID'. Either include it or remove the dependency array.",["901"],["902"],"React Hook useEffect has a missing dependency: 'ClientDetailSearchID'. Either include it or remove the dependency array.",["903"],"React Hook useEffect has a missing dependency: 'findUser'. Either include it or remove the dependency array.",["904"],["894"],["895"],"'ProSidebar' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'SubMenu' is defined but never used.","'Sidebar' is defined but never used.","'HomePage' is defined but never used.","'classes' is defined but never used.",["905"],["906"],"'clients' is assigned a value but never used.",["907"],["908"],["909"],["910"],"'COLORS' is assigned a value but never used.",["911"],"'users' is assigned a value but never used.",["912"],["913"],"React Hook useEffect has a missing dependency: 'UserDetailSearchID'. Either include it or remove the dependency array.",["914"],["915"],"React Hook useEffect has a missing dependency: 'userDetails'. Either include it or remove the dependency array.",["916"],"React Hook useEffect has a missing dependency: 'UserDetailSearch'. Either include it or remove the dependency array.",["917"],["894"],["895"],["918"],["919"],["920"],["921"],["922"],["923"],["924"],["925"],["926"],"'setDataAvalible' is assigned a value but never used.",["927"],["928"],"'ClientContext' is defined but never used.",["929"],["930"],["931"],["932"],["894"],["895"],["933"],["934"],["935"],["936"],["937"],["938"],["939"],["940"],["941"],["942"],["943"],["944"],["945"],"no-global-assign","no-unsafe-negation",{"desc":"946","fix":"947"},{"desc":"948","fix":"949"},{"desc":"950","fix":"951"},{"desc":"952","fix":"953"},{"desc":"954","fix":"955"},{"desc":"956","fix":"957"},{"desc":"948","fix":"958"},{"desc":"959","fix":"960"},{"desc":"961","fix":"962"},{"desc":"963","fix":"964"},{"desc":"965","fix":"966"},{"desc":"954","fix":"967"},{"desc":"946","fix":"968"},{"desc":"948","fix":"969"},{"desc":"950","fix":"970"},{"desc":"959","fix":"971"},{"desc":"956","fix":"972"},{"desc":"948","fix":"973"},{"desc":"974","fix":"975"},{"desc":"976","fix":"977"},{"desc":"978","fix":"979"},{"desc":"980","fix":"981"},{"desc":"974","fix":"982"},{"desc":"961","fix":"983"},{"desc":"976","fix":"984"},{"desc":"954","fix":"985"},{"desc":"946","fix":"986"},{"desc":"952","fix":"987"},{"desc":"948","fix":"988"},{"desc":"950","fix":"989"},{"desc":"990","fix":"991"},{"desc":"978","fix":"992"},{"desc":"980","fix":"993"},{"desc":"990","fix":"994"},{"desc":"956","fix":"995"},{"desc":"948","fix":"996"},{"desc":"959","fix":"997"},{"desc":"974","fix":"998"},{"desc":"961","fix":"999"},{"desc":"976","fix":"1000"},{"desc":"954","fix":"1001"},{"desc":"952","fix":"1002"},{"desc":"978","fix":"1003"},{"desc":"980","fix":"1004"},{"desc":"946","fix":"1005"},{"desc":"948","fix":"1006"},{"desc":"950","fix":"1007"},{"desc":"959","fix":"1008"},{"desc":"956","fix":"1009"},{"desc":"948","fix":"1010"},"Update the dependencies array to be: [ReservationDetails, reservationUpdate]",{"range":"1011","text":"1012"},"Update the dependencies array to be: [AvailableStylsitDetails, onChangeDate, onChangeTime]",{"range":"1013","text":"1014"},"Update the dependencies array to be: [ReservationDetailSearch, replaceSearchValue]",{"range":"1015","text":"1016"},"Update the dependencies array to be: [ClientDetails, page, sortModel]",{"range":"1017","text":"1018"},"Update the dependencies array to be: [ClientDetailSearch, replaceSearchValue]",{"range":"1019","text":"1020"},"Update the dependencies array to be: [ReservationDetailSearchID, props.reservationId]",{"range":"1021","text":"1022"},{"range":"1023","text":"1014"},"Update the dependencies array to be: [ClientDetailSearchID, props.clientId]",{"range":"1024","text":"1025"},"Update the dependencies array to be: [findUser, params.email]",{"range":"1026","text":"1027"},"Update the dependencies array to be: [ReservationDetails, reser]",{"range":"1028","text":"1029"},"Update the dependencies array to be: [ClientDetails, clientUpdate]",{"range":"1030","text":"1031"},{"range":"1032","text":"1020"},{"range":"1033","text":"1012"},{"range":"1034","text":"1014"},{"range":"1035","text":"1016"},{"range":"1036","text":"1025"},{"range":"1037","text":"1022"},{"range":"1038","text":"1014"},"Update the dependencies array to be: [UserDetailSearchID]",{"range":"1039","text":"1040"},"Update the dependencies array to be: [ReservationDetails, reservation]",{"range":"1041","text":"1042"},"Update the dependencies array to be: [userDetails]",{"range":"1043","text":"1044"},"Update the dependencies array to be: [UserDetailSearch, replaceSearchValue]",{"range":"1045","text":"1046"},{"range":"1047","text":"1040"},{"range":"1048","text":"1027"},{"range":"1049","text":"1042"},{"range":"1050","text":"1020"},{"range":"1051","text":"1012"},{"range":"1052","text":"1018"},{"range":"1053","text":"1014"},{"range":"1054","text":"1016"},"Update the dependencies array to be: [ClientDetails]",{"range":"1055","text":"1056"},{"range":"1057","text":"1044"},{"range":"1058","text":"1046"},{"range":"1059","text":"1056"},{"range":"1060","text":"1022"},{"range":"1061","text":"1014"},{"range":"1062","text":"1025"},{"range":"1063","text":"1040"},{"range":"1064","text":"1027"},{"range":"1065","text":"1042"},{"range":"1066","text":"1020"},{"range":"1067","text":"1018"},{"range":"1068","text":"1044"},{"range":"1069","text":"1046"},{"range":"1070","text":"1012"},{"range":"1071","text":"1014"},{"range":"1072","text":"1016"},{"range":"1073","text":"1025"},{"range":"1074","text":"1022"},{"range":"1075","text":"1014"},[1159,1178],"[ReservationDetails, reservationUpdate]",[3723,3751],"[AvailableStylsitDetails, onChangeDate, onChangeTime]",[3866,3886],"[ReservationDetailSearch, replaceSearchValue]",[1252,1269],"[ClientDetails, page, sortModel]",[2193,2213],"[ClientDetailSearch, replaceSearchValue]",[4024,4045],"[ReservationDetailSearchID, props.reservationId]",[4159,4187],[1983,1999],"[ClientDetailSearchID, props.clientId]",[1429,1443],"[findUser, params.email]",[1762,1769],"[ReservationDetails, reser]",[1053,1067],"[ClientDetails, clientUpdate]",[2517,2537],[1148,1167],[3465,3493],[4036,4056],[2487,2503],[4218,4239],[4609,4637],[1314,1316],"[UserDetailSearchID]",[1816,1829],"[ReservationDetails, reservation]",[734,736],"[userDetails]",[979,999],"[UserDetailSearch, replaceSearchValue]",[1429,1431],[1542,1556],[1847,1860],[2438,2458],[1159,1178],[1252,1269],[3776,3804],[3919,3939],[3993,3995],"[ClientDetails]",[734,736],[979,999],[3968,3970],[4077,4098],[4212,4240],[1942,1958],[1314,1316],[1429,1443],[1816,1829],[2193,2213],[1252,1269],[734,736],[979,999],[1159,1178],[3723,3751],[3866,3886],[1983,1999],[4024,4045],[4159,4187]]