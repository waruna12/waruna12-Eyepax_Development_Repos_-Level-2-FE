[{"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\index.js":"1","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\App.js":"2","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\auth-context.js":"3","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\AuthPage.js":"4","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\ClientPage.js":"5","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\HomePage.js":"6","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\CalenderPage.js":"7","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\ReservationPage.js":"8","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\Layout.js":"9","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Profile\\UserProfile.js":"10","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Profile\\ProfileForm.js":"11","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\MainNavigation.js":"12","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Auth\\AuthForm.js":"13","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientPageContent.js":"14","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\StartingPageContent.js":"15","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Calender\\CalenderContent.js":"16","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationPageContent.js":"17","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\data.js":"18","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\PieChart.js":"19","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientTable.js":"20","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\AddClientModel.js":"21","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\BarChartContent.js":"22","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\InviteNewUser.js":"23","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\Slide.js":"24","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\AddReservation.js":"25","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationTable.js":"26","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\AuthService.js":"27","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\UpdateClient.js":"28","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\DeleteClient.js":"29","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\ClientService.js":"30","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\ReservationService.js":"31","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\DeleteReservation.js":"32","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\UpdateReservation.js":"33","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\config\\constants.js":"34","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\UserService.js":"35"},{"size":426,"mtime":1662016861918,"results":"36","hashOfConfig":"37"},{"size":1433,"mtime":1659002091644,"results":"38","hashOfConfig":"37"},{"size":958,"mtime":1659696943286,"results":"39","hashOfConfig":"37"},{"size":130,"mtime":1648643396000,"results":"40","hashOfConfig":"37"},{"size":174,"mtime":1658806940240,"results":"41","hashOfConfig":"37"},{"size":171,"mtime":1648643396000,"results":"42","hashOfConfig":"37"},{"size":170,"mtime":1658851812231,"results":"43","hashOfConfig":"37"},{"size":200,"mtime":1658834079878,"results":"44","hashOfConfig":"37"},{"size":246,"mtime":1648643396000,"results":"45","hashOfConfig":"37"},{"size":278,"mtime":1648643396000,"results":"46","hashOfConfig":"37"},{"size":755,"mtime":1659093126260,"results":"47","hashOfConfig":"37"},{"size":1393,"mtime":1658995830232,"results":"48","hashOfConfig":"37"},{"size":4940,"mtime":1659093160929,"results":"49","hashOfConfig":"37"},{"size":823,"mtime":1659064290113,"results":"50","hashOfConfig":"37"},{"size":651,"mtime":1659074002468,"results":"51","hashOfConfig":"37"},{"size":1842,"mtime":1662284730902,"results":"52","hashOfConfig":"37"},{"size":824,"mtime":1662310025721,"results":"53","hashOfConfig":"37"},{"size":2189,"mtime":1662349181098,"results":"54","hashOfConfig":"37"},{"size":1997,"mtime":1662358966720,"results":"55","hashOfConfig":"37"},{"size":2376,"mtime":1662310694377,"results":"56","hashOfConfig":"37"},{"size":4037,"mtime":1662009968391,"results":"57","hashOfConfig":"37"},{"size":2098,"mtime":1662358959301,"results":"58","hashOfConfig":"37"},{"size":2287,"mtime":1659092938108,"results":"59","hashOfConfig":"37"},{"size":1316,"mtime":1658995977236,"results":"60","hashOfConfig":"37"},{"size":6119,"mtime":1662309345295,"results":"61","hashOfConfig":"37"},{"size":3586,"mtime":1662310183719,"results":"62","hashOfConfig":"37"},{"size":1447,"mtime":1659060714268,"results":"63","hashOfConfig":"37"},{"size":5940,"mtime":1662195337432,"results":"64","hashOfConfig":"37"},{"size":2281,"mtime":1659101063584,"results":"65","hashOfConfig":"37"},{"size":2904,"mtime":1659100542628,"results":"66","hashOfConfig":"37"},{"size":3301,"mtime":1662229853418,"results":"67","hashOfConfig":"37"},{"size":2322,"mtime":1662300791899,"results":"68","hashOfConfig":"37"},{"size":10086,"mtime":1662275337072,"results":"69","hashOfConfig":"37"},{"size":56,"mtime":1658906277807,"results":"70","hashOfConfig":"37"},{"size":477,"mtime":1662212498692,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},"1k1wi1l",{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"75"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"75"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"75"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"75"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"75"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"75"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\index.js",["150"],"import ReactDOM from \"react-dom/client\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { AuthContextProvider } from \"./store/auth-context\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <AuthContextProvider>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </AuthContextProvider>\n);\n",["151","152"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\App.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\store\\auth-context.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\AuthPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\ClientPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\HomePage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\CalenderPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\pages\\ReservationPage.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\Layout.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Profile\\UserProfile.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Profile\\ProfileForm.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Layout\\MainNavigation.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Auth\\AuthForm.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\StartingPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Calender\\CalenderContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationPageContent.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\data.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\PieChart.js",["153","154","155"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\ClientTable.js",["156"],"import React, { useEffect, useState } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport DeleteClient from \"./DeleteClient\";\r\nimport UpdateClient from \"./UpdateClient\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\n\r\nconst ClientTable = (props) => {\r\n  const [row, setRow] = useState([]);\r\n\r\n  const [clientUpdate, setClientUpdate] = useState(false);\r\n\r\n  const newArray = row.map((u) => {\r\n    return {\r\n      ...u,\r\n\r\n      id: u._id,\r\n    };\r\n  });\r\n\r\n  const [clientId, setClientId] = useState(\"\");\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n\r\n      setRow(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  if (props.newClient == true) {\r\n    ClientDetails();\r\n  } else {\r\n    ClientDetails();\r\n  }\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n  }, [clientUpdate]);\r\n\r\n  const onClick = () => {\r\n    ClientDetails();\r\n  };\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n  }, []);\r\n\r\n  const columns = [\r\n    { field: \"fname\", headerName: \"First Name\", width: 150 },\r\n    { field: \"lname\", headerName: \"Last Name\", width: 150 },\r\n    { field: \"phone_number\", headerName: \"Phone Number\", width: 150 },\r\n    { field: \"email\", headerName: \"Email\", width: 200 },\r\n    {\r\n      field: \"Edit\",\r\n      headerName: \"Edit\",\r\n      width: 150,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setClientId(params.row.id);\r\n            }}\r\n          >\r\n            <UpdateClient\r\n              clientId={clientId}\r\n              onUpdateClientData={setClientUpdate}\r\n              onClick={onClick}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"Delete\",\r\n      headerName: \"Delete\",\r\n      width: 150,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setClientId(params.row.id);\r\n            }}\r\n          >\r\n            <DeleteClient clientId={clientId} onClick={onClick} />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          height: 300,\r\n          width: \"80%\",\r\n        }}\r\n      >\r\n        <DataGrid rows={newArray} columns={columns} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ClientTable;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\AddClientModel.js",["157"],"import React, { useRef, useState } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./AddClient.module.css\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\n\r\nconst AddClientModel = (props) => {\r\n  const [newclientadd, setNewClientAdded] = useState(false);\r\n\r\n  props.onSaveClientData(newclientadd);\r\n\r\n  const emailInputRef = useRef();\r\n  const fnameInputRef = useRef();\r\n  const lnameInputRef = useRef();\r\n  const phoneNumberInputRef = useRef();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const submitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredEmail = emailInputRef.current.value;\r\n    const enteredFname = fnameInputRef.current.value;\r\n    const enteredLname = lnameInputRef.current.value;\r\n    const enteredPhonenumber = phoneNumberInputRef.current.value;\r\n\r\n    try {\r\n      const response = await ClientService.clientCreate(\r\n        enteredEmail,\r\n        enteredFname,\r\n        enteredLname,\r\n        enteredPhonenumber\r\n      );\r\n\r\n      setNewClientAdded(true);\r\n      NotificationManager.success(\"Client Success Added\", \"Success\");\r\n      document.getElementById(\"create_client\").reset();\r\n      handleClose();\r\n    } catch (err) {\r\n      console.log(err);\r\n      NotificationManager.error(\"Client Added Faield\", \"error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleOpen} className={classes.button}>\r\n        Add New\r\n      </button>\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Add New Client\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <form onSubmit={submitHandler} id=\"create_client\">\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <input\r\n                    type=\"email\"\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    required\r\n                    ref={emailInputRef}\r\n                  />\r\n                </div>\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"text\">First Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"fname\"\r\n                    name=\"name\"\r\n                    required\r\n                    ref={fnameInputRef}\r\n                  />\r\n                </div>\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"text\">Last Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"text\"\r\n                    name=\"lname\"\r\n                    required\r\n                    ref={lnameInputRef}\r\n                  />\r\n                </div>\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"phone\">Phone Number</label>\r\n                  <input\r\n                    type=\"phone\"\r\n                    id=\"phone\"\r\n                    name=\"phone\"\r\n                    required\r\n                    ref={phoneNumberInputRef}\r\n                  />\r\n                </div>\r\n\r\n                <div className={classes.actions}>\r\n                  <button>Add New</button>\r\n                </div>\r\n              </form>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddClientModel;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\BarChartContent.js",["158","159","160"],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\InviteNewUser.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\StartingPage\\Slide.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\AddReservation.js",["161","162"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./AddReservation.module.css\";\r\nimport { service_type, timeArray } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport { UserService } from \"./../../services/UserService\";\r\n\r\nconst AddReservationModel = (props) => {\r\n  const [clients, setClients] = useState([]);\r\n\r\n  const [users, setUser] = useState([]);\r\n\r\n  const stylist = [\r\n    { id: \"1\", name: \"Ron Jesen\" },\r\n    { id: \"2\", name: \"Zamir Ahmed\" },\r\n  ];\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const clientInputRef = useRef();\r\n  const serviceTypeInputRef = useRef();\r\n  const stylistInputRef = useRef();\r\n  const reservationDateInputRef = useRef();\r\n  const reservationTimeInputRef = useRef();\r\n\r\n  const onSubmitForm = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredClient = clientInputRef.current.value;\r\n    const enteredService = serviceTypeInputRef.current.value;\r\n    const enteredStylist = stylistInputRef.current.value;\r\n    const enteredDate = reservationDateInputRef.current.value;\r\n    const enteredTime = reservationTimeInputRef.current.value;\r\n\r\n    try {\r\n      const response = await ReservationService.reservationCreate(\r\n        enteredClient,\r\n        enteredService,\r\n        enteredStylist,\r\n        enteredDate,\r\n        enteredTime\r\n      );\r\n\r\n      props.onSaveAddReservation(true);\r\n      NotificationManager.success(\"Reservation Success Added\", \"Success\");\r\n      handleClose();\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const UserDetails = async () => {\r\n    try {\r\n      const result = await UserService.userDetails();\r\n\r\n      setUser(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n    UserDetails();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleOpen} className={classes.button}>\r\n        Add New\r\n      </button>\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Add New Reservation\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <form onSubmit={onSubmitForm}>\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"email\">Client</label>\r\n                  <select name=\"client\" required ref={clientInputRef}>\r\n                    <option value=\"\">Select Client </option>\r\n                    {clients.map((cli, index) => {\r\n                      console.log(cli.id);\r\n                      return (\r\n                        <option key={cli.id} value={cli.fname}>\r\n                          {cli.fname} {cli.lname}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                </div>\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"password\">Service Type</label>\r\n                  <select name=\"serviceType\" required ref={serviceTypeInputRef}>\r\n                    <option value=\"\">Select Service Type</option>\r\n                    {service_type.map((service, index) => {\r\n                      return (\r\n                        <option key={service.id} value={service.title}>\r\n                          {service.title}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                </div>\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"password\">Stylist</label>\r\n                  <select name=\"stylist\" required ref={stylistInputRef}>\r\n                    <option value=\"\">Select Stylist</option>\r\n                    {users.map((sty, index) => {\r\n                      return (\r\n                        <option key={sty._id} value={sty.fname}>\r\n                          {sty.fname} {sty.lname}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                </div>\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"date\">Select Date</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    id=\"password\"\r\n                    required\r\n                    ref={reservationDateInputRef}\r\n                  />\r\n                </div>\r\n                <div className={classes.control}>\r\n                  <label htmlFor=\"password\">Select Time</label>\r\n                  <select name=\"time\" required ref={reservationTimeInputRef}>\r\n                    <option value=\"\">Select Time</option>\r\n                    {timeArray.map((time, index) => {\r\n                      return (\r\n                        <option key={time.id} value={time.time}>\r\n                          {time.time}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className={classes.actions}>\r\n                  <button>Reservation</button>\r\n                </div>\r\n              </form>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddReservationModel;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\ReservationTable.js",["163","164","165"],"import React, { useEffect, useState } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport DeleteReservation from \"./DeleteReservation\";\r\nimport UpdateReservation from \"./UpdateReservation\";\r\nimport { status } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\n\r\nconst ReservationTable = (props) => {\r\n  const [row, setRow] = useState([]);\r\n\r\n  const [reservationId, setReservationId] = useState(\"\");\r\n\r\n  const [reservation_state, setReservation] = useState(\"\");\r\n\r\n  const newArray = row.map((u) => {\r\n    return {\r\n      ...u,\r\n\r\n      id: u._id,\r\n    };\r\n  });\r\n\r\n  const ReservationDetails = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationDetails();\r\n\r\n      setRow(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  if (props.onAddReservation == true) {\r\n    ReservationDetails();\r\n  } else {\r\n    ReservationDetails();\r\n  }\r\n\r\n  useEffect(() => {\r\n    ReservationDetails();\r\n  }, [props.onAddReservation]);\r\n\r\n  const onClick = () => {\r\n    ReservationDetails();\r\n  };\r\n\r\n  const columns = [\r\n    { field: \"client\", headerName: \"Client\", width: 120 },\r\n    { field: \"service_type\", headerName: \"Service Type\", width: 150 },\r\n    { field: \"stylist\", headerName: \"Stylist\", width: 120 },\r\n    { field: \"reservation_date\", headerName: \"Date\", width: 150 },\r\n    { field: \"reservation_time\", headerName: \"Time\", width: 100 },\r\n    {\r\n      field: \"reservation_status\",\r\n      headerName: \"Status\",\r\n      width: 150,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setReservationId(params.row.id);\r\n            }}\r\n          >\r\n            <select\r\n              name=\"\"\r\n              required\r\n              value={params.row.reservation_status}\r\n              onChange={(e) => {\r\n                // console.log(e.target.value);\r\n                setReservation(e.target.value);\r\n                // onSubmitForm();\r\n              }}\r\n            >\r\n              <option value={\"\"}>select</option>\r\n\r\n              {status.map((sta, index) => {\r\n                return (\r\n                  <option key={sta.id} value={sta.title}>\r\n                    {sta.title}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"Edit\",\r\n      headerName: \"Edit\",\r\n      width: 100,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setReservationId(params.row.id);\r\n            }}\r\n          >\r\n            <UpdateReservation reservationId={reservationId} />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"Delete\",\r\n      headerName: \"Delete\",\r\n      width: 100,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              setReservationId(params.row.id);\r\n            }}\r\n          >\r\n            <DeleteReservation\r\n              reservationId={reservationId}\r\n              onClick={onClick}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          height: 300,\r\n          width: \"80%\",\r\n        }}\r\n      >\r\n        <DataGrid rows={newArray} columns={columns} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReservationTable;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\AuthService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\UpdateClient.js",["166","167"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./UpdateClient.module.css\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport { Formik } from \"formik\";\r\n\r\nconst UpdateClient = (props) => {\r\n  const [clientUpdate, setClientUpdate] = useState(false);\r\n\r\n  props.onUpdateClientData(clientUpdate);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const [clientInfo, setClientInfo] = useState({\r\n    email: \"\",\r\n    fname: \"\",\r\n    lname: \"\",\r\n    phone_number: \"\",\r\n  });\r\n\r\n  const onSubmitForm = (values) => {\r\n    try {\r\n      ClientService.clientUpdate(\r\n        props.clientId,\r\n        values.fname,\r\n        values.lname,\r\n        values.phone_number,\r\n        values.email\r\n      );\r\n      props.onClick();\r\n      setClientUpdate(true);\r\n      NotificationManager.success(\"Client Success Update\", \"Success\");\r\n\r\n      handleClose();\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const ClientDetailSearchID = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetailsID(props.clientId);\r\n\r\n      const info = {};\r\n\r\n      const cliInfo = result;\r\n\r\n      info.email = cliInfo.email;\r\n      info.fname = cliInfo.fname;\r\n      info.lname = cliInfo.lname;\r\n      info.phone_number = cliInfo.phone_number;\r\n\r\n      setClientInfo(info);\r\n      // setEmail(result.email);\r\n    } catch (err) {\r\n      // console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.clientId === \"\") {\r\n    } else {\r\n      ClientDetailSearchID();\r\n    }\r\n  }, [props.clientId]);\r\n\r\n  return (\r\n    <div>\r\n      <FontAwesomeIcon\r\n        icon={faPen}\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={handleOpen}\r\n      />\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Update Client\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                  email: clientInfo.email,\r\n                  fname: clientInfo.fname,\r\n                  lname: clientInfo.lname,\r\n                  phone_number: clientInfo.phone_number,\r\n                }}\r\n                onSubmit={onSubmitForm}\r\n                // innerRef={formRef}\r\n              >\r\n                {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                  /* and other goodies */\r\n                }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"email\">Email</label>\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.email}\r\n                      />\r\n                    </div>\r\n                    {/* {errors.email && touched.email && errors.email} */}\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"fname\">First Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"fname\"\r\n                        name=\"fname\"\r\n                        required\r\n                        value={values.fname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"password\">Last Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"text\"\r\n                        name=\"lname\"\r\n                        required\r\n                        value={values.lname}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"phonenumber\">Phone Number</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"phone_number\"\r\n                        name=\"phone_number\"\r\n                        required\r\n                        value={values.phone_number}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className={classes.actions}>\r\n                      <button disabled={isSubmitting} type=\"submit\">\r\n                        Update\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateClient;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\ClientPage\\DeleteClient.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\ClientService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\ReservationService.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\DeleteReservation.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\components\\Reservation\\UpdateReservation.js",["168","169"],"import React, { useEffect, useState } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport classes from \"./UpdateReservation.module.css\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { service_type, timeArray, status } from \"./../../data\";\r\nimport { ReservationService } from \"./../../services/ReservationService\";\r\nimport { Formik } from \"formik\";\r\nimport { ClientService } from \"./../../services/ClientService\";\r\nimport { UserService } from \"./../../services/UserService\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\n\r\nconst UpdateReservation = (props) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const [clients, setClients] = useState([]);\r\n\r\n  const [users, setUser] = useState([]);\r\n\r\n  // const clients = [\r\n  //   { id: \"1\", name: \"Waruna Kulathunga\" },\r\n  //   { id: \"2\", name: \"Chamila Hearth\" },\r\n  // ];\r\n\r\n  const stylist = [\r\n    { id: \"1\", name: \"Ron Jesen\" },\r\n    { id: \"2\", name: \"Zamir Ahmed\" },\r\n  ];\r\n\r\n  const [reservationInfo, setReservationInfo] = useState({\r\n    client: \"\",\r\n    service_type: \"\",\r\n    stylist: \"\",\r\n    reservation_date: \"\",\r\n    reservation_time: \"\",\r\n    reservation_status: \"\",\r\n  });\r\n\r\n  const ReservationDetailSearchID = async () => {\r\n    try {\r\n      const result = await ReservationService.reservationIDDetailsID(\r\n        props.reservationId\r\n      );\r\n\r\n      const info = {};\r\n\r\n      const reservationInfo = result;\r\n\r\n      info.client = reservationInfo.client;\r\n      info.service_type = reservationInfo.service_type;\r\n      info.stylist = reservationInfo.stylist;\r\n      info.reservation_date = reservationInfo.reservation_date;\r\n      info.reservation_time = reservationInfo.reservation_time;\r\n      info.reservation_status = reservationInfo.reservation_status;\r\n\r\n      setReservationInfo(info);\r\n    } catch (err) {\r\n      // console.log(err);\r\n    }\r\n  };\r\n\r\n  const ClientDetails = async () => {\r\n    try {\r\n      const result = await ClientService.clientDetails();\r\n\r\n      setClients(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const UserDetails = async () => {\r\n    try {\r\n      const result = await UserService.userDetails();\r\n\r\n      setUser(result);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const onSubmitForm = (values) => {\r\n    try {\r\n      ReservationService.reservationUpdate(\r\n        props.reservationId,\r\n        values.client,\r\n        values.service_type,\r\n        values.stylist,\r\n        values.reservation_date,\r\n        values.reservation_time,\r\n        values.reservation_status\r\n      );\r\n\r\n      NotificationManager.success(\"Client Success Update\", \"Success\");\r\n      handleClose();\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    ClientDetails();\r\n    UserDetails();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.reservationId === \"\") {\r\n    } else {\r\n      ReservationDetailSearchID();\r\n    }\r\n  }, [props.reservationId]);\r\n\r\n  return (\r\n    <div>\r\n      <FontAwesomeIcon\r\n        icon={faPen}\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={handleOpen}\r\n      />\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className={classes.auth}>\r\n          <Typography\r\n            id=\"modal-modal-title\"\r\n            variant=\"h6\"\r\n            component=\"h2\"\r\n            textAlign=\"center\"\r\n          >\r\n            Update Reservation\r\n          </Typography>\r\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n            <section>\r\n              <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                  client: reservationInfo.client,\r\n                  service_type: reservationInfo.service_type,\r\n                  stylist: reservationInfo.stylist,\r\n                  reservation_date: reservationInfo.reservation_date,\r\n                  reservation_time: reservationInfo.reservation_time,\r\n                  reservation_status: reservationInfo.reservation_status,\r\n                }}\r\n                onSubmit={onSubmitForm}\r\n                // innerRef={formRef}\r\n              >\r\n                {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                  /* and other goodies */\r\n                }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Client</label>\r\n                      <select\r\n                        name=\"client\"\r\n                        className=\"form-control\"\r\n                        id=\"selectClient\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.client}\r\n                      >\r\n                        <option value={\"\"}>Select Client</option>\r\n                        {clients.map((cli, index) => {\r\n                          return (\r\n                            <option key={cli.fname} value={cli.fname}>\r\n                              {cli.fname}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Service Type</label>\r\n                      <select\r\n                        name=\"service_type\"\r\n                        className=\"form-control\"\r\n                        id=\"selectservice\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.service_type}\r\n                      >\r\n                        {service_type.map((service, index) => {\r\n                          return (\r\n                            <option key={service.id} value={service.title}>\r\n                              {service.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Stylist</label>\r\n                      <select\r\n                        name=\"stylist\"\r\n                        className=\"form-control\"\r\n                        id=\"stylist_id\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.stylist}\r\n                      >\r\n                        {users.map((user, index) => {\r\n                          return (\r\n                            <option key={user._id} value={user.fname}>\r\n                              {user.fname}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Date</label>\r\n                      <input\r\n                        type=\"date\"\r\n                        id=\"date_id\"\r\n                        name=\"reservation_date\"\r\n                        required\r\n                        value={values.reservation_date}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Time</label>\r\n                      <select\r\n                        name=\"reservation_time\"\r\n                        className=\"form-control\"\r\n                        id=\"reservation_time_id\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.reservation_time}\r\n                      >\r\n                        {timeArray.map((time, index) => {\r\n                          return (\r\n                            <option key={time.id} value={time.time}>\r\n                              {time.time}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                    <div className={classes.control}>\r\n                      <label htmlFor=\"text\">Select Status</label>\r\n                      <select\r\n                        name=\"reservation_status\"\r\n                        className=\"form-control\"\r\n                        id=\"reservation_status_id\"\r\n                        required\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.reservation_status}\r\n                      >\r\n                        {status.map((stat, index) => {\r\n                          return (\r\n                            <option key={stat.id} value={stat.title}>\r\n                              {stat.title}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className={classes.actions}>\r\n                      <button>Update</button>\r\n                    </div>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </section>\r\n          </Typography>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateReservation;\r\n","E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\config\\constants.js",[],"E:\\React\\React 2nd Assigment\\Waruna_React_2nd_Assigment_git\\FrontEnd_Waruna\\src\\services\\UserService.js",[],{"ruleId":"170","severity":1,"message":"171","line":3,"column":10,"nodeType":"172","messageId":"173","endLine":3,"endColumn":18},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":34,"column":34,"nodeType":"180","messageId":"181","endLine":34,"endColumn":36},{"ruleId":"178","severity":1,"message":"179","line":36,"column":41,"nodeType":"180","messageId":"181","endLine":36,"endColumn":43},{"ruleId":"178","severity":1,"message":"179","line":38,"column":41,"nodeType":"180","messageId":"181","endLine":38,"endColumn":43},{"ruleId":"178","severity":1,"message":"179","line":30,"column":23,"nodeType":"180","messageId":"181","endLine":30,"endColumn":25},{"ruleId":"170","severity":1,"message":"182","line":33,"column":13,"nodeType":"172","messageId":"173","endLine":33,"endColumn":21},{"ruleId":"178","severity":1,"message":"179","line":34,"column":29,"nodeType":"180","messageId":"181","endLine":34,"endColumn":31},{"ruleId":"178","severity":1,"message":"179","line":36,"column":36,"nodeType":"180","messageId":"181","endLine":36,"endColumn":38},{"ruleId":"178","severity":1,"message":"179","line":38,"column":36,"nodeType":"180","messageId":"181","endLine":38,"endColumn":38},{"ruleId":"170","severity":1,"message":"183","line":18,"column":9,"nodeType":"172","messageId":"173","endLine":18,"endColumn":16},{"ruleId":"170","severity":1,"message":"182","line":43,"column":13,"nodeType":"172","messageId":"173","endLine":43,"endColumn":21},{"ruleId":"170","severity":1,"message":"184","line":7,"column":10,"nodeType":"172","messageId":"173","endLine":7,"endColumn":29},{"ruleId":"170","severity":1,"message":"185","line":15,"column":10,"nodeType":"172","messageId":"173","endLine":15,"endColumn":27},{"ruleId":"178","severity":1,"message":"179","line":33,"column":30,"nodeType":"180","messageId":"181","endLine":33,"endColumn":32},{"ruleId":"170","severity":1,"message":"186","line":1,"column":38,"nodeType":"172","messageId":"173","endLine":1,"endColumn":44},{"ruleId":"187","severity":1,"message":"188","line":73,"column":6,"nodeType":"189","endLine":73,"endColumn":22,"suggestions":"190"},{"ruleId":"170","severity":1,"message":"183","line":30,"column":9,"nodeType":"172","messageId":"173","endLine":30,"endColumn":16},{"ruleId":"187","severity":1,"message":"191","line":112,"column":6,"nodeType":"189","endLine":112,"endColumn":27,"suggestions":"192"},"no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","no-native-reassign",["193"],"no-negated-in-lhs",["194"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'response' is assigned a value but never used.","'stylist' is assigned a value but never used.","'NotificationManager' is defined but never used.","'reservation_state' is assigned a value but never used.","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ClientDetailSearchID'. Either include it or remove the dependency array.","ArrayExpression",["195"],"React Hook useEffect has a missing dependency: 'ReservationDetailSearchID'. Either include it or remove the dependency array.",["196"],"no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},"Update the dependencies array to be: [ClientDetailSearchID, props.clientId]",{"range":"201","text":"202"},"Update the dependencies array to be: [ReservationDetailSearchID, props.reservationId]",{"range":"203","text":"204"},[2011,2027],"[ClientDetailSearchID, props.clientId]",[3184,3205],"[ReservationDetailSearchID, props.reservationId]"]